Current mod_perl doesn't build against apache 2.4.
This patch is generated against httpd24threading mod_perl-2.0 branch and a bit stripped.
These changes are likely to be integrated in mod_perl trunk soon.
When code base is the same, mod_perl and mod_perl-24 components can be merged.

diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/Changes mod_perl-2.0.8/Changes
--- mod_perl-2.0.8/Changes	2013-04-17 21:36:11.000000000 +0400
+++ mod_perl-2.0.8/Changes	2014-05-08 19:05:41.530312346 +0400
@@ -10,6 +10,47 @@
 
 =over 3
 
+=item 2.0.9-dev
+
+Make sure modperl_interp_select uses r->server rather than the passed s
+parameter to find the interpreter pool to pull an interpreter from. This
+fixes an issue with vhosts with a separate interpreter pool and runtime
+dir-config merges that used to pull the interpreter from the wrong pool.
+[Torsten Foertsch]
+
+PerlInterpScope is now more advisory. Using $(c|r)->pnotes will bind
+the current interpreter to that object for it's lifetime.
+$(c|r)->pnotes_kill() can be used to prematurely drop pnotes and
+remove this binding. [Torsten Foertsch]
+
+Now correctly invokes PerlCleanupHandlers, even if they are the only
+handler type configured for that request [Torsten Foertsch]
+
+For threaded MPMs, change interpreter managment to a new, reference-counted
+allocation model. [Torsten Foertsch]
+
+Expose modperl_interp_pool_t via ModPerl::InterpPool, modperl_tipool_t
+via ModPerl::TiPool and modperl_tipool_config_t via ModPerl::TiPoolConfig
+[Torsten Foertsch]
+
+Expose modperl_interp_t via ModPerl::Interpreter [Torsten Foertsch]
+
+Fix t/compat/apache_file.t on Windows. Apache::File->tmpfile() wants TMPDIR
+or TEMP from the environment, or else defaults to /tmp. The latter is no
+good on Windows, so make sure the environment variables are passed through.
+(TEMP should be set to something suitable on Windows.) [Steve Hay]
+
+Fix t/api/err_headers_out.t with HTTP::Headers > 6.00. [Rolando
+<rolosworld@gmail.com>]
+
+Fix the build with VC++ and dmake (rather than nmake) on Windows. The
+Makefile generated by Apache2::Build uses shell commands for the manifest
+file, but neglected to tell dmake to use the shell. [Steve Hay]
+
+Don't write an 'rpm' target into the Makefile on Windows. It isn't relevant
+on Windows, and the (hard-coded, not MakeMaker-generated) recipe group has
+syntax which dmake doesn't understand. [Steve Hay]
+
 =item 2.0.8 April 17, 2013
 
 Perl 5.16.3's fix for a rehash-based DoS makes it more difficult to invoke
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/lib/Apache2/Build.pm mod_perl-2.0.8/lib/Apache2/Build.pm
--- mod_perl-2.0.8/lib/Apache2/Build.pm	2011-12-26 07:39:13.000000000 +0400
+++ mod_perl-2.0.8/lib/Apache2/Build.pm	2014-05-08 19:05:41.483075050 +0400
@@ -75,6 +76,7 @@
 use constant WIN32   => $^O eq 'MSWin32';
 
 use constant MSVC => WIN32() && ($Config{cc} eq 'cl');
+use constant DMAKE => WIN32() && ($Config{make} eq 'dmake');
 
 use constant REQUIRE_ITHREADS => grep { $^O eq $_ } qw(MSWin32);
 use constant PERL_HAS_ITHREADS =>
@@ -281,7 +283,7 @@
 sub mpm_is_threaded {
     my $self = shift;
     my $mpm_name = $self->mpm_name();
-    return $threaded_mpms{$mpm_name} || 0;
+    return exists $threaded_mpms{$mpm_name} ? 1 : 0;
 }
 
 sub mpm_name {
@@ -289,6 +291,11 @@
 
     return $self->{mpm_name} if $self->{mpm_name};
 
+    if ($self->httpd_version =~ /^(\d+)\.(\d+)\.(\d+)/) {
+	delete $threaded_mpms{dynamic} if $self->mp_nonthreaded_ok;
+	return $self->{mpm_name} = 'dynamic' if ($1*1000+$2)*1000+$3>=2003000;
+    }
+
     # XXX: hopefully apxs will work on win32 one day
     return $self->{mpm_name} = 'winnt' if WIN32;
 
@@ -1153,18 +1160,7 @@
 
 sub apr_generation {
     my ($self) = @_;
-
-    my $httpd_v = $self->httpd_version_as_int;
-
-    if ($httpd_v =~ m/2[4-9]\d+/) {
-        return 2;
-    }
-    elsif ($httpd_v =~ m/2[1-3]\d+/) {
-        return 1;
-    }
-    else {
-        return;
-    }
+    return $self->httpd_version_as_int =~ m/2[1-9]\d+/ ? 1 : 0;
 }
 
 # returns an array of apr/apu linking flags (--link-ld --libs) if found
@@ -1224,8 +1220,7 @@
         $self->{$key} = $self->{$mp_key};
     }
 
-    my $apr_generation = $self->apr_generation;
-    my $config = $apr_generation ? "$what-${apr_generation}-config" : "$what-config";
+    my $config = $self->apr_generation ? "$what-1-config" : "$what-config";
 
     if (!$self->{$key}) {
         my @tries = ();
@@ -1979,6 +1974,11 @@
 
     print $fh $install;
 
+    print $fh <<'EOF' if DMAKE;
+
+.USESHELL :
+EOF
+
     print $fh <<'EOF';
 
 .SUFFIXES: .xs .c $(MODPERL_OBJ_EXT) .lo .i .s
@@ -2207,7 +2207,8 @@
     # with it is that we didn't have such a case yet, but may need to
     # deal with it later
 
-    return $perl_lfs64 ^ $apr_lfs64;
+    return 0;
+    # $perl_lfs64 ^ $apr_lfs64;
 }
 
 # if perl is built with uselargefiles, but apr not, the build won't
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/lib/Apache2/ParseSource.pm mod_perl-2.0.8/lib/Apache2/ParseSource.pm
--- mod_perl-2.0.8/lib/Apache2/ParseSource.pm	2012-12-09 10:48:59.000000000 +0400
+++ mod_perl-2.0.8/lib/Apache2/ParseSource.pm	2014-05-08 19:05:41.476893676 +0400
@@ -73,6 +74,9 @@
     'CORE_PRIVATE',   #so we get all of apache
     'MP_SOURCE_SCAN', #so we can avoid some c-scan barfing
     '_NETINET_TCP_H', #c-scan chokes on netinet/tcp.h
+    '_BYTESWAP_H', #c-scan chokes on byteswap.h
+    '_BITS_BYTESWAP_H', #c-scan chokes on byteswap.h
+    'Expat_INCLUDED', #c-scan chokes on expath.h
  #   'APR_OPTIONAL_H', #c-scan chokes on apr_optional.h
     'apr_table_do_callback_fn_t=void', #c-scan chokes on function pointers
 );
@@ -252,6 +256,7 @@
         remotehost => [qw{REMOTE_}],
         satisfy    => [qw{SATISFY_}],
         types      => [qw{DIR_MAGIC_TYPE}],
+        auth       => [qw{AUTHN_ AUTHZ AP_AUTH_ AUTH_ AUTHZ_}],
     },
     'APR::Const' => {
         common    => [qw{APR_SUCCESS}],
@@ -284,7 +289,7 @@
 }
 
 my %enums_wanted = (
-    'Apache2::Const' => { map { $_, 1 } qw(cmd_how input_mode filter_type conn_keepalive) },
+    'Apache2::Const' => { map { $_, 1 } qw(cmd_how input_mode filter_type conn_keepalive authn_status authz_status) },
     'APR::Const' => { map { $_, 1 } qw(apr_shutdown_how apr_read_type apr_lockmech) },
 );
 
@@ -411,6 +416,8 @@
     my $c = $self->{c};
 
     my $fdecls = $c->get($key);
+    my $inlines = $c->get('parsed_inlines');
+    push @{$fdecls}, @{$inlines};
 
     my %seen;
     my $wanted = $self->wanted_functions;
@@ -533,7 +540,16 @@
 
     my ($subdir) = (split '::', $name)[0];
 
-    my $tdir = 'xs/tables/current';
+    my $tdir = '';
+    my $build = Apache2::Build->new(init => 1);
+    my $httpd_version = $build->httpd_version;
+    if ($httpd_version lt '2.4.0') {
+        $tdir='xs/tables/current';
+    }
+    else {
+        $tdir='xs/tables/current24';
+    }
+
     if (-d "$tdir/$subdir") {
         $file = "$tdir/$subdir/$file";
     }
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/lib/mod_perl2.pm mod_perl-2.0.8/lib/mod_perl2.pm
--- mod_perl-2.0.8/lib/mod_perl2.pm	2012-06-06 06:43:38.000000000 +0400
+++ mod_perl-2.0.8/lib/mod_perl2.pm	2014-05-08 19:05:41.315687126 +0400
@@ -19,7 +20,7 @@
 use strict;
 
 BEGIN {
-    our $VERSION = "2.000008";
+    our $VERSION = "2.000009";
     our $VERSION_TRIPLET;
 
     if ($VERSION =~ /(\d+)\.(\d\d\d)(\d+)/) {
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/lib/ModPerl/BuildOptions.pm mod_perl-2.0.8/lib/ModPerl/BuildOptions.pm
--- mod_perl-2.0.8/lib/ModPerl/BuildOptions.pm	2011-02-08 05:00:12.000000000 +0300
+++ mod_perl-2.0.8/lib/ModPerl/BuildOptions.pm	2014-05-08 19:05:41.433864747 +0400
@@ -264,4 +265,4 @@
 LIBNAME        0    Name of the modperl dso library (default is  mod_perl)
 COMPAT_1X      0    Compile-time mod_perl 1.0 backcompat (default is  on)
 APR_LIB        0    Lib used to build APR::* on Win32 (default is aprext)
-
+NO_THREADS     0    Build mod_perl without thread support with httpd >= 2.4
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/lib/ModPerl/Code.pm mod_perl-2.0.8/lib/ModPerl/Code.pm
--- mod_perl-2.0.8/lib/ModPerl/Code.pm	2012-12-09 10:48:59.000000000 +0400
+++ mod_perl-2.0.8/lib/ModPerl/Code.pm	2014-05-08 19:05:41.432558346 +0400
@@ -142,7 +143,7 @@
     Dir => [qw(NONE PARSE_HEADERS SETUP_ENV MERGE_HANDLERS GLOBAL_REQUEST UNSET)],
     Req => [qw(NONE SET_GLOBAL_REQUEST PARSE_HEADERS SETUP_ENV
                CLEANUP_REGISTERED PERL_SET_ENV_DIR PERL_SET_ENV_SRV)],
-    Interp => [qw(NONE IN_USE PUTBACK CLONED BASE)],
+    Interp => [qw(NONE IN_USE CLONED BASE)],
     Handler => [qw(NONE PARSED METHOD OBJECT ANON AUTOLOAD DYNAMIC FAKE)],
 );
 
@@ -891,6 +892,15 @@
             if ($name eq 'DECLINE_CMD' ||
                 $name eq 'DIR_MAGIC_TYPE' ||
                 $name eq 'CRLF' ||
+                $name eq 'AUTHN_PROVIDER_GROUP' ||
+                $name eq 'AUTHZ_PROVIDER_GROUP' ||
+                $name eq 'AUTHN_PROVIDER_VERSION' ||
+                $name eq 'AUTHZ_PROVIDER_VERSION' ||
+                $name eq 'AUTHN_DEFAULT_PROVIDER' ||
+                $name eq 'AUTHN_PROVIDER_NAME_NOTE' ||
+                $name eq 'AUTHZ_PROVIDER_NAME_NOTE' ||
+                $name eq 'AUTHN_PREFIX' ||
+                $name eq 'AUTHZ_PREFIX' ||
                 $name eq 'CRLF_ASCII') {
                 print $c_fh <<EOF;
               return newSVpv($alias{$name}, 0);
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/lib/ModPerl/CScan.pm mod_perl-2.0.8/lib/ModPerl/CScan.pm
--- mod_perl-2.0.8/lib/ModPerl/CScan.pm	2012-12-09 10:48:59.000000000 +0400
+++ mod_perl-2.0.8/lib/ModPerl/CScan.pm	2014-05-08 19:05:41.428241548 +0400
@@ -1,3 +1,4 @@
+# please insert nothing before this line: -*- mode: cperl; cperl-indent-level: 4; cperl-continued-statement-offset: 4; indent-tabs-mode: nil -*-
 package ModPerl::CScan;
 
 require Exporter;
@@ -136,6 +137,8 @@
       vdecl_hash => { filter => [ \&vdecl_hash, 'vdecls', 'mdecls' ], },
       parsed_fdecls => { filter => [ \&do_declarations, 'fdecls',
                                      'typedef_hash', 'keywords'], },
+      parsed_inlines => { filter => [ \&do_declarations, 'inlines',
+                                     'typedef_hash', 'keywords'], },
       keywords_rex => { filter => [ sub { my @k = keys %{ shift() };
                                           local $" = '|';
                                           my $r = "(?:@k)";
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/lib/ModPerl/DummyVersions.pm mod_perl-2.0.8/lib/ModPerl/DummyVersions.pm
--- mod_perl-2.0.8/lib/ModPerl/DummyVersions.pm	2013-04-17 21:50:27.000000000 +0400
+++ mod_perl-2.0.8/lib/ModPerl/DummyVersions.pm	1970-01-01 03:00:00.000000000 +0300
@@ -1,156 +0,0 @@
-# 
-# /*
-#  * *********** WARNING **************
-#  * This file generated by ModPerl::WrapXS/0.01
-#  * Any changes made here will be lost
-#  * ***********************************
-#  * 01: lib/ModPerl/Code.pm:709
-#  * 02: lib/ModPerl/WrapXS.pm:1135
-#  * 03: lib/ModPerl/WrapXS.pm:1186
-#  * 04: Makefile.PL:427
-#  * 05: Makefile.PL:329
-#  * 06: Makefile.PL:58
-#  */
-# 
-
-package APR::Util;
-$APR::Util::VERSION               = 0.009000;
-
-package APR::Base64;
-$APR::Base64::VERSION             = 0.009000;
-
-package Apache2::Process;
-$Apache2::Process::VERSION        = 2.000008;
-
-package Apache2::HookRun;
-$Apache2::HookRun::VERSION        = 2.000008;
-
-package APR::Bucket;
-$APR::Bucket::VERSION             = 0.009000;
-
-package Apache2::Command;
-$Apache2::Command::VERSION        = 2.000008;
-
-package Apache2::ConnectionUtil;
-$Apache2::ConnectionUtil::VERSION = 2.000008;
-
-package APR::Finfo;
-$APR::Finfo::VERSION              = 0.009000;
-
-package APR::SockAddr;
-$APR::SockAddr::VERSION           = 0.009000;
-
-package ModPerl::Global;
-$ModPerl::Global::VERSION         = 2.000008;
-
-package Apache2::FilterRec;
-$Apache2::FilterRec::VERSION      = 2.000008;
-
-package APR::BucketType;
-$APR::BucketType::VERSION         = 0.009000;
-
-package Apache2::MPM;
-$Apache2::MPM::VERSION            = 2.000008;
-
-package Apache2::Directive;
-$Apache2::Directive::VERSION      = 2.000008;
-
-package APR::Error;
-$APR::Error::VERSION              = 0.009000;
-
-package Apache2::Filter;
-$Apache2::Filter::VERSION         = 2.000008;
-
-package Apache2::Util;
-$Apache2::Util::VERSION           = 2.000008;
-
-package APR::Date;
-$APR::Date::VERSION               = 0.009000;
-
-package Apache2::CmdParms;
-$Apache2::CmdParms::VERSION       = 2.000008;
-
-package Apache2::Log;
-$Apache2::Log::VERSION            = 2.000008;
-
-package Apache2::ServerUtil;
-$Apache2::ServerUtil::VERSION     = 2.000008;
-
-package Apache2::RequestUtil;
-$Apache2::RequestUtil::VERSION    = 2.000008;
-
-package Apache2::URI;
-$Apache2::URI::VERSION            = 2.000008;
-
-package APR::UUID;
-$APR::UUID::VERSION               = 0.009000;
-
-package APR::Table;
-$APR::Table::VERSION              = 0.009000;
-
-package APR::Status;
-$APR::Status::VERSION             = 0.009000;
-
-package Apache2::Connection;
-$Apache2::Connection::VERSION     = 2.000008;
-
-package Apache2::ServerRec;
-$Apache2::ServerRec::VERSION      = 2.000008;
-
-package ModPerl::Util;
-$ModPerl::Util::VERSION           = 2.000008;
-
-package Apache2::SubRequest;
-$Apache2::SubRequest::VERSION     = 2.000008;
-
-package APR::URI;
-$APR::URI::VERSION                = 0.009000;
-
-package Apache2::RequestIO;
-$Apache2::RequestIO::VERSION      = 2.000008;
-
-package APR::Brigade;
-$APR::Brigade::VERSION            = 0.009000;
-
-package APR::ThreadMutex;
-$APR::ThreadMutex::VERSION        = 0.009000;
-
-package APR::BucketAlloc;
-$APR::BucketAlloc::VERSION        = 0.009000;
-
-package Apache2::SubProcess;
-$Apache2::SubProcess::VERSION     = 2.000008;
-
-package Apache2::Response;
-$Apache2::Response::VERSION       = 2.000008;
-
-package APR::IpSubnet;
-$APR::IpSubnet::VERSION           = 0.009000;
-
-package APR::ThreadRWLock;
-$APR::ThreadRWLock::VERSION       = 0.009000;
-
-package Apache2::RequestRec;
-$Apache2::RequestRec::VERSION     = 2.000008;
-
-package Apache2::Module;
-$Apache2::Module::VERSION         = 2.000008;
-
-package APR::OS;
-$APR::OS::VERSION                 = 0.009000;
-
-package APR::Socket;
-$APR::Socket::VERSION             = 0.009000;
-
-package Apache2::Access;
-$Apache2::Access::VERSION         = 2.000008;
-
-package APR::String;
-$APR::String::VERSION             = 0.009000;
-
-package APR::Pool;
-$APR::Pool::VERSION               = 0.009000;
-
-package ModPerl::MethodLookup;
-$ModPerl::MethodLookup::VERSION   = 2.000008;
-
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/lib/ModPerl/MapUtil.pm mod_perl-2.0.8/lib/ModPerl/MapUtil.pm
--- mod_perl-2.0.8/lib/ModPerl/MapUtil.pm	2011-02-08 05:00:12.000000000 +0300
+++ mod_perl-2.0.8/lib/ModPerl/MapUtil.pm	2014-05-08 19:05:41.435173088 +0400
@@ -46,7 +46,14 @@
 
 sub function_table {
     return $function_table if @$function_table;
-    push @INC, "xs/tables/current";
+    my $build = Apache2::Build->new(init => 1);
+    my $httpd_version = $build->httpd_version;
+    if ($httpd_version lt '2.4.0' || ! -d "xs/tables/current24") {
+        push @INC, "xs/tables/current";
+    }
+    else {
+        push @INC, "xs/tables/current24";
+    }
     require Apache2::FunctionTable;
     require ModPerl::FunctionTable;
     require APR::FunctionTable;
@@ -103,15 +110,28 @@
         # #_end_
         if (/^\s*#\s*_(if|unless|els(?:e|if)|end)_(?:\s(.+))?/) {
             my ($cmd, $param) = ($1, $2);
+            if (defined $param) {
+                while ($param=~s!\\$!!) {
+                    my $l=<$fh>;
+                    die "$ModPerl::MapUtil::MapFile($.): unexpected EOF\n"
+                        unless defined $l;
+                    chomp $l;
+                    $param.=$l;
+                }
+            }
             if ($cmd eq 'if') {
-                unshift @condition, 0+!!eval $param;
+                unshift @condition,
+                    0+!!eval "#line $. $ModPerl::MapUtil::MapFile\n".$param;
+                die $@ if $@;
             }
             elsif ($cmd eq 'elsif') {
                 die "parse error ($ModPerl::MapUtil::MapFile line $.)".
                     " #_elsif_ without #_if_"
                     unless @condition;
                 if ($condition[0] == 0) {
-                    $condition[0]+=!!eval $param;
+                    $condition[0]+=
+                        !!eval "#line $. $ModPerl::MapUtil::MapFile\n".$param;
+                    die $@ if $@;
                 } else {
                     $condition[0]++;
                 }
@@ -123,7 +143,9 @@
                 $condition[0]+=1;
             }
             elsif ($cmd eq 'unless') {
-                unshift @condition, 0+!eval $param;
+                unshift @condition,
+                    0+!eval "#line $. $ModPerl::MapUtil::MapFile\n".$param;
+                die $@ if $@;
             }
             elsif ($cmd eq 'end') {
                 shift @condition;
@@ -133,6 +155,15 @@
 
         if (/^\s*#\s*_(eval)_(?:\s(.+))?/) {
             my ($cmd, $param) = ($1, $2);
+            if (defined $param) {
+                while ($param=~s!\\$!!) {
+                    my $l=<$fh>;
+                    die "$ModPerl::MapUtil::MapFile($.): unexpected EOF\n"
+                        unless defined $l;
+                    chomp $l;
+                    $param.=$l;
+                }
+            }
             if ($cmd eq 'eval') {
                 eval "#line $. $ModPerl::MapUtil::MapFile\n".$param;
                 die $@ if $@;
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/lib/ModPerl/MethodLookup.pm mod_perl-2.0.8/lib/ModPerl/MethodLookup.pm
--- mod_perl-2.0.8/lib/ModPerl/MethodLookup.pm	2013-04-17 21:50:27.000000000 +0400
+++ mod_perl-2.0.8/lib/ModPerl/MethodLookup.pm	1970-01-01 03:00:00.000000000 +0300
@@ -1,2915 +0,0 @@
-# 
-# /*
-#  * *********** WARNING **************
-#  * This file generated by ModPerl::WrapXS/0.01
-#  * Any changes made here will be lost
-#  * ***********************************
-#  * 01: lib/ModPerl/Code.pm:709
-#  * 02: lib/ModPerl/WrapXS.pm:762
-#  * 03: lib/ModPerl/WrapXS.pm:1185
-#  * 04: Makefile.PL:427
-#  * 05: Makefile.PL:329
-#  * 06: Makefile.PL:58
-#  */
-# 
-
-package ModPerl::MethodLookup;
-
-use strict;
-use warnings;
-
-my $methods = {
-  'BINMODE' => [
-                 [
-                   'Apache2::RequestIO',
-                   'Apache2::RequestRec'
-                 ]
-               ],
-  'CLEAR' => [
-               [
-                 'APR::Table',
-                 'APR::Table'
-               ]
-             ],
-  'CLOSE' => [
-               [
-                 'Apache2::RequestIO',
-                 'Apache2::RequestRec'
-               ]
-             ],
-  'DELETE' => [
-                [
-                  'APR::Table',
-                  'APR::Table'
-                ]
-              ],
-  'DESTROY' => [
-                 [
-                   'Apache2::SubRequest',
-                   'Apache2::SubRequest'
-                 ],
-                 [
-                   'APR::ThreadMutex',
-                   'APR::ThreadMutex'
-                 ],
-                 [
-                   'APR::ThreadRWLock',
-                   'APR::ThreadRWLock'
-                 ],
-                 [
-                   'APR::Pool',
-                   'APR::Pool'
-                 ]
-               ],
-  'EXISTS' => [
-                [
-                  'APR::Table',
-                  'APR::Table'
-                ]
-              ],
-  'FETCH' => [
-               [
-                 'APR::Table',
-                 'APR::Table'
-               ]
-             ],
-  'FILENO' => [
-                [
-                  'Apache2::RequestIO',
-                  'Apache2::RequestRec'
-                ]
-              ],
-  'FIRSTKEY' => [
-                  [
-                    'APR::Table',
-                    'APR::Table'
-                  ]
-                ],
-  'GETC' => [
-              [
-                'Apache2::RequestIO',
-                'Apache2::RequestRec'
-              ]
-            ],
-  'LOG_MARK' => [
-                  [
-                    'Apache2::Log',
-                    undef
-                  ]
-                ],
-  'MODIFY_CODE_ATTRIBUTES' => [
-                                [
-                                  'Apache2::Filter',
-                                  undef
-                                ]
-                              ],
-  'NEXTKEY' => [
-                 [
-                   'APR::Table',
-                   'APR::Table'
-                 ]
-               ],
-  'OPEN' => [
-              [
-                'Apache2::RequestIO',
-                'Apache2::RequestRec'
-              ]
-            ],
-  'PRINT' => [
-               [
-                 'Apache2::Filter',
-                 'Apache2::Filter'
-               ],
-               [
-                 'Apache2::RequestIO',
-                 'Apache2::RequestRec'
-               ]
-             ],
-  'PRINTF' => [
-                [
-                  'Apache2::RequestIO',
-                  'Apache2::RequestRec'
-                ]
-              ],
-  'READ' => [
-              [
-                'Apache2::RequestIO',
-                'Apache2::RequestRec'
-              ]
-            ],
-  'STORE' => [
-               [
-                 'APR::Table',
-                 'APR::Table'
-               ]
-             ],
-  'TIEHANDLE' => [
-                   [
-                     'Apache2::Filter',
-                     'Apache2::Filter'
-                   ],
-                   [
-                     'Apache2::RequestIO',
-                     'Apache2::RequestRec'
-                   ]
-                 ],
-  'UNTIE' => [
-               [
-                 'Apache2::RequestIO',
-                 'Apache2::RequestRec'
-               ]
-             ],
-  'WRITE' => [
-               [
-                 'Apache2::RequestIO',
-                 'Apache2::RequestRec'
-               ]
-             ],
-  'aborted' => [
-                 [
-                   'Apache2::Connection',
-                   'Apache2::Connection'
-                 ]
-               ],
-  'add' => [
-             [
-               'APR::Table',
-               'APR::Table'
-             ],
-             [
-               'Apache2::Module',
-               'Apache2::Module'
-             ]
-           ],
-  'add_config' => [
-                    [
-                      'Apache2::CmdParms',
-                      'Apache2::CmdParms'
-                    ],
-                    [
-                      'Apache2::ServerUtil',
-                      'Apache2::ServerRec'
-                    ],
-                    [
-                      'Apache2::RequestUtil',
-                      'Apache2::RequestRec'
-                    ]
-                  ],
-  'add_input_filter' => [
-                          [
-                            'Apache2::Filter',
-                            'Apache2::Connection'
-                          ],
-                          [
-                            'Apache2::Filter',
-                            'Apache2::RequestRec'
-                          ]
-                        ],
-  'add_output_filter' => [
-                           [
-                             'Apache2::Filter',
-                             'Apache2::Connection'
-                           ],
-                           [
-                             'Apache2::Filter',
-                             'Apache2::RequestRec'
-                           ]
-                         ],
-  'add_version_component' => [
-                               [
-                                 'Apache2::ServerUtil',
-                                 'Apache2::ServerRec'
-                               ]
-                             ],
-  'addrs' => [
-               [
-                 'Apache2::ServerRec',
-                 'Apache2::ServerRec'
-               ]
-             ],
-  'alert' => [
-               [
-                 'Apache2::Log',
-                 undef
-               ]
-             ],
-  'allow_methods' => [
-                       [
-                         'Apache2::Access',
-                         'Apache2::RequestRec'
-                       ]
-                     ],
-  'allow_options' => [
-                       [
-                         'Apache2::Access',
-                         'Apache2::RequestRec'
-                       ]
-                     ],
-  'allow_override_opts' => [
-                             [
-                               'Apache2::Access',
-                               'Apache2::RequestRec'
-                             ]
-                           ],
-  'allow_overrides' => [
-                         [
-                           'Apache2::Access',
-                           'Apache2::RequestRec'
-                         ]
-                       ],
-  'allowed' => [
-                 [
-                   'Apache2::RequestRec',
-                   'Apache2::RequestRec'
-                 ]
-               ],
-  'allowed_methods' => [
-                         [
-                           'Apache2::RequestRec',
-                           'Apache2::RequestRec'
-                         ]
-                       ],
-  'allowed_xmethods' => [
-                          [
-                            'Apache2::RequestRec',
-                            'Apache2::RequestRec'
-                          ]
-                        ],
-  'ap_api_major_version' => [
-                              [
-                                'Apache2::Module',
-                                'Apache2::Module'
-                              ]
-                            ],
-  'ap_api_minor_version' => [
-                              [
-                                'Apache2::Module',
-                                'Apache2::Module'
-                              ]
-                            ],
-  'ap_auth_type' => [
-                      [
-                        'Apache2::RequestRec',
-                        'Apache2::RequestRec'
-                      ]
-                    ],
-  'args' => [
-              [
-                'Apache2::Directive',
-                'Apache2::Directive'
-              ],
-              [
-                'Apache2::RequestRec',
-                'Apache2::RequestRec'
-              ]
-            ],
-  'args_how' => [
-                  [
-                    'Apache2::Command',
-                    'Apache2::Command'
-                  ]
-                ],
-  'as_hash' => [
-                 [
-                   'Apache2::Directive',
-                   'Apache2::Directive'
-                 ]
-               ],
-  'as_string' => [
-                   [
-                     'Apache2::Directive',
-                     'Apache2::Directive'
-                   ],
-                   [
-                     'Apache2::RequestUtil',
-                     'Apache2::RequestRec'
-                   ]
-                 ],
-  'assbackwards' => [
-                      [
-                        'Apache2::RequestRec',
-                        'Apache2::RequestRec'
-                      ]
-                    ],
-  'atime' => [
-               [
-                 'APR::Finfo',
-                 'APR::Finfo'
-               ]
-             ],
-  'auth_name' => [
-                   [
-                     'Apache2::Access',
-                     'Apache2::RequestRec'
-                   ]
-                 ],
-  'auth_type' => [
-                   [
-                     'Apache2::Access',
-                     'Apache2::RequestRec'
-                   ]
-                 ],
-  'base_server' => [
-                     [
-                       'Apache2::Connection',
-                       'Apache2::Connection'
-                     ]
-                   ],
-  'bind' => [
-              [
-                'APR::Socket',
-                'APR::Socket'
-              ]
-            ],
-  'bucket_alloc' => [
-                      [
-                        'Apache2::Connection',
-                        'Apache2::Connection'
-                      ],
-                      [
-                        'APR::Brigade',
-                        'APR::Brigade'
-                      ]
-                    ],
-  'bytes_sent' => [
-                    [
-                      'Apache2::RequestRec',
-                      'Apache2::RequestRec'
-                    ]
-                  ],
-  'c' => [
-           [
-             'Apache2::Filter',
-             'Apache2::Filter'
-           ]
-         ],
-  'check_cmd_context' => [
-                           [
-                             'Apache2::CmdParms',
-                             'Apache2::CmdParms'
-                           ]
-                         ],
-  'child_terminate' => [
-                         [
-                           'Apache2::RequestUtil',
-                           'Apache2::RequestRec'
-                         ]
-                       ],
-  'cleanup' => [
-                 [
-                   'APR::Brigade',
-                   'APR::Brigade'
-                 ]
-               ],
-  'cleanup_for_exec' => [
-                          [
-                            'APR::Pool',
-                            'APR::Pool'
-                          ]
-                        ],
-  'cleanup_register' => [
-                          [
-                            'APR::Pool',
-                            'APR::Pool'
-                          ]
-                        ],
-  'clear' => [
-               [
-                 'APR::Table',
-                 'APR::Table'
-               ],
-               [
-                 'APR::Pool',
-                 'APR::Pool'
-               ]
-             ],
-  'client_socket' => [
-                       [
-                         'Apache2::Connection',
-                         'Apache2::Connection'
-                       ]
-                     ],
-  'close' => [
-               [
-                 'APR::Socket',
-                 'APR::Socket'
-               ]
-             ],
-  'cmd' => [
-             [
-               'Apache2::CmdParms',
-               'Apache2::CmdParms'
-             ]
-           ],
-  'cmds' => [
-              [
-                'Apache2::Module',
-                'Apache2::Module'
-              ]
-            ],
-  'compress' => [
-                  [
-                    'APR::Table',
-                    'APR::Table'
-                  ]
-                ],
-  'concat' => [
-                [
-                  'APR::Brigade',
-                  'APR::Brigade'
-                ]
-              ],
-  'conftree' => [
-                  [
-                    'Apache2::Directive',
-                    'Apache2::Directive'
-                  ]
-                ],
-  'conn_config' => [
-                     [
-                       'Apache2::Connection',
-                       'Apache2::Connection'
-                     ]
-                   ],
-  'connect' => [
-                 [
-                   'APR::Socket',
-                   'APR::Socket'
-                 ]
-               ],
-  'connection' => [
-                    [
-                      'Apache2::RequestRec',
-                      'Apache2::RequestRec'
-                    ]
-                  ],
-  'construct_server' => [
-                          [
-                            'Apache2::URI',
-                            'Apache2::RequestRec'
-                          ]
-                        ],
-  'construct_url' => [
-                       [
-                         'Apache2::URI',
-                         'Apache2::RequestRec'
-                       ]
-                     ],
-  'content_encoding' => [
-                          [
-                            'Apache2::RequestRec',
-                            'Apache2::RequestRec'
-                          ]
-                        ],
-  'content_languages' => [
-                           [
-                             'Apache2::RequestRec',
-                             'Apache2::RequestRec'
-                           ]
-                         ],
-  'content_type' => [
-                      [
-                        'Apache2::RequestRec',
-                        'Apache2::RequestRec'
-                      ]
-                    ],
-  'context' => [
-                 [
-                   'Apache2::CmdParms',
-                   'Apache2::CmdParms'
-                 ]
-               ],
-  'copy' => [
-              [
-                'APR::Table',
-                'APR::Table'
-              ]
-            ],
-  'crit' => [
-              [
-                'Apache2::Log',
-                undef
-              ]
-            ],
-  'csize' => [
-               [
-                 'APR::Finfo',
-                 'APR::Finfo'
-               ]
-             ],
-  'ctime' => [
-               [
-                 'APR::Finfo',
-                 'APR::Finfo'
-               ]
-             ],
-  'ctx' => [
-             [
-               'Apache2::Filter',
-               'Apache2::Filter'
-             ]
-           ],
-  'current_callback' => [
-                          [
-                            'ModPerl::Util',
-                            'ModPerl::Util'
-                          ]
-                        ],
-  'current_perl_id' => [
-                         [
-                           'ModPerl::Util',
-                           'ModPerl::Util'
-                         ]
-                       ],
-  'current_thread_id' => [
-                           [
-                             'APR::OS',
-                             'APR::OS'
-                           ]
-                         ],
-  'custom_response' => [
-                         [
-                           'Apache2::Response',
-                           'Apache2::RequestRec'
-                         ]
-                       ],
-  'data' => [
-              [
-                'APR::Bucket',
-                'APR::Bucket'
-              ]
-            ],
-  'debug' => [
-               [
-                 'Apache2::Log',
-                 undef
-               ]
-             ],
-  'decode' => [
-                [
-                  'APR::Base64',
-                  undef
-                ]
-              ],
-  'default_type' => [
-                      [
-                        'Apache2::RequestUtil',
-                        'Apache2::RequestRec'
-                      ]
-                    ],
-  'delete' => [
-                [
-                  'APR::Bucket',
-                  'APR::Bucket'
-                ]
-              ],
-  'destroy' => [
-                 [
-                   'APR::Bucket',
-                   'APR::Bucket'
-                 ],
-                 [
-                   'APR::Brigade',
-                   'APR::Brigade'
-                 ],
-                 [
-                   'APR::BucketAlloc',
-                   'APR::BucketAlloc'
-                 ],
-                 [
-                   'APR::Pool',
-                   'APR::Pool'
-                 ]
-               ],
-  'device' => [
-                [
-                  'APR::Finfo',
-                  'APR::Finfo'
-                ]
-              ],
-  'die' => [
-             [
-               'Apache2::HookRun',
-               'Apache2::RequestRec'
-             ]
-           ],
-  'dir_config' => [
-                    [
-                      'Apache2::ServerUtil',
-                      'Apache2::ServerRec'
-                    ],
-                    [
-                      'Apache2::RequestUtil',
-                      'Apache2::RequestRec'
-                    ]
-                  ],
-  'directive' => [
-                   [
-                     'Apache2::Directive',
-                     'Apache2::Directive'
-                   ],
-                   [
-                     'Apache2::CmdParms',
-                     'Apache2::CmdParms'
-                   ]
-                 ],
-  'discard_request_body' => [
-                              [
-                                'Apache2::RequestIO',
-                                'Apache2::RequestRec'
-                              ]
-                            ],
-  'do' => [
-            [
-              'APR::Table',
-              'APR::Table'
-            ]
-          ],
-  'document_root' => [
-                       [
-                         'Apache2::RequestUtil',
-                         'Apache2::RequestRec'
-                       ]
-                     ],
-  'emerg' => [
-               [
-                 'Apache2::Log',
-                 undef
-               ]
-             ],
-  'encode' => [
-                [
-                  'APR::Base64',
-                  undef
-                ]
-              ],
-  'encode_len' => [
-                    [
-                      'APR::Base64',
-                      'APR::Base64'
-                    ]
-                  ],
-  'eos_create' => [
-                    [
-                      'APR::Bucket',
-                      'APR::Bucket'
-                    ]
-                  ],
-  'equal' => [
-               [
-                 'APR::SockAddr',
-                 'APR::SockAddr'
-               ]
-             ],
-  'err_headers_out' => [
-                         [
-                           'Apache2::RequestRec',
-                           'Apache2::RequestRec'
-                         ]
-                       ],
-  'errmsg' => [
-                [
-                  'Apache2::Command',
-                  'Apache2::Command'
-                ]
-              ],
-  'error' => [
-               [
-                 'Apache2::Log',
-                 undef
-               ]
-             ],
-  'error_fname' => [
-                     [
-                       'Apache2::ServerRec',
-                       'Apache2::ServerRec'
-                     ]
-                   ],
-  'error_log2stderr' => [
-                          [
-                            'Apache2::ServerUtil',
-                            'Apache2::ServerRec'
-                          ]
-                        ],
-  'escape_path' => [
-                     [
-                       'Apache2::Util',
-                       'Apache2::Util'
-                     ]
-                   ],
-  'exists_config_define' => [
-                              [
-                                'Apache2::ServerUtil',
-                                'Apache2::ServerUtil'
-                              ]
-                            ],
-  'fflush' => [
-                [
-                  'Apache2::Filter',
-                  'Apache2::Filter'
-                ]
-              ],
-  'filename' => [
-                  [
-                    'Apache2::Directive',
-                    'Apache2::Directive'
-                  ],
-                  [
-                    'Apache2::RequestRec',
-                    'Apache2::RequestRec'
-                  ]
-                ],
-  'fileno' => [
-                [
-                  'APR::Socket',
-                  'APR::Socket'
-                ]
-              ],
-  'filepath_name_get' => [
-                           [
-                             'APR::Util',
-                             'APR::Util'
-                           ]
-                         ],
-  'filetype' => [
-                  [
-                    'APR::Finfo',
-                    'APR::Finfo'
-                  ]
-                ],
-  'filter_flush' => [
-                      [
-                        'Apache2::Filter',
-                        'APR::Brigade'
-                      ]
-                    ],
-  'find_linked_module' => [
-                            [
-                              'Apache2::Module',
-                              'Apache2::Module'
-                            ]
-                          ],
-  'finfo' => [
-               [
-                 'Apache2::RequestRec',
-                 'Apache2::RequestRec'
-               ]
-             ],
-  'first' => [
-               [
-                 'APR::Brigade',
-                 'APR::Brigade'
-               ]
-             ],
-  'first_child' => [
-                     [
-                       'Apache2::Directive',
-                       'Apache2::Directive'
-                     ]
-                   ],
-  'flatten' => [
-                 [
-                   'APR::Brigade',
-                   'APR::Brigade'
-                 ]
-               ],
-  'flush_create' => [
-                      [
-                        'APR::Bucket',
-                        'APR::Bucket'
-                      ]
-                    ],
-  'fname' => [
-               [
-                 'APR::Finfo',
-                 'APR::Finfo'
-               ]
-             ],
-  'format' => [
-                [
-                  'APR::UUID',
-                  undef
-                ]
-              ],
-  'format_size' => [
-                     [
-                       'APR::String',
-                       'APR::String'
-                     ]
-                   ],
-  'fragment' => [
-                  [
-                    'APR::URI',
-                    'APR::URI'
-                  ]
-                ],
-  'frec' => [
-              [
-                'Apache2::Filter',
-                'Apache2::Filter'
-              ]
-            ],
-  'get' => [
-             [
-               'APR::Table',
-               undef
-             ]
-           ],
-  'get_basic_auth_pw' => [
-                           [
-                             'Apache2::Access',
-                             undef
-                           ]
-                         ],
-  'get_brigade' => [
-                     [
-                       'Apache2::Filter',
-                       'Apache2::Filter'
-                     ]
-                   ],
-  'get_client_block' => [
-                          [
-                            'Apache2::RequestIO',
-                            'Apache2::RequestRec'
-                          ]
-                        ],
-  'get_config' => [
-                    [
-                      'Apache2::Module',
-                      'Apache2::Module'
-                    ]
-                  ],
-  'get_handlers' => [
-                      [
-                        'Apache2::ServerUtil',
-                        'Apache2::ServerRec'
-                      ],
-                      [
-                        'Apache2::RequestUtil',
-                        'Apache2::RequestRec'
-                      ]
-                    ],
-  'get_limit_req_body' => [
-                            [
-                              'Apache2::RequestUtil',
-                              'Apache2::RequestRec'
-                            ]
-                          ],
-  'get_remote_host' => [
-                         [
-                           'Apache2::Connection',
-                           'Apache2::Connection'
-                         ]
-                       ],
-  'get_remote_logname' => [
-                            [
-                              'Apache2::Access',
-                              'Apache2::RequestRec'
-                            ]
-                          ],
-  'get_server_banner' => [
-                           [
-                             'Apache2::ServerUtil',
-                             'Apache2::ServerUtil'
-                           ]
-                         ],
-  'get_server_description' => [
-                                [
-                                  'Apache2::ServerUtil',
-                                  'Apache2::ServerUtil'
-                                ]
-                              ],
-  'get_server_name' => [
-                         [
-                           'Apache2::RequestUtil',
-                           'Apache2::RequestRec'
-                         ]
-                       ],
-  'get_server_port' => [
-                         [
-                           'Apache2::RequestUtil',
-                           'Apache2::RequestRec'
-                         ]
-                       ],
-  'get_server_version' => [
-                            [
-                              'Apache2::ServerUtil',
-                              'Apache2::ServerUtil'
-                            ]
-                          ],
-  'get_status_line' => [
-                         [
-                           'Apache2::RequestUtil',
-                           'Apache2::RequestUtil'
-                         ]
-                       ],
-  'group' => [
-               [
-                 'APR::Finfo',
-                 'APR::Finfo'
-               ]
-             ],
-  'group_id' => [
-                  [
-                    'Apache2::ServerUtil',
-                    'Apache2::ServerUtil'
-                  ]
-                ],
-  'handler' => [
-                 [
-                   'Apache2::RequestRec',
-                   'Apache2::RequestRec'
-                 ]
-               ],
-  'header_only' => [
-                     [
-                       'Apache2::RequestRec',
-                       'Apache2::RequestRec'
-                     ]
-                   ],
-  'headers_in' => [
-                    [
-                      'Apache2::RequestRec',
-                      'Apache2::RequestRec'
-                    ]
-                  ],
-  'headers_out' => [
-                     [
-                       'Apache2::RequestRec',
-                       'Apache2::RequestRec'
-                     ]
-                   ],
-  'hostinfo' => [
-                  [
-                    'APR::URI',
-                    'APR::URI'
-                  ]
-                ],
-  'hostname' => [
-                  [
-                    'APR::URI',
-                    'APR::URI'
-                  ],
-                  [
-                    'Apache2::RequestRec',
-                    'Apache2::RequestRec'
-                  ]
-                ],
-  'ht_time' => [
-                 [
-                   'Apache2::Util',
-                   'Apache2::Util'
-                 ]
-               ],
-  'id' => [
-            [
-              'Apache2::Connection',
-              'Apache2::Connection'
-            ]
-          ],
-  'info' => [
-              [
-                'Apache2::CmdParms',
-                'Apache2::CmdParms'
-              ],
-              [
-                'Apache2::Log',
-                undef
-              ]
-            ],
-  'inode' => [
-               [
-                 'APR::Finfo',
-                 'APR::Finfo'
-               ]
-             ],
-  'input_filters' => [
-                       [
-                         'Apache2::Connection',
-                         'Apache2::Connection'
-                       ],
-                       [
-                         'Apache2::RequestRec',
-                         'Apache2::RequestRec'
-                       ]
-                     ],
-  'insert_after' => [
-                      [
-                        'APR::Bucket',
-                        'APR::Bucket'
-                      ]
-                    ],
-  'insert_before' => [
-                       [
-                         'APR::Bucket',
-                         'APR::Bucket'
-                       ]
-                     ],
-  'insert_head' => [
-                     [
-                       'APR::Brigade',
-                       'APR::Brigade'
-                     ]
-                   ],
-  'insert_tail' => [
-                     [
-                       'APR::Brigade',
-                       'APR::Brigade'
-                     ]
-                   ],
-  'internal_fast_redirect' => [
-                                [
-                                  'Apache2::SubRequest',
-                                  'Apache2::RequestRec'
-                                ]
-                              ],
-  'internal_redirect' => [
-                           [
-                             'Apache2::SubRequest',
-                             'Apache2::RequestRec'
-                           ]
-                         ],
-  'internal_redirect_handler' => [
-                                   [
-                                     'Apache2::SubRequest',
-                                     'Apache2::RequestRec'
-                                   ]
-                                 ],
-  'invoke_handler' => [
-                        [
-                          'Apache2::HookRun',
-                          'Apache2::RequestRec'
-                        ]
-                      ],
-  'ip_get' => [
-                [
-                  'APR::SockAddr',
-                  'APR::SockAddr'
-                ]
-              ],
-  'is_EACCES' => [
-                   [
-                     'APR::Status',
-                     'APR::Status'
-                   ]
-                 ],
-  'is_EAGAIN' => [
-                   [
-                     'APR::Status',
-                     'APR::Status'
-                   ]
-                 ],
-  'is_ECONNABORTED' => [
-                         [
-                           'APR::Status',
-                           'APR::Status'
-                         ]
-                       ],
-  'is_ECONNRESET' => [
-                       [
-                         'APR::Status',
-                         'APR::Status'
-                       ]
-                     ],
-  'is_ENOENT' => [
-                   [
-                     'APR::Status',
-                     'APR::Status'
-                   ]
-                 ],
-  'is_EOF' => [
-                [
-                  'APR::Status',
-                  'APR::Status'
-                ]
-              ],
-  'is_TIMEUP' => [
-                   [
-                     'APR::Status',
-                     'APR::Status'
-                   ]
-                 ],
-  'is_ancestor' => [
-                     [
-                       'APR::Pool',
-                       'APR::Pool'
-                     ]
-                   ],
-  'is_empty' => [
-                  [
-                    'APR::Brigade',
-                    'APR::Brigade'
-                  ]
-                ],
-  'is_eos' => [
-                [
-                  'APR::Bucket',
-                  'APR::Bucket'
-                ]
-              ],
-  'is_flush' => [
-                  [
-                    'APR::Bucket',
-                    'APR::Bucket'
-                  ]
-                ],
-  'is_initial_req' => [
-                        [
-                          'Apache2::RequestUtil',
-                          'Apache2::RequestRec'
-                        ]
-                      ],
-  'is_perl_option_enabled' => [
-                                [
-                                  'Apache2::ServerUtil',
-                                  'Apache2::ServerRec'
-                                ],
-                                [
-                                  'Apache2::RequestUtil',
-                                  'Apache2::RequestRec'
-                                ]
-                              ],
-  'is_virtual' => [
-                    [
-                      'Apache2::ServerRec',
-                      'Apache2::ServerRec'
-                    ]
-                  ],
-  'keep_alive' => [
-                    [
-                      'Apache2::ServerRec',
-                      'Apache2::ServerRec'
-                    ]
-                  ],
-  'keep_alive_max' => [
-                        [
-                          'Apache2::ServerRec',
-                          'Apache2::ServerRec'
-                        ]
-                      ],
-  'keep_alive_timeout' => [
-                            [
-                              'Apache2::ServerRec',
-                              'Apache2::ServerRec'
-                            ]
-                          ],
-  'keepalive' => [
-                   [
-                     'Apache2::Connection',
-                     'Apache2::Connection'
-                   ]
-                 ],
-  'keepalives' => [
-                    [
-                      'Apache2::Connection',
-                      'Apache2::Connection'
-                    ]
-                  ],
-  'last' => [
-              [
-                'APR::Brigade',
-                'APR::Brigade'
-              ]
-            ],
-  'length' => [
-                [
-                  'APR::Bucket',
-                  'APR::Bucket'
-                ],
-                [
-                  'APR::Brigade',
-                  'APR::Brigade'
-                ]
-              ],
-  'limit_req_fields' => [
-                          [
-                            'Apache2::ServerRec',
-                            'Apache2::ServerRec'
-                          ]
-                        ],
-  'limit_req_fieldsize' => [
-                             [
-                               'Apache2::ServerRec',
-                               'Apache2::ServerRec'
-                             ]
-                           ],
-  'limit_req_line' => [
-                        [
-                          'Apache2::ServerRec',
-                          'Apache2::ServerRec'
-                        ]
-                      ],
-  'line_num' => [
-                  [
-                    'Apache2::Directive',
-                    'Apache2::Directive'
-                  ]
-                ],
-  'listen' => [
-                [
-                  'APR::Socket',
-                  'APR::Socket'
-                ]
-              ],
-  'loaded' => [
-                [
-                  'Apache2::Module',
-                  'Apache2::Module'
-                ]
-              ],
-  'local_addr' => [
-                    [
-                      'Apache2::Connection',
-                      'Apache2::Connection'
-                    ]
-                  ],
-  'local_host' => [
-                    [
-                      'Apache2::Connection',
-                      'Apache2::Connection'
-                    ]
-                  ],
-  'local_ip' => [
-                  [
-                    'Apache2::Connection',
-                    'Apache2::Connection'
-                  ]
-                ],
-  'location' => [
-                  [
-                    'Apache2::RequestUtil',
-                    'Apache2::RequestRec'
-                  ]
-                ],
-  'location_merge' => [
-                        [
-                          'Apache2::RequestUtil',
-                          'Apache2::RequestRec'
-                        ]
-                      ],
-  'lock' => [
-              [
-                'APR::ThreadMutex',
-                'APR::ThreadMutex'
-              ]
-            ],
-  'log' => [
-             [
-               'Apache2::Log',
-               'Apache2::ServerRec'
-             ],
-             [
-               'Apache2::Log',
-               'Apache2::RequestRec'
-             ]
-           ],
-  'log_error' => [
-                   [
-                     'Apache2::Log',
-                     undef
-                   ],
-                   [
-                     'Apache2::Log',
-                     undef
-                   ]
-                 ],
-  'log_pid' => [
-                 [
-                   'Apache2::Log',
-                   'Apache2::Log'
-                 ]
-               ],
-  'log_reason' => [
-                    [
-                      'Apache2::Log',
-                      'Apache2::RequestRec'
-                    ]
-                  ],
-  'log_rerror' => [
-                    [
-                      'Apache2::Log',
-                      undef
-                    ]
-                  ],
-  'log_serror' => [
-                    [
-                      'Apache2::Log',
-                      undef
-                    ]
-                  ],
-  'loglevel' => [
-                  [
-                    'Apache2::ServerRec',
-                    'Apache2::ServerRec'
-                  ]
-                ],
-  'lookup' => [
-                [
-                  'Apache2::Directive',
-                  undef
-                ]
-              ],
-  'lookup_defaults' => [
-                         [
-                           'Apache2::ServerRec',
-                           'Apache2::ServerRec'
-                         ]
-                       ],
-  'lookup_dirent' => [
-                       [
-                         'Apache2::SubRequest',
-                         'Apache2::RequestRec'
-                       ]
-                     ],
-  'lookup_file' => [
-                     [
-                       'Apache2::SubRequest',
-                       'Apache2::RequestRec'
-                     ]
-                   ],
-  'lookup_method_uri' => [
-                           [
-                             'Apache2::SubRequest',
-                             'Apache2::RequestRec'
-                           ]
-                         ],
-  'lookup_uri' => [
-                    [
-                      'Apache2::SubRequest',
-                      'Apache2::RequestRec'
-                    ]
-                  ],
-  'main' => [
-              [
-                'Apache2::RequestRec',
-                'Apache2::RequestRec'
-              ]
-            ],
-  'make' => [
-              [
-                'APR::Table',
-                'APR::Table'
-              ]
-            ],
-  'make_etag' => [
-                   [
-                     'Apache2::Response',
-                     'Apache2::RequestRec'
-                   ]
-                 ],
-  'meets_conditions' => [
-                          [
-                            'Apache2::Response',
-                            'Apache2::RequestRec'
-                          ]
-                        ],
-  'merge' => [
-               [
-                 'APR::Table',
-                 'APR::Table'
-               ]
-             ],
-  'method' => [
-                [
-                  'Apache2::RequestRec',
-                  'Apache2::RequestRec'
-                ]
-              ],
-  'method_is_limited' => [
-                           [
-                             'Apache2::CmdParms',
-                             'Apache2::CmdParms'
-                           ]
-                         ],
-  'method_number' => [
-                       [
-                         'Apache2::RequestRec',
-                         'Apache2::RequestRec'
-                       ]
-                     ],
-  'method_register' => [
-                         [
-                           'Apache2::ServerUtil',
-                           'Apache2::ServerRec'
-                         ]
-                       ],
-  'module_config' => [
-                       [
-                         'Apache2::ServerRec',
-                         'Apache2::ServerRec'
-                       ]
-                     ],
-  'module_index' => [
-                      [
-                        'Apache2::Module',
-                        'Apache2::Module'
-                      ]
-                    ],
-  'mtime' => [
-               [
-                 'APR::Finfo',
-                 'APR::Finfo'
-               ],
-               [
-                 'Apache2::RequestRec',
-                 'Apache2::RequestRec'
-               ]
-             ],
-  'name' => [
-              [
-                'Apache2::Command',
-                'Apache2::Command'
-              ],
-              [
-                'APR::Finfo',
-                'APR::Finfo'
-              ],
-              [
-                'Apache2::FilterRec',
-                'Apache2::FilterRec'
-              ],
-              [
-                'APR::BucketType',
-                'APR::BucketType'
-              ],
-              [
-                'Apache2::Module',
-                'Apache2::Module'
-              ]
-            ],
-  'names' => [
-               [
-                 'Apache2::ServerRec',
-                 'Apache2::ServerRec'
-               ]
-             ],
-  'new' => [
-             [
-               'APR::Bucket',
-               'APR::Bucket'
-             ],
-             [
-               'Apache2::RequestUtil',
-               'Apache2::RequestRec'
-             ],
-             [
-               'APR::UUID',
-               'APR::UUID'
-             ],
-             [
-               'APR::Brigade',
-               'APR::Brigade'
-             ],
-             [
-               'APR::ThreadMutex',
-               'APR::ThreadMutex'
-             ],
-             [
-               'APR::BucketAlloc',
-               'APR::BucketAlloc'
-             ],
-             [
-               'APR::IpSubnet',
-               'APR::IpSubnet'
-             ],
-             [
-               'APR::ThreadRWLock',
-               'APR::ThreadRWLock'
-             ],
-             [
-               'APR::Pool',
-               'APR::Pool'
-             ]
-           ],
-  'next' => [
-              [
-                'Apache2::Command',
-                'Apache2::Command'
-              ],
-              [
-                'Apache2::Directive',
-                'Apache2::Directive'
-              ],
-              [
-                'Apache2::Filter',
-                'Apache2::Filter'
-              ],
-              [
-                'Apache2::ServerRec',
-                'Apache2::ServerRec'
-              ],
-              [
-                'APR::Brigade',
-                'APR::Brigade'
-              ],
-              [
-                'Apache2::RequestRec',
-                'Apache2::RequestRec'
-              ],
-              [
-                'Apache2::Module',
-                'Apache2::Module'
-              ]
-            ],
-  'nlink' => [
-               [
-                 'APR::Finfo',
-                 'APR::Finfo'
-               ]
-             ],
-  'no_cache' => [
-                  [
-                    'Apache2::RequestUtil',
-                    'Apache2::RequestRec'
-                  ]
-                ],
-  'no_local_copy' => [
-                       [
-                         'Apache2::RequestRec',
-                         'Apache2::RequestRec'
-                       ]
-                     ],
-  'note_auth_failure' => [
-                           [
-                             'Apache2::Access',
-                             'Apache2::RequestRec'
-                           ]
-                         ],
-  'note_basic_auth_failure' => [
-                                 [
-                                   'Apache2::Access',
-                                   'Apache2::RequestRec'
-                                 ]
-                               ],
-  'note_digest_auth_failure' => [
-                                  [
-                                    'Apache2::Access',
-                                    'Apache2::RequestRec'
-                                  ]
-                                ],
-  'notes' => [
-               [
-                 'Apache2::Connection',
-                 'Apache2::Connection'
-               ],
-               [
-                 'Apache2::RequestRec',
-                 'Apache2::RequestRec'
-               ]
-             ],
-  'notice' => [
-                [
-                  'Apache2::Log',
-                  undef
-                ]
-              ],
-  'opt_get' => [
-                 [
-                   'APR::Socket',
-                   'APR::Socket'
-                 ]
-               ],
-  'opt_set' => [
-                 [
-                   'APR::Socket',
-                   'APR::Socket'
-                 ]
-               ],
-  'output_filters' => [
-                        [
-                          'Apache2::Connection',
-                          'Apache2::Connection'
-                        ],
-                        [
-                          'Apache2::RequestRec',
-                          'Apache2::RequestRec'
-                        ]
-                      ],
-  'overlap' => [
-                 [
-                   'APR::Table',
-                   'APR::Table'
-                 ]
-               ],
-  'overlay' => [
-                 [
-                   'APR::Table',
-                   'APR::Table'
-                 ]
-               ],
-  'override' => [
-                  [
-                    'Apache2::CmdParms',
-                    'Apache2::CmdParms'
-                  ]
-                ],
-  'override_opts' => [
-                       [
-                         'Apache2::CmdParms',
-                         'Apache2::CmdParms'
-                       ]
-                     ],
-  'parent' => [
-                [
-                  'Apache2::Directive',
-                  'Apache2::Directive'
-                ]
-              ],
-  'parent_get' => [
-                    [
-                      'APR::Pool',
-                      'APR::Pool'
-                    ]
-                  ],
-  'parse' => [
-               [
-                 'APR::UUID',
-                 'APR::UUID'
-               ],
-               [
-                 'APR::URI',
-                 'APR::URI'
-               ]
-             ],
-  'parse_http' => [
-                    [
-                      'APR::Date',
-                      'APR::Date'
-                    ]
-                  ],
-  'parse_rfc' => [
-                   [
-                     'APR::Date',
-                     'APR::Date'
-                   ]
-                 ],
-  'parse_uri' => [
-                   [
-                     'Apache2::URI',
-                     'Apache2::RequestRec'
-                   ]
-                 ],
-  'parsed_uri' => [
-                    [
-                      'Apache2::URI',
-                      'Apache2::RequestRec'
-                    ]
-                  ],
-  'pass_brigade' => [
-                      [
-                        'Apache2::Filter',
-                        'Apache2::Filter'
-                      ]
-                    ],
-  'password' => [
-                  [
-                    'APR::URI',
-                    'APR::URI'
-                  ]
-                ],
-  'password_get' => [
-                      [
-                        'APR::Util',
-                        'APR::Util'
-                      ]
-                    ],
-  'password_validate' => [
-                           [
-                             'APR::Util',
-                             'APR::Util'
-                           ]
-                         ],
-  'path' => [
-              [
-                'Apache2::CmdParms',
-                'Apache2::CmdParms'
-              ],
-              [
-                'Apache2::ServerRec',
-                'Apache2::ServerRec'
-              ],
-              [
-                'APR::URI',
-                'APR::URI'
-              ]
-            ],
-  'path_info' => [
-                   [
-                     'Apache2::RequestRec',
-                     'Apache2::RequestRec'
-                   ]
-                 ],
-  'pconf' => [
-               [
-                 'Apache2::Process',
-                 'Apache2::Process'
-               ]
-             ],
-  'per_dir_config' => [
-                        [
-                          'Apache2::RequestRec',
-                          'Apache2::RequestRec'
-                        ]
-                      ],
-  'pnotes' => [
-                [
-                  'Apache2::ConnectionUtil',
-                  'Apache2::Connection'
-                ],
-                [
-                  'Apache2::RequestUtil',
-                  'Apache2::RequestRec'
-                ]
-              ],
-  'poll' => [
-              [
-                'APR::Socket',
-                'APR::Socket'
-              ]
-            ],
-  'pool' => [
-              [
-                'Apache2::Process',
-                'Apache2::Process'
-              ],
-              [
-                'Apache2::CmdParms',
-                'Apache2::CmdParms'
-              ],
-              [
-                'Apache2::Connection',
-                'Apache2::Connection'
-              ],
-              [
-                'APR::Brigade',
-                'APR::Brigade'
-              ],
-              [
-                'Apache2::RequestRec',
-                'Apache2::RequestRec'
-              ]
-            ],
-  'pool_get' => [
-                  [
-                    'APR::ThreadMutex',
-                    'APR::ThreadMutex'
-                  ],
-                  [
-                    'APR::ThreadRWLock',
-                    'APR::ThreadRWLock'
-                  ]
-                ],
-  'port' => [
-              [
-                'APR::SockAddr',
-                'APR::SockAddr'
-              ],
-              [
-                'Apache2::ServerRec',
-                'Apache2::ServerRec'
-              ],
-              [
-                'APR::URI',
-                'APR::URI'
-              ]
-            ],
-  'port_of_scheme' => [
-                        [
-                          'APR::URI',
-                          'APR::URI'
-                        ]
-                      ],
-  'prev' => [
-              [
-                'APR::Brigade',
-                'APR::Brigade'
-              ],
-              [
-                'Apache2::RequestRec',
-                'Apache2::RequestRec'
-              ]
-            ],
-  'print' => [
-               [
-                 'Apache2::Filter',
-                 'Apache2::Filter'
-               ],
-               [
-                 'Apache2::RequestIO',
-                 'Apache2::RequestRec'
-               ]
-             ],
-  'printf' => [
-                [
-                  'Apache2::RequestIO',
-                  'Apache2::RequestRec'
-                ]
-              ],
-  'process' => [
-                 [
-                   'Apache2::ServerRec',
-                   'Apache2::ServerRec'
-                 ]
-               ],
-  'protection' => [
-                    [
-                      'APR::Finfo',
-                      'APR::Finfo'
-                    ]
-                  ],
-  'proto_input_filters' => [
-                             [
-                               'Apache2::RequestRec',
-                               'Apache2::RequestRec'
-                             ]
-                           ],
-  'proto_num' => [
-                   [
-                     'Apache2::RequestRec',
-                     'Apache2::RequestRec'
-                   ]
-                 ],
-  'proto_output_filters' => [
-                              [
-                                'Apache2::RequestRec',
-                                'Apache2::RequestRec'
-                              ]
-                            ],
-  'protocol' => [
-                  [
-                    'Apache2::RequestRec',
-                    'Apache2::RequestRec'
-                  ]
-                ],
-  'proxyreq' => [
-                  [
-                    'Apache2::RequestRec',
-                    'Apache2::RequestRec'
-                  ]
-                ],
-  'psignature' => [
-                    [
-                      'Apache2::RequestUtil',
-                      'Apache2::RequestRec'
-                    ]
-                  ],
-  'push_handlers' => [
-                       [
-                         'Apache2::ServerUtil',
-                         'Apache2::ServerRec'
-                       ],
-                       [
-                         'Apache2::RequestUtil',
-                         'Apache2::RequestRec'
-                       ]
-                     ],
-  'puts' => [
-              [
-                'Apache2::RequestIO',
-                'Apache2::RequestRec'
-              ]
-            ],
-  'query' => [
-               [
-                 'Apache2::MPM',
-                 'Apache2::MPM'
-               ],
-               [
-                 'APR::URI',
-                 'APR::URI'
-               ]
-             ],
-  'r' => [
-           [
-             'Apache2::Filter',
-             'Apache2::Filter'
-           ]
-         ],
-  'rationalize_mtime' => [
-                           [
-                             'Apache2::Response',
-                             'Apache2::RequestRec'
-                           ]
-                         ],
-  'rdlock' => [
-                [
-                  'APR::ThreadRWLock',
-                  'APR::ThreadRWLock'
-                ]
-              ],
-  'read' => [
-              [
-                'APR::Bucket',
-                'APR::Bucket'
-              ],
-              [
-                'Apache2::Filter',
-                'Apache2::Filter'
-              ],
-              [
-                'Apache2::RequestIO',
-                'Apache2::RequestRec'
-              ]
-            ],
-  'recv' => [
-              [
-                'APR::Socket',
-                'APR::Socket'
-              ]
-            ],
-  'recvfrom' => [
-                  [
-                    'APR::Socket',
-                    'APR::Socket'
-                  ]
-                ],
-  'remote_addr' => [
-                     [
-                       'Apache2::Connection',
-                       'Apache2::Connection'
-                     ]
-                   ],
-  'remote_host' => [
-                     [
-                       'Apache2::Connection',
-                       'Apache2::Connection'
-                     ]
-                   ],
-  'remote_ip' => [
-                   [
-                     'Apache2::Connection',
-                     'Apache2::Connection'
-                   ]
-                 ],
-  'remove' => [
-                [
-                  'APR::Bucket',
-                  'APR::Bucket'
-                ],
-                [
-                  'Apache2::Filter',
-                  'Apache2::Filter'
-                ]
-              ],
-  'remove_loaded_module' => [
-                              [
-                                'Apache2::Module',
-                                'Apache2::Module'
-                              ]
-                            ],
-  'req_override' => [
-                      [
-                        'Apache2::Command',
-                        'Apache2::Command'
-                      ]
-                    ],
-  'request' => [
-                 [
-                   'Apache2::RequestUtil',
-                   'Apache2::RequestUtil'
-                 ]
-               ],
-  'request_config' => [
-                        [
-                          'Apache2::RequestRec',
-                          'Apache2::RequestRec'
-                        ]
-                      ],
-  'request_time' => [
-                      [
-                        'Apache2::RequestRec',
-                        'Apache2::RequestRec'
-                      ]
-                    ],
-  'requires' => [
-                  [
-                    'Apache2::Access',
-                    'Apache2::RequestRec'
-                  ]
-                ],
-  'restart_count' => [
-                       [
-                         'Apache2::ServerUtil',
-                         'Apache2::ServerUtil'
-                       ]
-                     ],
-  'rflush' => [
-                [
-                  'Apache2::RequestIO',
-                  'Apache2::RequestRec'
-                ]
-              ],
-  'rpath' => [
-               [
-                 'APR::URI',
-                 'APR::URI'
-               ]
-             ],
-  'run' => [
-             [
-               'Apache2::SubRequest',
-               'Apache2::SubRequest'
-             ]
-           ],
-  'run_access_checker' => [
-                            [
-                              'Apache2::HookRun',
-                              'Apache2::RequestRec'
-                            ]
-                          ],
-  'run_auth_checker' => [
-                          [
-                            'Apache2::HookRun',
-                            'Apache2::RequestRec'
-                          ]
-                        ],
-  'run_check_user_id' => [
-                           [
-                             'Apache2::HookRun',
-                             'Apache2::RequestRec'
-                           ]
-                         ],
-  'run_fixups' => [
-                    [
-                      'Apache2::HookRun',
-                      'Apache2::RequestRec'
-                    ]
-                  ],
-  'run_handler' => [
-                     [
-                       'Apache2::HookRun',
-                       'Apache2::RequestRec'
-                     ]
-                   ],
-  'run_header_parser' => [
-                           [
-                             'Apache2::HookRun',
-                             'Apache2::RequestRec'
-                           ]
-                         ],
-  'run_log_transaction' => [
-                             [
-                               'Apache2::HookRun',
-                               'Apache2::RequestRec'
-                             ]
-                           ],
-  'run_map_to_storage' => [
-                            [
-                              'Apache2::HookRun',
-                              'Apache2::RequestRec'
-                            ]
-                          ],
-  'run_post_read_request' => [
-                               [
-                                 'Apache2::HookRun',
-                                 'Apache2::RequestRec'
-                               ]
-                             ],
-  'run_translate_name' => [
-                            [
-                              'Apache2::HookRun',
-                              'Apache2::RequestRec'
-                            ]
-                          ],
-  'run_type_checker' => [
-                          [
-                            'Apache2::HookRun',
-                            'Apache2::RequestRec'
-                          ]
-                        ],
-  'satisfies' => [
-                   [
-                     'Apache2::Access',
-                     'Apache2::RequestRec'
-                   ]
-                 ],
-  'sbh' => [
-             [
-               'Apache2::Connection',
-               'Apache2::Connection'
-             ]
-           ],
-  'scheme' => [
-                [
-                  'APR::URI',
-                  'APR::URI'
-                ]
-              ],
-  'seen_eos' => [
-                  [
-                    'Apache2::Filter',
-                    'Apache2::Filter'
-                  ]
-                ],
-  'send' => [
-              [
-                'APR::Socket',
-                'APR::Socket'
-              ]
-            ],
-  'send_cgi_header' => [
-                         [
-                           'Apache2::Response',
-                           'Apache2::RequestRec'
-                         ]
-                       ],
-  'send_error_response' => [
-                             [
-                               'Apache2::Response',
-                               'Apache2::RequestRec'
-                             ]
-                           ],
-  'send_mmap' => [
-                   [
-                     'Apache2::Response',
-                     'Apache2::RequestRec'
-                   ]
-                 ],
-  'sendfile' => [
-                  [
-                    'Apache2::RequestIO',
-                    'Apache2::RequestRec'
-                  ]
-                ],
-  'sendto' => [
-                [
-                  'APR::Socket',
-                  'APR::Socket'
-                ]
-              ],
-  'server' => [
-                [
-                  'Apache2::CmdParms',
-                  'Apache2::CmdParms'
-                ],
-                [
-                  'Apache2::ServerUtil',
-                  'Apache2::ServerUtil'
-                ],
-                [
-                  'Apache2::RequestRec',
-                  'Apache2::RequestRec'
-                ]
-              ],
-  'server_admin' => [
-                      [
-                        'Apache2::ServerRec',
-                        'Apache2::ServerRec'
-                      ]
-                    ],
-  'server_hostname' => [
-                         [
-                           'Apache2::ServerRec',
-                           'Apache2::ServerRec'
-                         ]
-                       ],
-  'server_root_relative' => [
-                              [
-                                'Apache2::ServerUtil',
-                                'Apache2::ServerUtil'
-                              ]
-                            ],
-  'server_shutdown_cleanup_register' => [
-                                          [
-                                            'Apache2::ServerUtil',
-                                            'Apache2::ServerUtil'
-                                          ]
-                                        ],
-  'set' => [
-             [
-               'APR::Table',
-               'APR::Table'
-             ]
-           ],
-  'set_basic_credentials' => [
-                               [
-                                 'Apache2::RequestUtil',
-                                 'Apache2::RequestRec'
-                               ]
-                             ],
-  'set_content_length' => [
-                            [
-                              'Apache2::Response',
-                              'Apache2::RequestRec'
-                            ]
-                          ],
-  'set_etag' => [
-                  [
-                    'Apache2::Response',
-                    'Apache2::RequestRec'
-                  ]
-                ],
-  'set_handlers' => [
-                      [
-                        'Apache2::ServerUtil',
-                        'Apache2::ServerRec'
-                      ],
-                      [
-                        'Apache2::RequestUtil',
-                        'Apache2::RequestRec'
-                      ]
-                    ],
-  'set_keepalive' => [
-                       [
-                         'Apache2::Response',
-                         'Apache2::RequestRec'
-                       ]
-                     ],
-  'set_last_modified' => [
-                           [
-                             'Apache2::Response',
-                             'Apache2::RequestRec'
-                           ]
-                         ],
-  'setaside' => [
-                  [
-                    'APR::Bucket',
-                    'APR::Bucket'
-                  ]
-                ],
-  'setup_client_block' => [
-                            [
-                              'Apache2::RequestIO',
-                              'Apache2::RequestRec'
-                            ]
-                          ],
-  'short_name' => [
-                    [
-                      'Apache2::Process',
-                      'Apache2::Process'
-                    ]
-                  ],
-  'should_client_block' => [
-                             [
-                               'Apache2::RequestIO',
-                               'Apache2::RequestRec'
-                             ]
-                           ],
-  'size' => [
-              [
-                'APR::Finfo',
-                'APR::Finfo'
-              ]
-            ],
-  'slurp_filename' => [
-                        [
-                          'Apache2::RequestUtil',
-                          'Apache2::RequestRec'
-                        ]
-                      ],
-  'some_auth_required' => [
-                            [
-                              'Apache2::Access',
-                              'Apache2::RequestRec'
-                            ]
-                          ],
-  'spawn_proc_prog' => [
-                         [
-                           'Apache2::SubProcess',
-                           undef
-                         ]
-                       ],
-  'special_list_call' => [
-                           [
-                             'ModPerl::Global',
-                             'ModPerl::Global'
-                           ]
-                         ],
-  'special_list_clear' => [
-                            [
-                              'ModPerl::Global',
-                              'ModPerl::Global'
-                            ]
-                          ],
-  'special_list_register' => [
-                               [
-                                 'ModPerl::Global',
-                                 'ModPerl::Global'
-                               ]
-                             ],
-  'split' => [
-               [
-                 'APR::Brigade',
-                 'APR::Brigade'
-               ]
-             ],
-  'start' => [
-               [
-                 'APR::Bucket',
-                 'APR::Bucket'
-               ]
-             ],
-  'stat' => [
-              [
-                'APR::Finfo',
-                'APR::Finfo'
-              ]
-            ],
-  'status' => [
-                [
-                  'Apache2::RequestRec',
-                  'Apache2::RequestRec'
-                ]
-              ],
-  'status_line' => [
-                     [
-                       'Apache2::RequestRec',
-                       'Apache2::RequestRec'
-                     ]
-                   ],
-  'strerror' => [
-                  [
-                    'APR::Error',
-                    'APR::Error'
-                  ]
-                ],
-  'subprocess_env' => [
-                        [
-                          'Apache2::RequestRec',
-                          'Apache2::RequestRec'
-                        ]
-                      ],
-  'tag' => [
-             [
-               'APR::Pool',
-               'APR::Pool'
-             ]
-           ],
-  'temp_pool' => [
-                   [
-                     'Apache2::CmdParms',
-                     'Apache2::CmdParms'
-                   ]
-                 ],
-  'test' => [
-              [
-                'APR::IpSubnet',
-                'APR::IpSubnet'
-              ]
-            ],
-  'the_request' => [
-                     [
-                       'Apache2::RequestRec',
-                       'Apache2::RequestRec'
-                     ]
-                   ],
-  'timeout' => [
-                 [
-                   'Apache2::ServerRec',
-                   'Apache2::ServerRec'
-                 ]
-               ],
-  'timeout_get' => [
-                     [
-                       'APR::Socket',
-                       'APR::Socket'
-                     ]
-                   ],
-  'timeout_set' => [
-                     [
-                       'APR::Socket',
-                       'APR::Socket'
-                     ]
-                   ],
-  'top_module' => [
-                    [
-                      'Apache2::Module',
-                      'Apache2::Module'
-                    ]
-                  ],
-  'trylock' => [
-                 [
-                   'APR::ThreadMutex',
-                   'APR::ThreadMutex'
-                 ]
-               ],
-  'tryrdlock' => [
-                   [
-                     'APR::ThreadRWLock',
-                     'APR::ThreadRWLock'
-                   ]
-                 ],
-  'trywrlock' => [
-                   [
-                     'APR::ThreadRWLock',
-                     'APR::ThreadRWLock'
-                   ]
-                 ],
-  'type' => [
-              [
-                'APR::Bucket',
-                'APR::Bucket'
-              ]
-            ],
-  'unescape_url' => [
-                      [
-                        'Apache2::URI',
-                        'Apache2::URI'
-                      ]
-                    ],
-  'unload_package_xs' => [
-                           [
-                             'ModPerl::Util',
-                             'ModPerl::Util'
-                           ]
-                         ],
-  'unlock' => [
-                [
-                  'APR::ThreadMutex',
-                  'APR::ThreadMutex'
-                ],
-                [
-                  'APR::ThreadRWLock',
-                  'APR::ThreadRWLock'
-                ]
-              ],
-  'unparse' => [
-                 [
-                   'APR::URI',
-                   'APR::URI'
-                 ]
-               ],
-  'unparsed_uri' => [
-                      [
-                        'Apache2::RequestRec',
-                        'Apache2::RequestRec'
-                      ]
-                    ],
-  'unset' => [
-               [
-                 'APR::Table',
-                 'APR::Table'
-               ]
-             ],
-  'untaint' => [
-                 [
-                   'ModPerl::Util',
-                   'ModPerl::Util'
-                 ]
-               ],
-  'update_mtime' => [
-                      [
-                        'Apache2::Response',
-                        'Apache2::RequestRec'
-                      ]
-                    ],
-  'uri' => [
-             [
-               'Apache2::RequestRec',
-               'Apache2::RequestRec'
-             ]
-           ],
-  'used_path_info' => [
-                        [
-                          'Apache2::RequestRec',
-                          'Apache2::RequestRec'
-                        ]
-                      ],
-  'user' => [
-              [
-                'APR::Finfo',
-                'APR::Finfo'
-              ],
-              [
-                'APR::URI',
-                'APR::URI'
-              ],
-              [
-                'Apache2::RequestRec',
-                'Apache2::RequestRec'
-              ]
-            ],
-  'user_id' => [
-                 [
-                   'Apache2::ServerUtil',
-                   'Apache2::ServerUtil'
-                 ]
-               ],
-  'valid' => [
-               [
-                 'APR::Finfo',
-                 'APR::Finfo'
-               ]
-             ],
-  'warn' => [
-              [
-                'Apache2::Log',
-                undef
-              ],
-              [
-                'Apache2::Log',
-                undef
-              ],
-              [
-                'Apache2::Log',
-                undef
-              ]
-            ],
-  'wild_names' => [
-                    [
-                      'Apache2::ServerRec',
-                      'Apache2::ServerRec'
-                    ]
-                  ],
-  'write' => [
-               [
-                 'Apache2::RequestIO',
-                 'Apache2::RequestRec'
-               ]
-             ],
-  'wrlock' => [
-                [
-                  'APR::ThreadRWLock',
-                  'APR::ThreadRWLock'
-                ]
-              ]
-};
-
-
-use base qw(Exporter);
-use mod_perl2;
-
-our @EXPORT = qw(print_method print_module print_object);
-our $VERSION = $mod_perl2::VERSION;
-use constant MODULE => 0;
-use constant OBJECT  => 1;
-
-my $modules;
-my $objects;
-
-sub _get_modules {
-    for my $method (sort keys %$methods) {
-        for my $item ( @{ $methods->{$method} }) {
-            push @{ $modules->{$item->[MODULE]} }, [$method, $item->[OBJECT]];
-        }
-    }
-}
-
-sub _get_objects {
-    for my $method (sort keys %$methods) {
-        for my $item ( @{ $methods->{$method} }) {
-            next unless defined $item->[OBJECT];
-            push @{ $objects->{$item->[OBJECT]} }, [$method, $item->[MODULE]];
-        }
-    }
-}
-
-# if there is only one replacement method in 2.0 API we can
-# automatically lookup it, up however if there are more than one
-# (e.g. new()), we need to use a fully qualified value here
-# of course the same if the package is not a mod_perl one.
-#
-# the first field represents the replacement method or undef if none
-# exists, the second field is for extra comments (e.g. when there is
-# no replacement method)
-my $methods_compat = {
-    # Apache2::
-    gensym            => ['Symbol::gensym',
-                          'or use "open my $fh, $file"'],
-    module            => ['Apache2::Module::loaded',
-                          ''],
-    define            => ['exists_config_define',
-                          ''],
-    httpd_conf        => ['add_config',
-                          ''],
-    SERVER_VERSION    => ['get_server_version',
-                          ''],
-    can_stack_handlers=> [undef,
-                          'there is no more need for that method in mp2'],
-
-    # Apache2::RequestRec
-    soft_timeout      => [undef,
-                          'there is no more need for that method in mp2'],
-    hard_timeout      => [undef,
-                          'there is no more need for that method in mp2'],
-    kill_timeout      => [undef,
-                          'there is no more need for that method in mp2'],
-    reset_timeout     => [undef,
-                          'there is no more need for that method in mp2'],
-    cleanup_for_exec  => [undef,
-                          'there is no more need for that method in mp2'],
-    send_http_header  => ['content_type',
-                          ''],
-    header_in         => ['headers_in',
-                          'this method works in mod_perl 1.0 too'],
-    header_out        => ['headers_out',
-                          'this method works in mod_perl 1.0 too'],
-    err_header_out    => ['err_headers_out',
-                          'this method works in mod_perl 1.0 too'],
-    register_cleanup  => ['cleanup_register',
-                          ''],
-    post_connection   => ['cleanup_register',
-                          ''],
-    content           => [undef, # XXX: Apache2::Request::what?
-                          'use CGI.pm or Apache2::Request instead'],
-    clear_rgy_endav   => ['special_list_clear',
-                          ''],
-    stash_rgy_endav   => [undef,
-                          ''],
-    run_rgy_endav     => ['special_list_call',
-                          'this method is no longer needed'],
-    seqno             => [undef,
-                          'internal to mod_perl 1.0'],
-    chdir_file        => [undef, # XXX: to be resolved
-                          'temporary unavailable till the issue with chdir' .
-                          ' in the threaded env is resolved'],
-    log_reason        => ['log_error',
-                          'not in the Apache 2.0 API'],
-    READLINE          => [undef, # XXX: to be resolved
-                          ''],
-    send_fd_length    => [undef,
-                          'not in the Apache 2.0 API'],
-    send_fd           => ['sendfile',
-                          'requires an offset argument'],
-    is_main           => ['main',
-                          'not in the Apache 2.0 API'],
-    cgi_var           => ['subprocess_env',
-                          'subprocess_env can be used with mod_perl 1.0'],
-    cgi_env           => ['subprocess_env',
-                          'subprocess_env can be used with mod_perl 1.0'],
-    each_byterange    => [undef,
-                          'now handled internally by ap_byterange_filter'],
-    set_byterange     => [undef,
-                          'now handled internally by ap_byterange_filter'],
-
-    # Apache::File
-    open              => [undef,
-                          ''],
-    close             => [undef, # XXX: also defined in APR::Socket
-                          ''],
-    tmpfile           => [undef,
-                          'not in the Apache 2.0 API, ' .
-                          'use File::Temp instead'],
-
-    # Apache::Util
-    size_string       => ['format_size',
-                          ''],
-    escape_uri        => ['unescape_path',
-                          ''],
-    escape_url        => ['escape_path',
-                          'and requires a pool object'],
-    unescape_uri      => ['unescape_url',
-                          ''],
-    unescape_url_info => [undef,
-                          'use CGI::Util::unescape() instead'],
-    escape_html       => [undef, # XXX: will be ap_escape_html
-                          'ap_escape_html now requires a pool object'],
-    parsedate         => ['parse_http',
-                          ''],
-    validate_password => ['password_validate',
-                          ''],
-
-    # Apache::Table
-    #new               => ['make',
-    #                      ''], # XXX: there are other 'new' methods
-
-    # Apache::Connection
-    auth_type         => ['ap_auth_type',
-                          'now resides in the request object'],
-};
-
-sub avail_methods_compat {
-    return keys %$methods_compat;
-}
-
-sub avail_methods {
-    return keys %$methods;
-}
-
-sub avail_modules {
-    my %modules = ();
-    for my $method (keys %$methods) {
-        for my $item ( @{ $methods->{$method} }) {
-            $modules{$item->[MODULE]}++;
-        }
-    }
-    return keys %modules;
-}
-
-sub preload_all_modules {
-    _get_modules() unless $modules;
-    eval "require $_" for keys %$modules;
-}
-
-sub _print_func {
-    my $func = shift;
-    my @args = @_ ? @_ : @ARGV;
-    no strict 'refs';
-    print( ($func->($_))[0]) for @args;
-}
-
-sub print_module { _print_func('lookup_module', @_) }
-sub print_object { _print_func('lookup_object', @_) }
-
-sub print_method {
-    my @args = @_ ? @_ : @ARGV;
-    while (@args) {
-         my $method = shift @args;
-         my $object = (@args &&
-             (ref($args[0]) || $args[0] =~ /^(Apache2|ModPerl|APR)/))
-             ? shift @args
-             : undef;
-         print( (lookup_method($method, $object))[0]);
-    }
-}
-
-sub sep { return '-' x (shift() + 20) . "\n" }
-
-# what modules contain the passed method.
-# an optional object or a reference to it can be passed to help
-# resolve situations where there is more than one module containing
-# the same method. Inheritance is supported.
-sub lookup_method {
-    my ($method, $object) = @_;
-
-    unless (defined $method) {
-        my $hint = "No 'method' argument was passed\n";
-        return ($hint);
-    }
-
-    # strip the package name for the fully qualified method
-    $method =~ s/.+:://;
-
-    if (exists $methods_compat->{$method}) {
-        my ($replacement, $comment) = @{$methods_compat->{$method}};
-        my $hint = "'$method' is not a part of the mod_perl 2.0 API\n";
-        $comment = length $comment ? " $comment\n" : "";
-
-        # some removed methods have no replacement
-        return $hint . "$comment" unless defined $replacement;
-
-        $hint .= "use '$replacement' instead. $comment";
-
-        # if fully qualified don't look up its container
-        return $hint if $replacement =~ /::/;
-
-        my ($modules_hint, @modules) = lookup_method($replacement, $object);
-        return $hint . $modules_hint;
-    }
-    elsif (!exists $methods->{$method}) {
-        my $hint = "Don't know anything about method '$method'\n";
-        return ($hint);
-    }
-
-    my @items = @{ $methods->{$method} };
-    if (@items == 1) {
-        my $module = $items[0]->[MODULE];
-        my $hint = "To use method '$method' add:\n" . "\tuse $module ();\n";
-        # we should really check that the method matches the object if
-        # any was passed, but it may not always work
-        return ($hint, $module);
-    }
-    else {
-        if (defined $object) {
-            my $class = ref $object || $object;
-            for my $item (@items) {
-                # real class or inheritance
-                if ($class eq $item->[OBJECT] or
-                    (ref($object) && $object->isa($item->[OBJECT]))) {
-                    my $module = $item->[MODULE];
-                    my $hint = "To use method '$method' add:\n" .
-                        "\tuse $module ();\n";
-                    return ($hint, $module);
-                }
-            }
-            # fall-through
-            local $" = ", ";
-            my @modules = map $_->[MODULE], @items;
-            my $hint = "Several modules (@modules) contain method '$method' " .
-                "but none of them matches class '$class';\n";
-            return ($hint);
-
-        }
-        else {
-            my %modules = map { $_->[MODULE] => 1 } @items;
-            # remove dups if any (e.g. $s->add_input_filter and
-            # $r->add_input_filter are loaded by the same Apache2::Filter)
-            my @modules = keys %modules;
-            my $hint;
-            if (@modules == 1) {
-                $hint = "To use method '$method' add:\n\tuse $modules[0] ();\n";
-                return ($hint, $modules[0]);
-            }
-            else {
-                $hint = "There is more than one class with method '$method'\n" .
-                    "try one of:\n" . join '', map {"\tuse $_ ();\n"} @modules;
-                return ($hint, @modules);
-            }
-        }
-    }
-}
-
-# what methods are contained in the passed module name
-sub lookup_module {
-    my ($module) = shift;
-
-    unless (defined $module) {
-        my $hint = "no 'module' argument was passed\n";
-        return ($hint);
-    }
-
-    _get_modules() unless $modules;
-
-    unless (exists $modules->{$module}) {
-        my $hint = "don't know anything about module '$module'\n";
-        return ($hint);
-    }
-
-    my @methods;
-    my $max_len = 6;
-    for ( @{ $modules->{$module} } ) {
-        $max_len = length $_->[0] if length $_->[0] > $max_len;
-        push @methods, $_->[0];
-    }
-
-    my $format = "%-${max_len}s %s\n";
-    my $banner = sprintf($format, "Method", "Invoked on object type");
-    my $hint = join '',
-        ("\nModule '$module' contains the following XS methods:\n\n",
-         $banner,  sep(length($banner)),
-         map( { sprintf $format, $_->[0], $_->[1]||'???'}
-             @{ $modules->{$module} }),
-         sep(length($banner)));
-
-    return ($hint, @methods);
-}
-
-# what methods can be invoked on the passed object (or its reference)
-sub lookup_object {
-    my ($object) = shift;
-
-    unless (defined $object) {
-        my $hint = "no 'object' argument was passed\n";
-        return ($hint);
-    }
-
-    _get_objects() unless $objects;
-
-    # a real object was passed?
-    $object = ref $object || $object;
-
-    unless (exists $objects->{$object}) {
-        my $hint = "don't know anything about objects of type '$object'\n";
-        return ($hint);
-    }
-
-    my @methods;
-    my $max_len = 6;
-    for ( @{ $objects->{$object} } ) {
-        $max_len = length $_->[0] if length $_->[0] > $max_len;
-        push @methods, $_->[0];
-    }
-
-    my $format = "%-${max_len}s %s\n";
-    my $banner = sprintf($format, "Method", "Module");
-    my $hint = join '',
-        ("\nObjects of type '$object' can invoke the following XS methods:\n\n",
-         $banner, sep(length($banner)),
-         map({ sprintf $format, $_->[0], $_->[1]} @{ $objects->{$object} }),
-         sep(length($banner)));
-
-    return ($hint, @methods);
-
-}
-
-1;
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/Makefile.PL mod_perl-2.0.8/Makefile.PL
--- mod_perl-2.0.8/Makefile.PL	2013-03-26 09:04:00.000000000 +0400
+++ mod_perl-2.0.8/Makefile.PL	2014-05-08 19:05:39.213577623 +0400
@@ -8,6 +8,7 @@
 
 use constant MIN_HTTPD_VERSION_DYNAMIC => '2.0.47';
 use constant MIN_HTTPD_VERSION_STATIC  => '2.0.51';
+use constant MIN_HTTPD_24_VERSION => '2.4.0';
 
 my($old_modperl_version, $old_modperl_pm, $old_Apache2_pm);
 
@@ -412,9 +413,13 @@
 sub tables_dir {
     my $httpd_version = shift;
 
-    my $tables_version = 'current';
-    #XXX: support versioning
-    #$httpd_version =~ /-dev$/ ? 'current' : $httpd_version;
+    my $tables_version='';
+    if ($httpd_version lt MIN_HTTPD_24_VERSION) {
+        $tables_version='current';
+    }
+    else {
+        $tables_version='current24';
+    }
 
     my $tables_dir = "xs/tables/$tables_version";
 }
@@ -484,8 +489,8 @@
 
     open my $fh, 'Changes';
     while (<$fh>) {
-        if (/^=item.*-(dev|rc\d+)/) {
-            $VERSION .= "-$1";
+        if (/^=item\s+\Q$VERSION\E-(\w+)/) {
+            $VERSION .= "$1";
             last;
         }
         last if /^=item/;
@@ -504,19 +509,44 @@
     $perl_version =~ s/5.00(\d)(?:00(\d))?/"5.$1." . ($2||0)/e;
     my $perl_threads = Apache2::Build::PERL_HAS_ITHREADS ? "w/" : "w/o";
     my $perl_string = "Using Perl $perl_version $perl_threads ithreads";
-    my $mpm = $build->mpm_name();
+    my $httpd_version = $build->httpd_version;
+    my $mpm = "";
+    my $build_threaded = 0;
+
+    # For httpd-2.4, we can't use mpm_is_threaded(), because MPMs are loadable
+    # modules. We therefore treat httpd as a whole project as threaded. It is
+    # still possible to disable threading by using MP_NO_THREADS=1
+    if ($httpd_version lt MIN_HTTPD_24_VERSION) {
+        $build_threaded = $build->mpm_is_threaded();
+        $mpm = $build->mpm_name();
+    }
+    else {
+        if ($build->{MP_NO_THREADS}) {
+            $build_threaded = 0;
+        }
+        else {
+            $build_threaded = 1;
+        }
+    }
 
     # certain mpms require perl 5.8.0+ w/ithreads
-    if ($build->mpm_is_threaded()) {
+    if ($build_threaded) {
         my @fail;
         push @fail, "Perl 5.8 or higher"
             unless $] >= 5.008;
         push @fail, "Perl built with ithreads (build perl with -Duseithreads)"
             unless Apache2::Build::PERL_HAS_ITHREADS();
         if (@fail) {
-            error "$perl_string and '$mpm' mpm httpd.",
-                "Failed requirements:",
-                join "", map {"  - $_\n"} @fail;
+            if ($httpd_version lt MIN_HTTPD_24_VERSION) {
+                error "$perl_string and '$mpm' mpm httpd.",
+                    "Failed requirements:",
+                    join "", map {"  - $_\n"} @fail;
+            }
+            else {
+                error "$perl_string and httpd-2.4.",
+                    "Failed requirements:",
+                    join "", map {"  - $_\n"} @fail;
+            }
             exit 1;
         }
     }
@@ -526,8 +556,14 @@
         if ($build->should_build_apache && !Apache2::Build::PERL_HAS_ITHREADS) {
             # before 5.8.2, perl_shutdown is incomplete
             if ($] < 5.008_002) {
-                error "static $mpm mpm requires a threaded ".
-                      "perl 5.6.1-5.8.1 or any perl 5.8.2+";
+                if ($httpd_version lt MIN_HTTPD_24_VERSION) {
+                    error "static $mpm mpm requires a threaded ".
+                        "perl 5.6.1-5.8.1 or any perl 5.8.2+";
+                }
+                else {
+                    error "httpd-2.4 requires a threaded ".
+                        "perl 5.6.1-5.8.1 or any perl 5.8.2+";
+                }
                 exit 1;
             }
         }
@@ -548,7 +584,7 @@
     if ($Config{usemultiplicity} xor $Config{useithreads}) {
         error "mod_perl does not currently support multiplicity without ".
 	      "ithreads.";
-        if ($build->mpm_is_threaded()) {
+        if ($build_threaded) {
 	    error "Please recompile Perl with -Duseithreads and ".
 	          "-Dusemultiplicity";
         } else {
@@ -770,8 +806,24 @@
             $ap_bindir = File::Spec->catdir($build->{MP_AP_PREFIX}, 'bin')
                 if $build->{MP_AP_PREFIX};
         }
+        my $modperl_libexecdir = '';
+        if ($build->is_dynamic) {
+            # need to add the location of mod_perl.so to the PATH
+            my $lib = $build->modperl_libpath() || '';
+            if ($lib) {
+                $modperl_libexecdir = File::Basename::dirname($lib);
+            }
+            else {
+                $modperl_libexecdir = File::Spec->catdir($build->{cwd},
+                                                         'src/modules/perl')
+                    if $build->{cwd};
+            }
+        }
+        my $extra_path = '';
+        $extra_path .= ";$ap_bindir" if $ap_bindir;
+        $extra_path .= ";$modperl_libexecdir" if $modperl_libexecdir;
         $preamble = <<EOF;
-PATH = \$(PATH);$ap_bindir
+PATH = \$(PATH)$extra_path
 EOF
     }
     else {
@@ -821,7 +873,14 @@
 
     my $string = $self->ModPerl::BuildMM::MY::postamble;
 
-    $string .= <<'EOF';
+    if (WIN32) {
+        $string .= <<'EOF';
+mydist : Apache-Test/META.yml manifest tardist
+
+EOF
+    }
+    else {
+        $string .= <<'EOF';
 mydist : Apache-Test/META.yml mod_perl.spec manifest tardist
 
 rpm: dist
@@ -835,6 +894,10 @@
 mod_perl.spec: build/make_rpm_spec
 	$(PERL) build/make_rpm_spec
 
+EOF
+    }
+
+    $string .= <<'EOF';
 Apache-Test/META.yml:
 	cd Apache-Test && make metafile
 
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/mod_perl.c mod_perl-2.0.8/src/modules/perl/mod_perl.c
--- mod_perl-2.0.8/src/modules/perl/mod_perl.c	2012-07-20 03:57:38.000000000 +0400
+++ mod_perl-2.0.8/src/modules/perl/mod_perl.c	2014-05-08 19:05:39.368043437 +0400
@@ -216,8 +216,10 @@
         server_rec *base_server = modperl_global_get_server_rec();
         const char *desc = modperl_server_desc(s, p);
         if (base_server == s) {
+            MP_init_status = 1; /* temporarily reset MP_init_status */
             MP_TRACE_i(MP_FUNC,
                        "starting the parent perl for the base server", desc);
+            MP_init_status = 2;
         }
         else {
             MP_TRACE_i(MP_FUNC,
@@ -392,6 +394,7 @@
     }
 
     PERL_SET_CONTEXT(perl);
+    modperl_thx_interp_set(perl, base_scfg->mip->parent);
 
 #endif /* USE_ITHREADS */
 
@@ -440,12 +443,12 @@
 {
     server_rec *s;
     PerlInterpreter *base_perl;
-#ifdef MP_TRACE
+#if defined(MP_TRACE) || defined(USE_ITHREADS)
     modperl_config_srv_t *base_scfg = modperl_config_srv_get(base_server);
+#endif
 
     MP_TRACE_d_do(MpSrv_dump_flags(base_scfg,
                                    base_server->server_hostname));
-#endif /* MP_TRACE */
 
 #ifndef USE_ITHREADS
     if (modperl_threaded_mpm()) {
@@ -467,6 +470,7 @@
     /* after other parent perls were started in vhosts, make sure that
      * the context is set to the base_perl */
     PERL_SET_CONTEXT(base_perl);
+    modperl_thx_interp_set(base_perl, base_scfg->mip->parent);
 #endif
 
 }
@@ -612,8 +616,6 @@
         return OK;
     }
 
-    MP_TRACE_i(MP_FUNC, "mod_perl hook init");
-
     MP_init_status = 1; /* now starting */
 
     modperl_restart_count_inc(s);
@@ -653,6 +655,10 @@
 int modperl_hook_pre_config(apr_pool_t *p, apr_pool_t *plog,
                             apr_pool_t *ptemp)
 {
+#if AP_MODULE_MAGIC_AT_LEAST(20110329,0)
+    ap_reserve_module_slots_directive("PerlLoadModule");
+#endif
+
     /* we can't have PerlPreConfigHandler without first configuring mod_perl */
 
     /* perl 5.8.1+ */
@@ -737,7 +743,22 @@
 {
     MP_dRCFG;
 
+#ifdef USE_ITHREADS
+    /* XXX: this is necessary to make modperl_interp_pool_select() work
+     * which is used at runtime only to merge dir-configs by
+     * modperl_module_config_merge().
+     *
+     * Since most requests won't need it it would be good to add some logic
+     * (cheaper logic in terms of CPU cycles) to identify those cases and
+     * avoid the hash operation.
+     */
+    MP_TRACE_i(MP_FUNC, "setting userdata MODPERL_R in pool %#lx to %lx",
+               (unsigned long)r->pool, (unsigned long)r);
+    (void)apr_pool_userdata_set((void *)r, "MODPERL_R", NULL, r->pool);
+#endif
+
     modperl_config_req_init(r, rcfg);
+    modperl_config_req_cleanup_register(r, rcfg);
 
     /* set the default for cgi header parsing On as early as possible
      * so $r->content_type in any phase after header_parser could turn
@@ -751,6 +772,12 @@
 
 static int modperl_hook_post_read_request(request_rec *r)
 {
+#ifdef USE_ITHREADS
+    MP_TRACE_i(MP_FUNC, "%s %s:%d%s",
+               r->method, r->connection->local_addr->hostname,
+               r->connection->local_addr->port, r->unparsed_uri);
+#endif
+
     /* if 'PerlOptions +GlobalRequest' is outside a container */
     modperl_global_request_cfg_set(r);
 
@@ -907,6 +934,11 @@
     MP_CMD_DIR_ITERATE("PerlRequire", requires, "PerlRequire"),
     MP_CMD_SRV_ITERATE("PerlConfigRequire", config_requires, "PerlConfigRequire"),
     MP_CMD_SRV_ITERATE("PerlPostConfigRequire", post_config_requires, "PerlPostConfigRequire"),
+#if AP_SERVER_MAJORVERSION_NUMBER>2 || \
+    (AP_SERVER_MAJORVERSION_NUMBER == 2 && AP_SERVER_MINORVERSION_NUMBER>=3)
+    MP_CMD_SRV_TAKE2("PerlAddAuthzProvider", authz_provider, "PerlAddAuthzProvider"),
+    MP_CMD_SRV_TAKE2("PerlAddAuthnProvider", authn_provider, "PerlAddAuthnProvider"),
+#endif
     MP_CMD_DIR_ITERATE("PerlOptions", options, "Perl Options"),
     MP_CMD_DIR_ITERATE("PerlInitHandler", init_handlers, "Subroutine name"),
     MP_CMD_DIR_TAKE2("PerlSetVar", set_var, "PerlSetVar"),
@@ -1009,27 +1041,14 @@
 int modperl_response_handler(request_rec *r)
 {
     MP_dDCFG;
-#ifdef USE_ITHREADS
-    MP_dRCFG;
-#endif
     apr_status_t retval, rc;
-
-#ifdef USE_ITHREADS
-    pTHX;
-    modperl_interp_t *interp;
-#endif
+    MP_dINTERP;
 
     if (!strEQ(r->handler, "modperl")) {
         return DECLINED;
     }
 
-#ifdef USE_ITHREADS
-    interp = modperl_interp_select(r, r->connection, r->server);
-    aTHX = interp->perl;
-    if (MpInterpPUTBACK(interp)) {
-        rcfg->interp = interp;
-    }
-#endif
+    MP_INTERPa(r, r->connection, r->server);
 
     /* default is -SetupEnv, add if PerlOption +SetupEnv */
     if (MpDirSETUP_ENV(dcfg)) {
@@ -1042,13 +1061,7 @@
         retval = rc;
     }
 
-#ifdef USE_ITHREADS
-    if (MpInterpPUTBACK(interp)) {
-        /* PerlInterpScope handler */
-        rcfg->interp = NULL;
-        modperl_interp_unselect(interp);
-    }
-#endif
+    MP_INTERP_PUTBACK(interp, aTHX);
 
     return retval;
 }
@@ -1059,22 +1072,13 @@
     GV *h_stdin, *h_stdout;
     apr_status_t retval, rc;
     MP_dRCFG;
-#ifdef USE_ITHREADS
-    pTHX;
-    modperl_interp_t *interp;
-#endif
+    MP_dINTERP;
 
     if (!strEQ(r->handler, "perl-script")) {
         return DECLINED;
     }
 
-#ifdef USE_ITHREADS
-    interp = modperl_interp_select(r, r->connection, r->server);
-    aTHX = interp->perl;
-    if (MpInterpPUTBACK(interp)) {
-        rcfg->interp = interp;
-    }
-#endif
+    MP_INTERPa(r, r->connection, r->server);
 
     modperl_perl_global_request_save(aTHX_ r);
 
@@ -1106,13 +1110,7 @@
     modperl_io_restore_stdout(aTHX_ h_stdout);
     FREETMPS;LEAVE;
 
-#ifdef USE_ITHREADS
-    if (MpInterpPUTBACK(interp)) {
-        /* PerlInterpScope handler */
-        modperl_interp_unselect(interp);
-        rcfg->interp = NULL;
-    }
-#endif
+    MP_INTERP_PUTBACK(interp, aTHX);
 
     /* flush output buffer after interpreter is putback */
     rc = modperl_response_finish(r);
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_apache_compat.c mod_perl-2.0.8/src/modules/perl/modperl_apache_compat.c
--- mod_perl-2.0.8/src/modules/perl/modperl_apache_compat.c	2011-02-08 05:00:10.000000000 +0300
+++ mod_perl-2.0.8/src/modules/perl/modperl_apache_compat.c	2014-05-08 19:05:39.427019491 +0400
@@ -14,6 +14,7 @@
  * limitations under the License.
  */
 
+#define AP_DECLARE_EXPORT
 #include "mod_perl.h"
 
 /* back compat adjustements for older Apache versions
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_apache_compat.h mod_perl-2.0.8/src/modules/perl/modperl_apache_compat.h
--- mod_perl-2.0.8/src/modules/perl/modperl_apache_compat.h	2012-12-09 10:48:59.000000000 +0400
+++ mod_perl-2.0.8/src/modules/perl/modperl_apache_compat.h	2014-05-08 19:05:39.436291159 +0400
@@ -66,9 +66,9 @@
 #define MP_HTTPD_OVERRIDE_HTACCESS (OR_LIMIT|OR_OPTIONS|OR_FILEINFO|OR_AUTHCFG|OR_INDEXES)
 
 #define MP_HTTPD_OVERRIDE_OPTS_UNSET (-1)
-
 #if AP_SERVER_MAJORVERSION_NUMBER>2 || \
     (AP_SERVER_MAJORVERSION_NUMBER == 2 && AP_SERVER_MINORVERSION_NUMBER>=3)
+
 /* 2.4 API */
 #define MP_HTTPD_OVERRIDE_OPTS_DEFAULT (OPT_UNSET | \
                                         OPT_ALL | \
@@ -95,10 +95,17 @@
 
 #define ap_unixd_config unixd_config
 
-#endif
+#endif /* 2.4 vs. 2.2 API */
 
 #ifndef PROXYREQ_RESPONSE
 #define PROXYREQ_RESPONSE (3)
 #endif
 
 #endif /* MODPERL_APACHE_COMPAT_H */
+
+/*
+ * Local Variables:
+ * c-basic-offset: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_apache_includes.h mod_perl-2.0.8/src/modules/perl/modperl_apache_includes.h
--- mod_perl-2.0.8/src/modules/perl/modperl_apache_includes.h	2012-12-09 10:48:59.000000000 +0400
+++ mod_perl-2.0.8/src/modules/perl/modperl_apache_includes.h	2014-05-08 19:05:39.365148565 +0400
@@ -43,4 +43,17 @@
 APLOG_USE_MODULE(perl);
 #endif
 
+#if AP_SERVER_MAJORVERSION_NUMBER>2 || \
+    (AP_SERVER_MAJORVERSION_NUMBER == 2 && AP_SERVER_MINORVERSION_NUMBER>=3)
+#include "ap_provider.h"
+#include "mod_auth.h"
+#endif
+
 #endif /* MODPERL_APACHE_INCLUDES_H */
+
+/*
+ * Local Variables:
+ * c-basic-offset: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_callback.c mod_perl-2.0.8/src/modules/perl/modperl_callback.c
--- mod_perl-2.0.8/src/modules/perl/modperl_callback.c	2012-07-20 03:57:38.000000000 +0400
+++ mod_perl-2.0.8/src/modules/perl/modperl_callback.c	2014-05-08 19:05:39.379822749 +0400
@@ -88,8 +88,7 @@
                 name = handler->name;
             }
 
-            MP_TRACE_h(MP_FUNC, "[%s %s] lookup of %s failed",
-                       modperl_pid_tid(p),
+            MP_TRACE_h(MP_FUNC, "[%s] lookup of %s failed",
                        modperl_server_desc(s, p), name);
             ap_log_error(APLOG_MARK, APLOG_ERR, 0, s,
                          "lookup of '%s' failed", name);
@@ -148,10 +147,7 @@
                                   apr_pool_t *ptemp,
                                   modperl_hook_run_mode_e run_mode)
 {
-#ifdef USE_ITHREADS
-    pTHX;
-    modperl_interp_t *interp = NULL;
-#endif
+    MP_dINTERP;
     MP_dSCFG(s);
     MP_dDCFG;
     MP_dRCFG;
@@ -184,28 +180,7 @@
         return DECLINED;
     }
 
-#ifdef USE_ITHREADS
-    if (r && !c && modperl_interp_scope_connection(scfg)) {
-        c = r->connection;
-    }
-    if (r || c) {
-        interp = modperl_interp_select(r, c, s);
-        aTHX = interp->perl;
-    }
-    else {
-        /* Child{Init,Exit}, OpenLogs */
-        aTHX = scfg->mip->parent->perl;
-        PERL_SET_CONTEXT(aTHX);
-    }
-#endif
-
-    /* XXX: would like to do this in modperl_hook_create_request()
-     * but modperl_interp_select() is what figures out if
-     * PerlInterpScope eq handler, in which case we do not register
-     * a cleanup.  modperl_hook_create_request() is also currently always
-     * run even if modperl isn't handling any part of the request
-     */
-    modperl_config_req_cleanup_register(r, rcfg);
+    MP_INTERPa(r, c, s);
 
     switch (type) {
       case MP_HANDLER_TYPE_PER_SRV:
@@ -254,8 +229,7 @@
 
     modperl_callback_current_callback_set(desc);
 
-    MP_TRACE_h(MP_FUNC, "[%s] running %d %s handlers",
-               modperl_pid_tid(p), av->nelts, desc);
+    MP_TRACE_h(MP_FUNC, "running %d %s handlers", av->nelts, desc);
     handlers = (modperl_handler_t **)av->elts;
 
     for (i=0; i<av->nelts; i++) {
@@ -357,8 +331,7 @@
 
     SvREFCNT_dec((SV*)av_args);
 
-    /* PerlInterpScope handler */
-    MP_INTERP_PUTBACK(interp);
+    MP_INTERP_PUTBACK(interp, aTHX);
 
     return status;
 }
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_cmd.c mod_perl-2.0.8/src/modules/perl/modperl_cmd.c
--- mod_perl-2.0.8/src/modules/perl/modperl_cmd.c	2012-07-20 03:57:38.000000000 +0400
+++ mod_perl-2.0.8/src/modules/perl/modperl_cmd.c	2014-05-08 19:05:39.414276983 +0400
@@ -69,17 +69,15 @@
      */
     if (*name == '-') {
         MP_TRACE_h(MP_FUNC,
-                   "[%s] warning: filter handler %s will be not autoloaded. "
+                   "warning: filter handler %s will be not autoloaded. "
                    "Unless the module defining this handler is explicitly "
-                   "preloaded, filter attributes will be ignored.\n",
-                   modperl_pid_tid(p), h->name);
+                   "preloaded, filter attributes will be ignored.");
     }
     else {
         MpHandlerAUTOLOAD_On(h);
         MP_TRACE_h(MP_FUNC,
-                   "[%s] filter handler %s will be autoloaded (to make "
-                   "the filter attributes available)\n",
-                   modperl_pid_tid(p), h->name);
+                   "filter handler %s will be autoloaded (to make "
+                   "the filter attributes available)", h->name);
     }
 
     if (!*handlers) {
@@ -417,6 +415,35 @@
     return modperl_cmd_post_read_request_handlers(parms, mconfig, arg);
 }
 
+#if AP_SERVER_MAJORVERSION_NUMBER>2 || \
+    (AP_SERVER_MAJORVERSION_NUMBER == 2 && AP_SERVER_MINORVERSION_NUMBER>=3)
+
+MP_CMD_SRV_DECLARE2(authz_provider)
+{
+    apr_pool_t *p = parms->pool;
+    char *name = apr_pstrdup(p, arg1);
+    char *cb = apr_pstrdup(p, arg2);
+
+    modperl_register_auth_provider_name(p, AUTHZ_PROVIDER_GROUP, name,
+                                        AUTHZ_PROVIDER_VERSION, cb, NULL,
+                                        AP_AUTH_INTERNAL_PER_CONF);
+    return NULL;
+}
+
+MP_CMD_SRV_DECLARE2(authn_provider)
+{
+    apr_pool_t *p = parms->pool;
+    char *name = apr_pstrdup(p, arg1);
+    char *cb = apr_pstrdup(p, arg2);
+
+    modperl_register_auth_provider_name(p, AUTHN_PROVIDER_GROUP, name,
+                                        AUTHN_PROVIDER_VERSION, cb, NULL,
+                                        AP_AUTH_INTERNAL_PER_CONF);
+    return NULL;
+}
+
+#endif
+
 static const char *modperl_cmd_parse_args(apr_pool_t *p,
                                           const char *args,
                                           apr_table_t **t)
@@ -558,6 +585,11 @@
                           arg, NULL);
     }
 
+#ifdef USE_ITHREADS
+    MP_TRACE_i(MP_FUNC, "using interp %lx to execute perl section:\n%s",
+               scfg->mip->parent, arg);
+#endif
+
     {
         SV *server = MP_PERLSECTIONS_SERVER_SV;
         SV *code = newSVpv(arg, 0);
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_cmd.h mod_perl-2.0.8/src/modules/perl/modperl_cmd.h
--- mod_perl-2.0.8/src/modules/perl/modperl_cmd.h	2011-02-08 05:00:10.000000000 +0300
+++ mod_perl-2.0.8/src/modules/perl/modperl_cmd.h	2014-05-08 19:05:39.419802017 +0400
@@ -42,6 +42,11 @@
 MP_CMD_SRV_DECLARE(requires);
 MP_CMD_SRV_DECLARE(config_requires);
 MP_CMD_SRV_DECLARE(post_config_requires);
+#if AP_SERVER_MAJORVERSION_NUMBER>2 || \
+    (AP_SERVER_MAJORVERSION_NUMBER == 2 && AP_SERVER_MINORVERSION_NUMBER>=3)
+MP_CMD_SRV_DECLARE2(authz_provider);
+MP_CMD_SRV_DECLARE2(authn_provider);
+#endif
 MP_CMD_SRV_DECLARE2(set_var);
 MP_CMD_SRV_DECLARE2(add_var);
 MP_CMD_SRV_DECLARE2(set_env);
@@ -115,6 +120,10 @@
    AP_INIT_ITERATE( name, modperl_cmd_##item, NULL, \
       RSRC_CONF, desc )
 
+#define MP_CMD_SRV_ITERATE_ON_READ(name, item, desc) \
+   AP_INIT_ITERATE( name, modperl_cmd_##item, NULL, \
+      RSRC_CONF|EXEC_ON_READ, desc )
+
 #define MP_CMD_SRV_ITERATE2(name, item, desc) \
    AP_INIT_ITERATE2( name, modperl_cmd_##item, NULL, \
       RSRC_CONF, desc )
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_common_log.c mod_perl-2.0.8/src/modules/perl/modperl_common_log.c
--- mod_perl-2.0.8/src/modules/perl/modperl_common_log.c	2011-02-08 05:00:10.000000000 +0300
+++ mod_perl-2.0.8/src/modules/perl/modperl_common_log.c	2014-05-08 19:05:39.354048315 +0400
@@ -16,6 +16,7 @@
 
 #include "modperl_common_includes.h"
 #include "modperl_common_log.h"
+#include "modperl_debug.h"
 
 #undef getenv /* from XSUB.h */
 
@@ -48,7 +49,36 @@
         return;
     }
 
-    if (func) {
+    /* for more information on formatting codes see
+       http://apr.apache.org/docs/apr/1.4/group__apr__lib.html#gad2cd3594aeaafd45931d1034965f48c1
+     */
+
+    /* PERL_GET_CONTEXT yields nonsense until the first interpreter is
+     * created. Hence the modperl_is_running() question. */
+    if (modperl_threaded_mpm()) {
+        if (modperl_threads_started()) {
+            apr_os_thread_t tid = apr_os_thread_current();
+            apr_file_printf(logfile, "[pid=%lu, tid=%pt, perl=%pp] ",
+                            (unsigned long)getpid(), &tid,
+                            modperl_is_running() ? PERL_GET_CONTEXT : NULL);
+        }
+        else {
+            apr_file_printf(logfile, "[pid=%lu, perl=%pp] ",
+                            (unsigned long)getpid(),
+                            modperl_is_running() ? PERL_GET_CONTEXT : NULL);
+        }
+    }
+    else {
+#ifdef USE_ITHREADS
+        apr_file_printf(logfile, "[pid=%lu, perl=%pp] ",
+                        (unsigned long)getpid(),
+                        modperl_is_running() ? PERL_GET_CONTEXT : NULL);
+#else
+        apr_file_printf(logfile, "[pid=%lu] ", (unsigned long)getpid());
+#endif
+    }
+
+    if (func && *func) {
         apr_file_printf(logfile, "%s: ", func);
     }
 
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_config.c mod_perl-2.0.8/src/modules/perl/modperl_config.c
--- mod_perl-2.0.8/src/modules/perl/modperl_config.c	2012-12-09 10:48:59.000000000 +0400
+++ mod_perl-2.0.8/src/modules/perl/modperl_config.c	2014-05-08 19:05:39.388487375 +0400
@@ -374,9 +374,14 @@
 apr_status_t modperl_config_req_cleanup(void *data)
 {
     request_rec *r = (request_rec *)data;
-    MP_dTHX;
+    apr_status_t rc;
+    MP_dINTERPa(r, NULL, NULL);
 
-    return modperl_config_request_cleanup(aTHX_ r);
+    rc = modperl_config_request_cleanup(aTHX_ r);
+
+    MP_INTERP_PUTBACK(interp, aTHX);
+
+    return rc;
 }
 
 void *modperl_get_perl_module_config(ap_conf_vector_t *cv)
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_config.h mod_perl-2.0.8/src/modules/perl/modperl_config.h
--- mod_perl-2.0.8/src/modules/perl/modperl_config.h	2011-02-08 05:00:10.000000000 +0300
+++ mod_perl-2.0.8/src/modules/perl/modperl_config.h	2014-05-08 19:05:39.395517809 +0400
@@ -36,7 +36,7 @@
 char **modperl_config_srv_argv_init(modperl_config_srv_t *scfg, int *argc);
 
 #define modperl_config_srv_argv_push(arg)               \
-    *(const char **)apr_array_push(scfg->argv) = arg
+    *(const char **)apr_array_push(scfg->argv) = (arg)
 
 apr_status_t modperl_config_request_cleanup(pTHX_ request_rec *r);
 
@@ -49,9 +49,9 @@
 #define modperl_config_req_cleanup_register(r, rcfg)           \
     if (r && !MpReqCLEANUP_REGISTERED(rcfg)) {                 \
         apr_pool_t *p;                           \
-        apr_pool_create(&p, r->pool);                   \
+        apr_pool_create(&p, (r)->pool);                 \
         apr_pool_cleanup_register(p,                   \
-                                  (void*)r,                    \
+                                  (void*)(r),                  \
                                   modperl_config_req_cleanup,  \
                                   apr_pool_cleanup_null);      \
         MpReqCLEANUP_REGISTERED_On(rcfg);                      \
@@ -62,27 +62,27 @@
 
 #if defined(MP_IN_XS) && defined(WIN32)
 #   define modperl_get_module_config(v)         \
-    modperl_get_perl_module_config(v)
+    modperl_get_perl_module_config((v))
 
 #   define modperl_set_module_config(v, c)      \
-    modperl_set_perl_module_config(v, c)
+    modperl_set_perl_module_config((v), (c))
 #else
 #   define modperl_get_module_config(v)         \
-    ap_get_module_config(v, &perl_module)
+    ap_get_module_config((v), &perl_module)
 
 #   define modperl_set_module_config(v, c)      \
-    ap_set_module_config(v, &perl_module, c)
+    ap_set_module_config((v), &perl_module, (c))
 #endif
 
 #define modperl_config_req_init(r, rcfg)                    \
-    if (!rcfg) {                                            \
-        rcfg = modperl_config_req_new(r);                   \
-        modperl_set_module_config(r->request_config, rcfg); \
+    if (!(rcfg)) {                                          \
+        (rcfg) = modperl_config_req_new(r);                 \
+        modperl_set_module_config((r)->request_config, (rcfg)); \
     }
 
 #define modperl_config_req_get(r)                               \
     (r ? (modperl_config_req_t *)                               \
-     modperl_get_module_config(r->request_config) : NULL)
+     modperl_get_module_config((r)->request_config) : NULL)
 
 #define MP_dRCFG \
     modperl_config_req_t *rcfg = modperl_config_req_get(r)
@@ -90,23 +90,23 @@
 #define modperl_config_con_init(c, ccfg)                 \
     if (!ccfg) {                                         \
         ccfg = modperl_config_con_new(c);                \
-        modperl_set_module_config(c->conn_config, ccfg); \
+        modperl_set_module_config((c)->conn_config, (ccfg)); \
     }
 
 #define modperl_config_con_get(c)                               \
     (c ? (modperl_config_con_t *)                               \
-     modperl_get_module_config(c->conn_config) : NULL)
+     modperl_get_module_config((c)->conn_config) : NULL)
 
 #define MP_dCCFG \
     modperl_config_con_t *ccfg = modperl_config_con_get(c)
 
 #define modperl_config_dir_get(r)                               \
     (r ? (modperl_config_dir_t *)                               \
-     modperl_get_module_config(r->per_dir_config) : NULL)
+     modperl_get_module_config((r)->per_dir_config) : NULL)
 
 #define modperl_config_dir_get_defaults(s)              \
     (modperl_config_dir_t *)                            \
-        modperl_get_module_config(s->lookup_defaults)
+        modperl_get_module_config((s)->lookup_defaults)
 
 #define MP_dDCFG \
     modperl_config_dir_t *dcfg = modperl_config_dir_get(r)
@@ -118,24 +118,6 @@
 #define MP_dSCFG(s)                                             \
     modperl_config_srv_t *scfg = modperl_config_srv_get(s)
 
-#ifdef USE_ITHREADS
-#   define MP_dSCFG_dTHX            \
-    dTHXa(scfg->mip->parent->perl); \
-    PERL_SET_CONTEXT(aTHX)
-#else
-#   define MP_dSCFG_dTHX dTHXa(scfg->perl)
-#endif
-
-/* hopefully this macro will not need to be used often */
-#ifdef USE_ITHREADS
-#   define MP_dTHX                                              \
-    modperl_interp_t *interp =                                  \
-        modperl_interp_select(r, r->connection, r->server);     \
-    dTHXa(interp->perl)
-#else
-#   define MP_dTHX dNOOP
-#endif
-
 int modperl_config_apply_PerlModule(server_rec *s,
                                     modperl_config_srv_t *scfg,
                                     PerlInterpreter *perl, apr_pool_t *p);
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_debug.c mod_perl-2.0.8/src/modules/perl/modperl_debug.c
--- mod_perl-2.0.8/src/modules/perl/modperl_debug.c	2011-02-08 05:00:10.000000000 +0300
+++ mod_perl-2.0.8/src/modules/perl/modperl_debug.c	2014-05-08 19:05:39.349735531 +0400
@@ -21,28 +21,6 @@
     return apr_psprintf(p, "%s:%u", s->server_hostname, s->port);
 }
 
-/* used in debug traces */
-MP_INLINE char *modperl_pid_tid(apr_pool_t *p)
-{
-    if (modperl_threaded_mpm()) {
-        return apr_psprintf(p, "%lu"
-#if APR_HAS_THREADS
-                            "/%lu"
-#endif /* APR_HAS_THREADS */
-                            , (unsigned long)getpid()
-#if APR_HAS_THREADS
-                            , modperl_threads_started()
-                            ? (unsigned long)apr_os_thread_current()
-                            : 0
-#endif /* APR_HAS_THREADS */
-            );
-    }
-    else {
-        return apr_psprintf(p, "%lu", (unsigned long)getpid());
-    }
-}
-
-    
 #ifdef MP_TRACE
 void modperl_apr_table_dump(pTHX_ apr_table_t *table, char *name)
 {
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_debug.h mod_perl-2.0.8/src/modules/perl/modperl_debug.h
--- mod_perl-2.0.8/src/modules/perl/modperl_debug.h	2011-02-08 05:00:10.000000000 +0300
+++ mod_perl-2.0.8/src/modules/perl/modperl_debug.h	2014-05-08 19:05:39.355630945 +0400
@@ -19,8 +19,19 @@
 
 #include "mod_perl.h"
 
+#ifdef MP_DEBUG
+#  define MP_ASSERT(exp) ap_assert(exp)
+#else
+#  define MP_ASSERT(exp) ((void)0)
+#endif
+
+#ifdef USE_ITHREADS
+#  define MP_ASSERT_CONTEXT(perl) MP_ASSERT((perl) == PERL_GET_CONTEXT)
+#else
+#  define MP_ASSERT_CONTEXT(perl) ((void)0)
+#endif
+
 char *modperl_server_desc(server_rec *s, apr_pool_t *p);
-MP_INLINE char *modperl_pid_tid(apr_pool_t *p);
 
 #ifdef MP_TRACE
 void modperl_apr_table_dump(pTHX_ apr_table_t *table, char *name);
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_env.c mod_perl-2.0.8/src/modules/perl/modperl_env.c
--- mod_perl-2.0.8/src/modules/perl/modperl_env.c	2012-07-20 03:57:38.000000000 +0400
+++ mod_perl-2.0.8/src/modules/perl/modperl_env.c	2014-05-08 19:05:39.408483772 +0400
@@ -232,15 +232,15 @@
         }
     }
 
-    MP_TRACE_e(MP_FUNC, "\t[%s/0x%lx/%s]"
+    MP_TRACE_e(MP_FUNC, "\t[0x%lx/%s]"
                "\n\t@ENV{keys scfg->SetEnv} = values scfg->SetEnv;",
-               modperl_pid_tid(p), modperl_interp_address(aTHX),
+               modperl_interp_address(aTHX),
                modperl_server_desc(s, p));
     modperl_env_table_populate(aTHX_ scfg->SetEnv);
 
-    MP_TRACE_e(MP_FUNC, "\t[%s/0x%lx/%s]"
+    MP_TRACE_e(MP_FUNC, "\t[0x%lx/%s]"
                "\n\t@ENV{keys scfg->PassEnv} = values scfg->PassEnv;",
-               modperl_pid_tid(p), modperl_interp_address(aTHX),
+               modperl_interp_address(aTHX),
                modperl_server_desc(s, p));
     modperl_env_table_populate(aTHX_ scfg->PassEnv);
 }
@@ -270,9 +270,9 @@
          * collisions with per-server PerlSetEnv entries are
          * resolved via the nature of a Perl hash
          */
-        MP_TRACE_e(MP_FUNC, "\t[%s/0x%lx/%s]"
+        MP_TRACE_e(MP_FUNC, "\t[0x%lx/%s]"
                    "\n\t@ENV{keys dcfg->SetEnv} = values dcfg->SetEnv;",
-                   modperl_pid_tid(r->pool), modperl_interp_address(aTHX),
+                   modperl_interp_address(aTHX),
                    modperl_server_desc(r->server, r->pool));
         modperl_env_table_populate(aTHX_ dcfg->SetEnv);
 
@@ -303,9 +303,9 @@
      */
 
     if (!apr_is_empty_table(scfg->SetEnv)) {
-        MP_TRACE_e(MP_FUNC, "\t[%s/0x%lx/%s]"
+        MP_TRACE_e(MP_FUNC, "\t[0x%lx/%s]"
                    "\n\t@ENV{keys scfg->SetEnv} = values scfg->SetEnv;",
-                   modperl_pid_tid(r->pool), modperl_interp_address(aTHX),
+                   modperl_interp_address(aTHX),
                    modperl_server_desc(r->server, r->pool));
         modperl_env_table_populate(aTHX_ scfg->SetEnv);
 
@@ -313,9 +313,9 @@
     }
 
     if (!apr_is_empty_table(scfg->PassEnv)) {
-        MP_TRACE_e(MP_FUNC, "\t[%s/0x%lx/%s]"
+        MP_TRACE_e(MP_FUNC, "\t[0x%lx/%s]"
                    "\n\t@ENV{keys scfg->PassEnv} = values scfg->PassEnv;",
-                   modperl_pid_tid(r->pool), modperl_interp_address(aTHX),
+                   modperl_interp_address(aTHX),
                    modperl_server_desc(r->server, r->pool));
         modperl_env_table_populate(aTHX_ scfg->PassEnv);
 
@@ -363,9 +363,9 @@
      * phases from populating %ENV with new subprocess_env table entries
      */
 
-    MP_TRACE_e(MP_FUNC, "\t[%s/0x%lx/%s%s]"
+    MP_TRACE_e(MP_FUNC, "\t[0x%lx/%s%s]"
                "\n\t@ENV{keys r->subprocess_env} = values r->subprocess_env;",
-               modperl_pid_tid(r->pool), modperl_interp_address(aTHX),
+               modperl_interp_address(aTHX),
                modperl_server_desc(r->server, r->pool), r->uri);
 
     /* we can eliminate some of the cost by only doing CGI variables once
@@ -397,8 +397,8 @@
     }
 
     MP_TRACE_e(MP_FUNC,
-               "\n\t[%s/0x%lx/%s%s]\n\tdelete @ENV{keys r->subprocess_env};",
-               modperl_pid_tid(r->pool), modperl_interp_address(aTHX),
+               "\n\t[0x%lx/%s%s]\n\tdelete @ENV{keys r->subprocess_env};",
+               modperl_interp_address(aTHX),
                modperl_server_desc(r->server, r->pool), r->uri);
     modperl_env_table_unpopulate(aTHX_ r->subprocess_env);
 
@@ -411,8 +411,8 @@
     EnvMgLenSet(-1);
 
 #ifdef MP_PERL_HV_GMAGICAL_AWARE
-    MP_TRACE_e(MP_FUNC, "[%s/0x%lx] tie %%ENV, $r\t (%s%s)",
-               modperl_pid_tid(r->pool), modperl_interp_address(aTHX),
+    MP_TRACE_e(MP_FUNC, "[0x%lx] tie %%ENV, $r\t (%s%s)",
+               modperl_interp_address(aTHX),
                modperl_server_desc(r->server, r->pool), r->uri);
     SvGMAGICAL_on((SV*)ENVHV);
 #endif
@@ -423,8 +423,8 @@
     EnvMgObjSet(NULL);
 
 #ifdef MP_PERL_HV_GMAGICAL_AWARE
-    MP_TRACE_e(MP_FUNC, "[%s/0x%lx] untie %%ENV; # from r\t (%s%s)",
-               modperl_pid_tid(r->pool), modperl_interp_address(aTHX),
+    MP_TRACE_e(MP_FUNC, "[0x%lx] untie %%ENV; # from r\t (%s%s)",
+               modperl_interp_address(aTHX),
                modperl_server_desc(r->server, r->pool), r->uri);
     SvGMAGICAL_off((SV*)ENVHV);
 #endif
@@ -480,8 +480,7 @@
                 apr_table_set(r->subprocess_env,
                               hv_iterkey(entry, &keylen),
                               SvPV(hv_iterval((HV*)sv, entry), n_a));
-                MP_TRACE_e(MP_FUNC, "[%s/0x%lx] localizing: %s => %s",
-                           modperl_pid_tid(r->pool),
+                MP_TRACE_e(MP_FUNC, "[0x%lx] localizing: %s => %s",
                            modperl_interp_address(aTHX),
                            hv_iterkey(entry, &keylen),
                            SvPV(hv_iterval((HV*)sv, entry), n_a));
@@ -493,17 +492,14 @@
         HE *entry;
         STRLEN n_a;
 
-        MP_TRACE_e(MP_FUNC,
-                   "\n\t[%lu/0x%lx] populating %%ENV:",
-                   (unsigned long)getpid(), modperl_interp_address(aTHX));
+        MP_TRACE_e(MP_FUNC, "\n\t[0x%lx] populating %%ENV:",
+                   modperl_interp_address(aTHX));
 
         hv_iterinit((HV*)sv);
 
         while ((entry = hv_iternext((HV*)sv))) {
                 I32 keylen;
                 MP_TRACE_e(MP_FUNC, "$ENV{%s} = \"%s\";",
-                           modperl_pid_tid(r->pool),
-                           modperl_interp_address(aTHX),
                            hv_iterkey(entry, &keylen),
                            SvPV(hv_iterval((HV*)sv, entry), n_a));
             }
@@ -520,14 +516,12 @@
 
     if (r) {
         apr_table_clear(r->subprocess_env);
-        MP_TRACE_e(MP_FUNC,
-                   "[%s/0x%lx] clearing all magic off r->subprocess_env",
-                   modperl_pid_tid(r->pool), modperl_interp_address(aTHX));
+        MP_TRACE_e(MP_FUNC, "[0x%lx] clearing all magic off r->subprocess_env",
+                   modperl_interp_address(aTHX));
     }
     else {
-        MP_TRACE_e(MP_FUNC,
-                   "[%s/0x%lx] %%ENV = ();",
-                   modperl_pid_tid(r->pool), modperl_interp_address(aTHX));
+        MP_TRACE_e(MP_FUNC, "[0x%lx] %%ENV = ();",
+                   modperl_interp_address(aTHX));
         return MP_PL_vtbl_call(env, clear);
     }
 
@@ -542,8 +536,7 @@
         MP_dENV_KEY;
         MP_dENV_VAL;
         apr_table_set(r->subprocess_env, key, val);
-        MP_TRACE_e(MP_FUNC, "[%s/0x%lx] r->subprocess_env set: %s => %s",
-                   modperl_pid_tid(r->pool),
+        MP_TRACE_e(MP_FUNC, "[0x%lx] r->subprocess_env set: %s => %s",
                    modperl_interp_address(aTHX), key, val);
     }
     else {
@@ -551,8 +544,7 @@
         MP_dENV_KEY;
         MP_dENV_VAL;
         MP_TRACE_e(MP_FUNC,
-                   "[%lu/0x%lx] $ENV{%s} = \"%s\";",
-                   (unsigned long)getpid(),
+                   "[0x%lx] $ENV{%s} = \"%s\";",
                    modperl_interp_address(aTHX), key, val);
 #endif
         return MP_PL_vtbl_call(envelem, set);
@@ -568,15 +560,13 @@
     if (r) {
         MP_dENV_KEY;
         apr_table_unset(r->subprocess_env, key);
-        MP_TRACE_e(MP_FUNC, "[%s/0x%lx] r->subprocess_env unset: %s",
-                   modperl_pid_tid(r->pool),
+        MP_TRACE_e(MP_FUNC, "[0x%lx] r->subprocess_env unset: %s",
                    modperl_interp_address(aTHX), key);
     }
     else {
 #ifdef MP_TRACE
         MP_dENV_KEY;
-        MP_TRACE_e(MP_FUNC, "[%lu/0x%lx] delete $ENV{%s};",
-                   (unsigned long)getpid(),
+        MP_TRACE_e(MP_FUNC, "[0x%lx] delete $ENV{%s};",
                    modperl_interp_address(aTHX), key);
 #endif
         return MP_PL_vtbl_call(envelem, clear);
@@ -597,15 +587,13 @@
         if ((val = apr_table_get(r->subprocess_env, key))) {
             sv_setpv(sv, val);
             MP_TRACE_e(MP_FUNC,
-                       "[%s/0x%lx] r->subprocess_env get: %s => %s",
-                       modperl_pid_tid(r->pool),
+                       "[0x%lx] r->subprocess_env get: %s => %s",
                        modperl_interp_address(aTHX), key, val);
         }
         else {
             sv_setsv(sv, &PL_sv_undef);
             MP_TRACE_e(MP_FUNC,
-                       "[%s/0x%lx] r->subprocess_env get: %s => undef",
-                       modperl_pid_tid(r->pool),
+                       "[0x%lx] r->subprocess_env get: %s => undef",
                        modperl_interp_address(aTHX), key);
         }
     }
@@ -614,8 +602,7 @@
 #ifdef MP_TRACE
         MP_dENV_KEY;
         MP_TRACE_e(MP_FUNC,
-                   "[%lu/0x%lx] there is no svt_get in PL_vtbl_envelem: %s",
-                   (unsigned long)getpid(),
+                   "[0x%lx] there is no svt_get in PL_vtbl_envelem: %s",
                    modperl_interp_address(aTHX), key);
 #endif
     }
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_filter.c mod_perl-2.0.8/src/modules/perl/modperl_filter.c
--- mod_perl-2.0.8/src/modules/perl/modperl_filter.c	2012-07-20 03:57:38.000000000 +0400
+++ mod_perl-2.0.8/src/modules/perl/modperl_filter.c	2014-05-08 19:05:39.428798182 +0400
@@ -282,13 +282,14 @@
     /* mod_perl filter ctx cleanup */
     if (ctx->data){
 #ifdef USE_ITHREADS
-        dTHXa(ctx->perl);
+        dTHXa(ctx->interp->perl);
+        MP_ASSERT_CONTEXT(aTHX);
 #endif
         if (SvOK(ctx->data) && SvREFCNT(ctx->data)) {
             SvREFCNT_dec(ctx->data);
             ctx->data = NULL;
         }
-        ctx->perl = NULL;
+        MP_INTERP_PUTBACK(ctx->interp, aTHX);
     }
 
     return APR_SUCCESS;
@@ -440,7 +441,7 @@
     apr_pool_t  *p = r ? r->pool : c->pool;
     modperl_filter_t *filter = modperl_filter_new(f, NULL, mode, 0, 0, 0);
 
-    MP_dINTERP_SELECT(r, c, s);
+    MP_dINTERPa(r, c, s);
 
     MP_TRACE_h(MP_FUNC, "running filter init handler %s",
                modperl_handler_name(handler));
@@ -464,7 +465,7 @@
     FILTER_FREE(filter);
     SvREFCNT_dec((SV*)args);
 
-    MP_INTERP_PUTBACK(interp);
+    MP_INTERP_PUTBACK(interp, aTHX);
 
     MP_TRACE_f(MP_FUNC, MP_FILTER_NAME_FORMAT
                "return: %d", modperl_handler_name(handler), status);
@@ -485,7 +486,7 @@
     server_rec  *s = r ? r->server : c->base_server;
     apr_pool_t  *p = r ? r->pool : c->pool;
 
-    MP_dINTERP_SELECT(r, c, s);
+    MP_dINTERPa(r, c, s);
 
     MP_FILTER_SAVE_ERRSV(errsv);
 
@@ -555,7 +556,7 @@
 
     MP_FILTER_RESTORE_ERRSV(errsv);
 
-    MP_INTERP_PUTBACK(interp);
+    MP_INTERP_PUTBACK(interp, aTHX);
 
     MP_TRACE_f(MP_FUNC, MP_FILTER_NAME_FORMAT
                "return: %d", modperl_handler_name(handler), status);
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_handler.c mod_perl-2.0.8/src/modules/perl/modperl_handler.c
--- mod_perl-2.0.8/src/modules/perl/modperl_handler.c	2012-07-20 03:57:38.000000000 +0400
+++ mod_perl-2.0.8/src/modules/perl/modperl_handler.c	2014-05-08 19:05:39.421269131 +0400
@@ -39,8 +39,7 @@
     /* not necessary due to apr_pcalloc */
     /* handler->cv = NULL; */
     handler->name = name;
-    MP_TRACE_h(MP_FUNC, "[%s] new handler %s",
-               modperl_pid_tid(p), handler->name);
+    MP_TRACE_h(MP_FUNC, "new handler %s", handler->name);
 
     return handler;
 }
@@ -105,8 +104,7 @@
     anon->len  = strlen(anon->name);
     PERL_HASH(anon->hash, anon->name, anon->len);
 
-    MP_TRACE_h(MP_FUNC, "[%s] new anon handler: '%s'",
-               modperl_pid_tid(p), anon->name);
+    MP_TRACE_h(MP_FUNC, "new anon handler: '%s'", anon->name);
     return anon;
 }
 
@@ -175,8 +173,7 @@
     handler->cv   = cv;
     handler->name = NULL;
 
-    MP_TRACE_h(MP_FUNC, "[%s] new cached cv anon handler",
-               modperl_pid_tid(p));
+    MP_TRACE_h(MP_FUNC, "new cached cv anon handler");
 #endif
 
     return handler;
@@ -223,9 +220,8 @@
         MpHandlerAUTOLOAD_On(handler);
 
         MP_TRACE_h(MP_FUNC,
-                   "[%s %s] handler %s hasn't yet been resolved, "
-                   "attempting to resolve using %s pool 0x%lx\n",
-                   modperl_pid_tid(p),
+                   "[%s] handler %s hasn't yet been resolved, "
+                   "attempting to resolve using %s pool 0x%lx",
                    modperl_server_desc(s, p),
                    modperl_handler_name(handler),
                    duped ? "current" : "server conf",
@@ -349,9 +345,15 @@
 #define set_desc(dtype)                                 \
     if (desc) *desc = modperl_handler_desc_##dtype(idx)
 
+/* We should be able to use PERL_GET_CONTEXT here. The rcfg condition
+ * makes sure there is a request being processed. The action > GET part
+ * means it is a $r->set_handlers or $r->push_handlers operation. This
+ * can only happen if called by perl code.
+ */
 #define check_modify(dtype)                                     \
     if ((action > MP_HANDLER_ACTION_GET) && rcfg) {             \
-        MP_dSCFG_dTHX;                                          \
+        dTHXa(PERL_GET_CONTEXT);                                \
+        MP_ASSERT(aTHX+0);                                      \
         Perl_croak(aTHX_ "too late to modify %s handlers",      \
                    modperl_handler_desc_##dtype(idx));          \
     }
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_interp.c mod_perl-2.0.8/src/modules/perl/modperl_interp.c
--- mod_perl-2.0.8/src/modules/perl/modperl_interp.c	2012-12-09 10:48:59.000000000 +0400
+++ mod_perl-2.0.8/src/modules/perl/modperl_interp.c	2014-05-08 19:05:39.385607896 +0400
@@ -38,12 +38,7 @@
 
     MpInterpCLONED_On(interp);
 
-    PERL_SET_CONTEXT(aTHX);
-
-    /* XXX: hack for bug fixed in 5.6.1 */
-    if (PL_scopestack_ix == 0) {
-        ENTER;
-    }
+    MP_ASSERT_CONTEXT(aTHX);
 
     /* clear @DynaLoader::dl_librefs so we only dlclose() those
      * which are opened by the clone
@@ -61,7 +56,7 @@
     memset(interp, '\0', sizeof(*interp));
 
     interp->mip = mip;
-    interp->refcnt = 0; /* for use by APR::Pool->cleanup_register */
+    interp->refcnt = 0;
 
     if (perl) {
 #ifdef MP_USE_GTOP
@@ -79,14 +74,7 @@
 
         interp->perl = perl_clone(perl, clone_flags);
 
-#if MP_PERL_VERSION(5, 8, 0) && \
-    defined(USE_REENTRANT_API) && defined(HAS_CRYPT_R) && defined(__GLIBC__)
-        {
-            dTHXa(interp->perl);
-            /* workaround 5.8.0 bug */
-            PL_reentrant_buffer->_crypt_struct.current_saltbits = 0;
-        }
-#endif
+        MP_ASSERT_CONTEXT(interp->perl);
 
         {
             PTR_TBL_t *source = modperl_module_config_table_get(perl, FALSE);
@@ -101,7 +89,9 @@
 
         /*
          * we keep the PL_ptr_table past perl_clone so it can be used
-         * within modperl_svptr_table_clone.
+         * within modperl_svptr_table_clone. Perl_sv_dup() uses it.
+         * Don't confuse our svptr_table with Perl's ptr_table. They
+         * are different things, although they use the same type.
          */
         if ((clone_flags & CLONEf_KEEP_PTR_TABLE)) {
             dTHXa(interp->perl);
@@ -268,32 +258,48 @@
     scfg->mip = mip;
 }
 
+#ifdef MP_TRACE
+static apr_status_t modperl_interp_pool_cleanup(void *data)
+{
+    MP_TRACE_i(MP_FUNC, "unselecting: (0x%lx)->refcnt=%ld",
+               data, ((modperl_interp_t*)data)->refcnt);
+
+    return modperl_interp_unselect(data);
+}
+#endif
+
 apr_status_t modperl_interp_unselect(void *data)
 {
     modperl_interp_t *interp = (modperl_interp_t *)data;
     modperl_interp_pool_t *mip = interp->mip;
 
-    if (interp->refcnt != 0) {
+    MP_ASSERT(interp && MpInterpIN_USE(interp));
+    MP_TRACE_i(MP_FUNC, "unselect(interp=%pp): refcnt=%d",
+               interp, interp->refcnt);
+
+    if (interp->refcnt > 1) {
         --interp->refcnt;
-        MP_TRACE_i(MP_FUNC, "interp=0x%lx, refcnt=%d",
+        MP_TRACE_i(MP_FUNC, "interp=0x%lx, refcnt=%d -- interp still in use",
                    (unsigned long)interp, interp->refcnt);
         return APR_SUCCESS;
     }
 
-    if (interp->request) {
-        /* ithreads + a threaded mpm + PerlInterpScope handler */
-        request_rec *r = interp->request;
-        MP_dRCFG;
-        modperl_config_request_cleanup(interp->perl, r);
-        MpReqCLEANUP_REGISTERED_Off(rcfg);
-    }
-
     MpInterpIN_USE_Off(interp);
-    MpInterpPUTBACK_Off(interp);
 
     modperl_thx_interp_set(interp->perl, NULL);
+#ifdef MP_DEBUG
+    PERL_SET_CONTEXT(NULL);
+#endif
 
-    modperl_tipool_putback_data(mip->tipool, data, interp->num_requests);
+    if (interp == mip->parent) {
+        MP_TRACE_i(MP_FUNC, "parent interp=%pp freed", interp);
+    }
+    else {
+        interp->ccfg->interp = NULL;
+        modperl_tipool_putback_data(mip->tipool, data, interp->num_requests);
+        MP_TRACE_i(MP_FUNC, "interp=%pp freed, tipool(size=%ld, in_use=%ld)",
+                   interp, mip->tipool->size, mip->tipool->in_use);
+    }
 
     return APR_SUCCESS;
 }
@@ -321,13 +327,9 @@
 }
 
 void modperl_interp_pool_set(apr_pool_t *p,
-                             modperl_interp_t *interp,
-                             int cleanup)
+                             modperl_interp_t *interp)
 {
-    /* same as get_interp but optional cleanup  */
-    (void)apr_pool_userdata_set((void *)interp, MP_INTERP_KEY,
-                                cleanup ? modperl_interp_unselect : NULL,
-                                p);
+    (void)apr_pool_userdata_set((void *)interp, MP_INTERP_KEY, NULL, p);
 }
 
 /*
@@ -339,73 +341,134 @@
                                              server_rec *s)
 {
     int is_startup = (p == s->process->pconf);
-    MP_dSCFG(s);
     modperl_interp_t *interp = NULL;
 
-    if (scfg && (is_startup || !modperl_threaded_mpm())) {
-        MP_TRACE_i(MP_FUNC, "using parent interpreter at %s",
-                   is_startup ? "startup" : "request time (non-threaded MPM)");
-
-        if (!scfg->mip) {
-            /* we get here if directive handlers are invoked
-             * before server merge.
-             */
-            modperl_init_vhost(s, p, NULL);
-        }
+    if (is_startup) {
+        MP_dSCFG(s);
+        if (scfg) {
+            MP_TRACE_i(MP_FUNC, "using parent interpreter at startup");
 
-        interp = scfg->mip->parent;
-    }
-    else {
-        if (!(interp = modperl_interp_pool_get(p))) {
-            interp = modperl_interp_get(s);
-            modperl_interp_pool_set(p, interp, TRUE);
+            if (!scfg->mip) {
+                /* we get here if directive handlers are invoked
+                 * before server merge.
+                 */
+                modperl_init_vhost(s, p, NULL);
+                if (!scfg->mip) {
+                    /* FIXME: We get here if global "server_rec" == s, scfg->mip
+                     * is not created then. I'm not sure if that's bug or 
+                     * bad/good design decicision. For now just return NULL.
+                     */
+                    return NULL;
+                }
+            }
 
-            MP_TRACE_i(MP_FUNC, "set interp in request time pool 0x%lx",
-                       (unsigned long)p);
+            interp = scfg->mip->parent;
         }
         else {
-            MP_TRACE_i(MP_FUNC, "found interp in request time pool 0x%lx",
-                       (unsigned long)p);
+            if (!(interp = modperl_interp_pool_get(p))) {
+        	interp = modperl_interp_get(s);
+                modperl_interp_pool_set(p, interp);
+
+                MP_TRACE_i(MP_FUNC, "set interp %pp in pconf pool %pp",
+                           interp, p);
+            }
+            else {
+                MP_TRACE_i(MP_FUNC, "found interp %pp in pconf pool %pp",
+                           interp, p);
+            }
         }
-    }
 
-    return interp;
+        MpInterpIN_USE_On(interp);
+        interp->refcnt++;
+        /* set context (THX) for this thread */
+        PERL_SET_CONTEXT(interp->perl);
+        /* let the perl interpreter point back to its interp */
+        modperl_thx_interp_set(interp->perl, interp);
+
+        return interp;
+    }
+    else {
+        request_rec *r;
+        apr_pool_userdata_get((void **)&r, "MODPERL_R", p);
+        MP_ASSERT(r);
+        MP_TRACE_i(MP_FUNC, "found userdata MODPERL_R in pool %#lx as %lx",
+                   (unsigned long)r->pool, (unsigned long)r);
+        return modperl_interp_select(r, NULL, NULL);
+    }
 }
 
 modperl_interp_t *modperl_interp_select(request_rec *r, conn_rec *c,
                                         server_rec *s)
 {
-    MP_dSCFG(s);
-    MP_dRCFG;
-    modperl_config_dir_t *dcfg = modperl_config_dir_get(r);
+    MP_dSCFG((r ? s=r->server : c ? s=c->base_server : s));
+    MP_dDCFG;
+    modperl_config_con_t *ccfg;
     const char *desc = NULL;
     modperl_interp_t *interp = NULL;
     apr_pool_t *p = NULL;
-    int is_subrequest = (r && r->main) ? 1 : 0;
     modperl_interp_scope_e scope;
 
-    if (!modperl_threaded_mpm()) {
-        MP_TRACE_i(MP_FUNC,
-                   "using parent 0x%lx for non-threaded mpm (%s:%d)",
-                   (unsigned long)scfg->mip->parent,
-                   s->server_hostname, s->port);
+    /* What does the following condition mean?
+     * (r || c): if true we are at runtime. There is some kind of request
+     *           being processed.
+     * threaded_mpm: self-explanatory
+     *
+     * Thus, it is true if we are either at initialization time or at runtime
+     * but with prefork-MPM. */
+    if (!((r || c) && modperl_threaded_mpm())) {
+        interp = scfg->mip->parent;
+        MpInterpIN_USE_On(interp);
+        interp->refcnt++;
         /* XXX: if no VirtualHosts w/ PerlOptions +Parent we can skip this */
-        PERL_SET_CONTEXT(scfg->mip->parent->perl);
-        return scfg->mip->parent;
+        PERL_SET_CONTEXT(interp->perl);
+        /* let the perl interpreter point back to its interp */
+        modperl_thx_interp_set(interp->perl, interp);
+
+        MP_TRACE_i(MP_FUNC,
+                   "using parent 0x%pp (perl=0x%pp) for %s:%d refcnt set to %d",
+                   interp, interp->perl, s->server_hostname, s->port,
+                   interp->refcnt);
+        return interp;
     }
 
-    if (rcfg && rcfg->interp) {
-        /* if scope is per-handler and something selected an interpreter
-         * before modperl_callback_run_handlers() and is still holding it,
-         * e.g. modperl_response_handler_cgi(), that interpreter will
-         * be here
-         */
+    if(!c) c = r->connection;
+    ccfg = modperl_config_con_get(c);
+
+    if (ccfg && ccfg->interp) {
+        ccfg->interp->refcnt++;
+
         MP_TRACE_i(MP_FUNC,
-                   "found interp 0x%lx in request config\n",
-                   (unsigned long)rcfg->interp);
-        return rcfg->interp;
+                   "found interp 0x%lx in con config, refcnt incremented to %d",
+                   (unsigned long)ccfg->interp, ccfg->interp->refcnt);
+        /* set context (THX) for this thread */
+        PERL_SET_CONTEXT(ccfg->interp->perl);
+        /* modperl_thx_interp_set() is not called here because the interp
+         * already belongs to the perl interpreter
+         */
+        return ccfg->interp;
     }
 
+    MP_TRACE_i(MP_FUNC,
+               "fetching interp for %s:%d", s->server_hostname, s->port);
+    interp = modperl_interp_get(s);
+    MP_TRACE_i(MP_FUNC, "  --> got %pp (perl=%pp)", interp, interp->perl);
+    ++interp->num_requests; /* should only get here once per request */
+    interp->refcnt = 0;
+
+    /* set context (THX) for this thread */
+    PERL_SET_CONTEXT(interp->perl);
+    /* let the perl interpreter point back to its interp */
+    modperl_thx_interp_set(interp->perl, interp);
+
+    /* make sure ccfg is initialized */
+    modperl_config_con_init(c, ccfg);
+    ccfg->interp = interp;
+    interp->ccfg = ccfg;
+
+    MP_TRACE_i(MP_FUNC,
+               "pulled interp %pp (perl=%pp) from mip, num_requests is %d",
+               interp, interp->perl, interp->num_requests);
+
     /*
      * if a per-dir PerlInterpScope is specified, use it.
      * else if r != NULL use per-server PerlInterpScope
@@ -419,102 +482,49 @@
     MP_TRACE_i(MP_FUNC, "scope is per-%s",
                modperl_interp_scope_desc(scope));
 
-    /*
-     * XXX: goto modperl_interp_get() if scope == handler ?
-     */
-
-    if (c && (scope == MP_INTERP_SCOPE_CONNECTION)) {
-        desc = "conn_rec pool";
-        get_interp(c->pool);
-
-        if (interp) {
-            MP_TRACE_i(MP_FUNC,
-                       "found interp 0x%lx in %s 0x%lx\n",
-                       (unsigned long)interp, desc, (unsigned long)c->pool);
-            return interp;
+    if (scope != MP_INTERP_SCOPE_HANDLER) {
+        desc = NULL;
+        if (c && (scope == MP_INTERP_SCOPE_CONNECTION || !r)) {
+            p = c->pool;
+            desc = "connection";
         }
-
-        p = c->pool;
-    }
-    else if (r) {
-        if (is_subrequest && (scope == MP_INTERP_SCOPE_REQUEST)) {
-            /* share 1 interpreter across sub-requests */
+        else if (r) {
             request_rec *main_r = r->main;
 
-            while (main_r && !interp) {
-                p = main_r->pool;
-                get_interp(p);
-                MP_TRACE_i(MP_FUNC,
-                           "looking for interp in main request for %s...%s\n",
-                           main_r->uri, interp ? "found" : "not found");
-                main_r = main_r->main;
+            if (main_r && (scope == MP_INTERP_SCOPE_REQUEST)) {
+                /* share 1 interpreter across sub-requests */
+                for(; main_r; main_r = main_r->main) {
+                    p = main_r->pool;
+                }
+                desc = "main request";
             }
-        }
-        else {
-            p = r->pool;
-            get_interp(p);
-        }
-
-        desc = "request_rec pool";
-
-        if (interp) {
-            MP_TRACE_i(MP_FUNC,
-                       "found interp 0x%lx in %s 0x%lx (%s request for %s)\n",
-                       (unsigned long)interp, desc, (unsigned long)p,
-                       (is_subrequest ? "sub" : "main"), r->uri);
-            return interp;
-        }
-
-        /* might have already been set by a ConnectionHandler */
-        get_interp(r->connection->pool);
-
-        if (interp) {
-            desc = "r->connection pool";
-            MP_TRACE_i(MP_FUNC,
-                       "found interp 0x%lx in %s 0x%lx\n",
-                       (unsigned long)interp, desc,
-                       (unsigned long)r->connection->pool);
-            return interp;
-        }
-    }
-
-    interp = modperl_interp_get(s ? s : r->server);
-    ++interp->num_requests; /* should only get here once per request */
-
-    if (scope == MP_INTERP_SCOPE_HANDLER) {
-        /* caller is responsible for calling modperl_interp_unselect() */
-        interp->request = r;
-        MpReqCLEANUP_REGISTERED_On(rcfg);
-        MpInterpPUTBACK_On(interp);
-    }
-    else {
-        if (!p) {
-            /* should never happen */
-            MP_TRACE_i(MP_FUNC, "no pool");
-            return NULL;
-        }
+            else {
+                p = r->pool;
+                desc = scope == MP_INTERP_SCOPE_REQUEST
+                       ? "main request"
+                       : "sub request";
+            }
+	}
 
-        set_interp(p);
+        MP_ASSERT(p);
 
-#if AP_MODULE_MAGIC_AT_LEAST(20111130, 0)
-        MP_TRACE_i(MP_FUNC,
-                   "set interp 0x%lx in %s 0x%lx (%s request for %s)\n",
-                   (unsigned long)interp, desc, (unsigned long)p,
-                   (r ? (is_subrequest ? "sub" : "main") : "conn"),
-                   (r ? r->uri : c->client_ip));
+#ifdef MP_TRACE
+        apr_pool_cleanup_register(p, (void *)interp,
+                                  modperl_interp_pool_cleanup,
+                                  modperl_interp_pool_cleanup);
 #else
-        MP_TRACE_i(MP_FUNC,
-                   "set interp 0x%lx in %s 0x%lx (%s request for %s)\n",
-                   (unsigned long)interp, desc, (unsigned long)p,
-                   (r ? (is_subrequest ? "sub" : "main") : "conn"),
-                   (r ? r->uri : c->remote_ip));
+        apr_pool_cleanup_register(p, (void *)interp,
+                                  modperl_interp_unselect,
+                                  modperl_interp_unselect);
 #endif
-    }
 
-    /* set context (THX) for this thread */
-    PERL_SET_CONTEXT(interp->perl);
+        /* add a reference for the registered cleanup */
+        interp->refcnt++;
 
-    modperl_thx_interp_set(interp->perl, interp);
+        MP_TRACE_i(MP_FUNC,
+                   "registered unselect cleanup for interp 0x%lx in %s",
+                   (unsigned long)interp, desc);
+    }
 
     return interp;
 }
@@ -584,20 +594,20 @@
 }
 
 #define MP_THX_INTERP_KEY "modperl2::thx_interp_key"
-modperl_interp_t *modperl_thx_interp_get(PerlInterpreter *thx)
+modperl_interp_t *modperl_thx_interp_get(pTHX)
 {
     modperl_interp_t *interp;
-    dTHXa(thx);
-    SV **svp = hv_fetch(PL_modglobal, MP_THX_INTERP_KEY, strlen(MP_THX_INTERP_KEY), 0);
+    SV **svp = hv_fetch(PL_modglobal, MP_THX_INTERP_KEY,
+                        strlen(MP_THX_INTERP_KEY), 0);
     if (!svp) return NULL;
     interp = INT2PTR(modperl_interp_t *, SvIV(*svp));
     return interp;
 }
 
-void modperl_thx_interp_set(PerlInterpreter *thx, modperl_interp_t *interp)
+void modperl_thx_interp_set(pTHX_ modperl_interp_t *interp)
 {
-    dTHXa(thx);
-    (void)hv_store(PL_modglobal, MP_THX_INTERP_KEY, strlen(MP_THX_INTERP_KEY), newSViv(PTR2IV(interp)), 0);
+    (void)hv_store(PL_modglobal, MP_THX_INTERP_KEY, strlen(MP_THX_INTERP_KEY),
+                   newSViv(PTR2IV(interp)), 0);
     return;
 }
 
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_interp.h mod_perl-2.0.8/src/modules/perl/modperl_interp.h
--- mod_perl-2.0.8/src/modules/perl/modperl_interp.h	2011-02-08 05:00:10.000000000 +0300
+++ mod_perl-2.0.8/src/modules/perl/modperl_interp.h	2014-05-13 09:48:22.932856468 +0400
@@ -43,8 +43,7 @@
 modperl_interp_t *modperl_interp_pool_get(apr_pool_t *p);
 
 void modperl_interp_pool_set(apr_pool_t *p,
-                             modperl_interp_t *interp,
-                             int cleanup);
+                             modperl_interp_t *interp);
 
 modperl_interp_t *modperl_interp_pool_select(apr_pool_t *p,
                                              server_rec *s);
@@ -52,16 +51,60 @@
 modperl_interp_t *modperl_interp_select(request_rec *r, conn_rec *c,
                                         server_rec *s);
 
-#define MP_dINTERP_SELECT(r, c, s) \
-    pTHX; \
-    modperl_interp_t *interp = NULL; \
-    interp = modperl_interp_select(r, c, s); \
-    aTHX = interp->perl
-
-#define MP_INTERP_PUTBACK(interp) \
-    if (interp && MpInterpPUTBACK(interp)) { \
-        modperl_interp_unselect(interp); \
-    }
+#define MP_dINTERP pTHX; modperl_interp_t *interp = NULL
+
+#define MP_INTERPa(r, c, s)                                             \
+    MP_TRACE_i(MP_FUNC, "selecting interp: r=%pp, c=%pp, s=%pp",        \
+               (r), (c), (s));                                          \
+    interp = modperl_interp_select((r), (c), (s));                      \
+    if (interp) {                                                       \
+        MP_TRACE_i(MP_FUNC, "  --> got (0x%pp)->refcnt=%d, perl=%pp",   \
+                   interp, interp->refcnt, interp->perl);               \
+        aTHX = interp->perl;                                            \
+    }                                                                   \
+    else {                                                              \
+        MP_TRACE_i(MP_FUNC, "  --> failed");                            \
+    }                                                                   \
+    NOOP
+
+#define MP_dINTERPa(r, c, s)                                            \
+    MP_dINTERP;                                                         \
+    MP_INTERPa((r), (c), (s))
+
+#define MP_INTERP_POOLa(p, s)                                           \
+    MP_TRACE_i(MP_FUNC, "selecting interp: p=%pp, s=%pp", (p), (s));    \
+    interp = modperl_interp_pool_select((p), (s));                      \
+    if (interp) {                                                       \
+        MP_TRACE_i(MP_FUNC, "  --> got (0x%pp)->refcnt=%d",             \
+                   interp, interp->refcnt);                             \
+        aTHX = interp->perl;                                            \
+    }                                                                   \
+    else {                                                              \
+        MP_TRACE_i(MP_FUNC, "  --> failed");                            \
+    }                                                                   \
+    NOOP
+
+#define MP_dINTERP_POOLa(p, s)                                          \
+    MP_dINTERP;                                                         \
+    MP_INTERP_POOLa((p), (s))
+
+#ifdef MP_DEBUG
+#define MP_INTERP_PUTBACK(interp, thx)                                  \
+    MP_TRACE_i(MP_FUNC, "unselecting interp: (0x%pp)->refcnt=%ld",      \
+               (interp), (interp)->refcnt);                             \
+    modperl_interp_unselect(interp);                                    \
+    interp = NULL;                                                      \
+    if( thx ) thx = NULL
+#else  /* MP_DEBUG */
+#define MP_INTERP_PUTBACK(interp, thx)                                  \
+    modperl_interp_unselect(interp)
+#endif
+
+#define MP_INTERP_REFCNT_inc(interp) (interp)->refcnt++
+
+#define MP_INTERP_REFCNT_dec(interp) MP_INTERP_PUTBACK(interp, NULL)
+
+#define MP_HAS_INTERP(interp) (interp != NULL)
 
 #define MP_aTHX aTHX
 
@@ -83,12 +126,33 @@
                                      void *data);
 #else
 
-#define MP_dINTERP_SELECT(r, c, s) dNOOP
+#define MP_dINTERP dNOOP
+
+#define MP_INTERPa(r, c, s) NOOP
+
+#define MP_dINTERPa(r, c, s) NOOP
 
-#define MP_INTERP_PUTBACK(interp) NOOP
+#define MP_INTERP_POOLa(p, s) NOOP
+
+#define MP_dINTERP_POOLa(p, s) NOOP
+
+#define MP_INTERP_PUTBACK(interp, thx) NOOP
+
+#define MP_INTERP_REFCNT_inc(interp) NOOP
+
+#define MP_INTERP_REFCNT_dec(interp) NOOP
+
+#define MP_HAS_INTERP(interp) (1)
 
 #define MP_aTHX 0
 
 #endif /* USE_ITHREADS */
 
 #endif /* MODPERL_INTERP_H */
+
+/*
+ * Local Variables:
+ * c-basic-offset: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_mgv.c mod_perl-2.0.8/src/modules/perl/modperl_mgv.c
--- mod_perl-2.0.8/src/modules/perl/modperl_mgv.c	2012-07-20 03:57:38.000000000 +0400
+++ mod_perl-2.0.8/src/modules/perl/modperl_mgv.c	2014-05-08 19:05:39.373769713 +0400
@@ -211,14 +211,12 @@
         handler->name    = NULL;
         handler->mgv_obj = modperl_handler_anon_next(aTHX_ p);
         modperl_handler_anon_add(aTHX_ handler->mgv_obj, cv);
-        MP_TRACE_h(MP_FUNC, "[%s] new anon handler",
-                   modperl_pid_tid(p));
+        MP_TRACE_h(MP_FUNC, "new anon handler");
 #else
         SvREFCNT_inc(cv);
         handler->cv      = cv;
         handler->name    = NULL;
-        MP_TRACE_h(MP_FUNC, "[%s] new cached-cv anon handler",
-                   modperl_pid_tid(p));
+        MP_TRACE_h(MP_FUNC, "new cached-cv anon handler");
 #endif
 
         FREETMPS;LEAVE;
@@ -340,8 +338,7 @@
         modperl_mgv_append(aTHX_ p, handler->mgv_cv, handler_name);
 
         MpHandlerPARSED_On(handler);
-        MP_TRACE_h(MP_FUNC, "[%s] found `%s' in class `%s' as a %s",
-                   modperl_pid_tid(p),
+        MP_TRACE_h(MP_FUNC, "found `%s' in class `%s' as a %s",
                    handler_name, HvNAME(stash),
                    MpHandlerMETHOD(handler) ? "method" : "function");
         MODPERL_MGV_DEEP_RESOLVE(handler, p);
@@ -479,10 +476,7 @@
 {
     int i;
     modperl_config_dir_t *dir_cfg = (modperl_config_dir_t *)cfg;
-#ifdef USE_ITHREADS
-    MP_dSCFG(s);
-    MP_dSCFG_dTHX;
-#endif
+    dTHXa(data);
 
     if (!dir_cfg) {
         return 1;
@@ -500,7 +494,7 @@
 {
     int i;
     modperl_config_srv_t *scfg = (modperl_config_srv_t *)cfg;
-    MP_dSCFG_dTHX;
+    dTHXa(data);
 
     for (i=0; i < MP_HANDLER_NUM_PER_SRV; i++) {
         modperl_hash_handlers(aTHX_ p, s,
@@ -527,7 +521,21 @@
 
 void modperl_mgv_hash_handlers(apr_pool_t *p, server_rec *s)
 {
-    ap_pcw_walk_config(p, s, &perl_module, NULL,
+    MP_dINTERPa(NULL, NULL, s);
+    ap_pcw_walk_config(p, s, &perl_module,
+#ifdef USE_ITHREADS
+                       aTHX,
+#else
+                       NULL,
+#endif
                        modperl_hash_handlers_dir,
                        modperl_hash_handlers_srv);
+    MP_INTERP_PUTBACK(interp, aTHX);
 }
+
+/*
+ * Local Variables:
+ * c-basic-offset: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_module.c mod_perl-2.0.8/src/modules/perl/modperl_module.c
--- mod_perl-2.0.8/src/modules/perl/modperl_module.c	2012-12-09 10:48:59.000000000 +0400
+++ mod_perl-2.0.8/src/modules/perl/modperl_module.c	2014-05-08 19:05:39.430354539 +0400
@@ -103,7 +103,9 @@
 }
 
 typedef struct {
-    PerlInterpreter *perl;
+#ifdef USE_ITHREADS
+    modperl_interp_t *interp;
+#endif
     PTR_TBL_t *table;
     void *ptr;
 } config_obj_cleanup_t;
@@ -116,13 +118,17 @@
 {
     config_obj_cleanup_t *cleanup =
         (config_obj_cleanup_t *)data;
-    dTHXa(cleanup->perl);
+#ifdef USE_ITHREADS
+    dTHXa(cleanup->interp->perl);
+    MP_ASSERT_CONTEXT(aTHX);
+#endif
 
     modperl_svptr_table_delete(aTHX_ cleanup->table, cleanup->ptr);
 
-    MP_TRACE_c(MP_FUNC, "deleting ptr 0x%lx from table 0x%lx",
-               (unsigned long)cleanup->ptr,
-               (unsigned long)cleanup->table);
+    MP_TRACE_c(MP_FUNC, "deleting ptr %pp from table %pp",
+               cleanup->ptr, cleanup->table);
+
+    MP_INTERP_PUTBACK(cleanup->interp, aTHX);
 
     return APR_SUCCESS;
 }
@@ -138,7 +144,8 @@
     cleanup->table = table;
     cleanup->ptr = ptr;
 #ifdef USE_ITHREADS
-    cleanup->perl = aTHX;
+    cleanup->interp = modperl_thx_interp_get(aTHX);
+    MP_INTERP_REFCNT_inc(cleanup->interp);
 #endif
 
     apr_pool_cleanup_register(p, cleanup,
@@ -166,10 +173,7 @@
     int is_startup;
     PTR_TBL_t *table;
     SV *mrg_obj = (SV *)NULL, *base_obj, *add_obj;
-#ifdef USE_ITHREADS
-    modperl_interp_t *interp;
-    MP_PERL_CONTEXT_DECLARE;
-#endif
+    MP_dINTERP;
 
     /* if the module is loaded in vhost, base==NULL */
     tmp = (base && base->server) ? base : add;
@@ -182,21 +186,14 @@
     s = tmp->server;
     is_startup = (p == s->process->pconf);
 
-#ifdef USE_ITHREADS
-    interp = modperl_interp_pool_select(p, s);
-    MP_PERL_CONTEXT_STORE_OVERRIDE(interp->perl);
-#endif
+    MP_INTERP_POOLa(p, s);
 
     table = modperl_module_config_table_get(aTHX_ TRUE);
     base_obj = modperl_svptr_table_fetch(aTHX_ table, base);
     add_obj  = modperl_svptr_table_fetch(aTHX_ table, add);
 
     if (!base_obj || (base_obj == add_obj)) {
-#ifdef USE_ITHREADS
-        /* XXX: breaks prefork
-           modperl_interp_unselect(interp); */
-        MP_PERL_CONTEXT_RESTORE;
-#endif
+        MP_INTERP_PUTBACK(interp, aTHX);
         return addv;
     }
 
@@ -245,11 +242,7 @@
         modperl_module_config_obj_cleanup_register(aTHX_ p, table, mrg);
     }
 
-#ifdef USE_ITHREADS
-    /* XXX: breaks prefork
-       modperl_interp_unselect(interp); */
-    MP_PERL_CONTEXT_RESTORE;
-#endif
+    MP_INTERP_PUTBACK(interp, aTHX);
 
     return (void *)mrg;
 }
@@ -363,16 +356,12 @@
     modperl_module_info_t *minfo = MP_MODULE_INFO(info->modp);
     modperl_module_cfg_t *srv_cfg;
     int modules_alias = 0;
-
-#ifdef USE_ITHREADS
-    modperl_interp_t *interp = modperl_interp_pool_select(p, s);
-    dTHXa(interp->perl);
-#endif
-
     int count;
-    PTR_TBL_t *table = modperl_module_config_table_get(aTHX_ TRUE);
+    PTR_TBL_t *table;
     SV *obj = (SV *)NULL;
-    dSP;
+    MP_dINTERP_POOLa(p, s);
+
+    table = modperl_module_config_table_get(aTHX_ TRUE);
 
     if (s->is_virtual) {
         MP_dSCFG(s);
@@ -416,6 +405,7 @@
                                               parms, &obj);
 
     if (errmsg) {
+        MP_INTERP_PUTBACK(interp, aTHX);
         return errmsg;
     }
 
@@ -436,6 +426,7 @@
                                                minfo->srv_create,
                                                parms, &srv_obj);
         if (errmsg) {
+            MP_INTERP_PUTBACK(interp, aTHX);
             return errmsg;
         }
 
@@ -446,37 +437,42 @@
         }
     }
 
-    ENTER;SAVETMPS;
-    PUSHMARK(SP);
-    EXTEND(SP, 2);
+    {
+        dSP;
+        ENTER;SAVETMPS;
+        PUSHMARK(SP);
+        EXTEND(SP, 2);
 
-    PUSHs(obj);
-    PUSHs(modperl_bless_cmd_parms(parms));
+        PUSHs(obj);
+        PUSHs(modperl_bless_cmd_parms(parms));
 
-    if (cmd->args_how != NO_ARGS) {
-        PUSH_STR_ARG(one);
-        PUSH_STR_ARG(two);
-        PUSH_STR_ARG(three);
-    }
+        if (cmd->args_how != NO_ARGS) {
+            PUSH_STR_ARG(one);
+            PUSH_STR_ARG(two);
+            PUSH_STR_ARG(three);
+        }
 
-    PUTBACK;
-    count = call_method(info->func_name, G_EVAL|G_SCALAR);
-    SPAGAIN;
+        PUTBACK;
+        count = call_method(info->func_name, G_EVAL|G_SCALAR);
+        SPAGAIN;
 
-    if (count == 1) {
-        SV *sv = POPs;
-        if (SvPOK(sv) && strEQ(SvPVX(sv), DECLINE_CMD)) {
-            retval = DECLINE_CMD;
+        if (count == 1) {
+            SV *sv = POPs;
+            if (SvPOK(sv) && strEQ(SvPVX(sv), DECLINE_CMD)) {
+                retval = DECLINE_CMD;
+            }
         }
-    }
 
-    PUTBACK;
-    FREETMPS;LEAVE;
+        PUTBACK;
+        FREETMPS;LEAVE;
+    }
 
     if (SvTRUE(ERRSV)) {
         retval = SvPVX(ERRSV);
     }
 
+    MP_INTERP_PUTBACK(interp, aTHX);
+
     if (modules_alias) {
         MP_dSCFG(s);
         /* unalias the temp aliasing */
@@ -644,10 +640,7 @@
     command_rec *cmd;
     AV *module_cmds;
     I32 i, fill;
-#ifdef USE_ITHREADS
-    MP_dSCFG(s);
-    dTHXa(scfg->mip->parent->perl);
-#endif
+    MP_dINTERPa(NULL, NULL, s);
     module_cmds = (AV*)SvRV(mod_cmds);
 
     fill = AvFILL(module_cmds);
@@ -664,6 +657,7 @@
         cmd = apr_array_push(cmds);
 
         if ((errmsg = modperl_module_cmd_fetch(aTHX_ obj, "name", &val))) {
+            MP_INTERP_PUTBACK(interp, aTHX);
             return errmsg;
         }
 
@@ -684,6 +678,7 @@
         }
 
         if (!modperl_module_cmd_lookup(cmd)) {
+            MP_INTERP_PUTBACK(interp, aTHX);
             return apr_psprintf(p,
                                 "no command function defined for args_how=%d",
                                 cmd->args_how);
@@ -736,6 +731,7 @@
 
     modp->cmds = (command_rec *)cmds->elts;
 
+    MP_INTERP_PUTBACK(interp, aTHX);
     return NULL;
 }
 
@@ -783,13 +779,12 @@
                                const char *name, SV *mod_cmds)
 {
     MP_dSCFG(s);
-#ifdef USE_ITHREADS
-    dTHXa(scfg->mip->parent->perl);
-#endif
     const char *errmsg;
-    module *modp = (module *)apr_pcalloc(p, sizeof(*modp));
-    modperl_module_info_t *minfo =
-        (modperl_module_info_t *)apr_pcalloc(p, sizeof(*minfo));
+    module *modp;
+    modperl_module_info_t *minfo;
+    MP_dINTERPa(NULL, NULL, s);
+    modp = (module *)apr_pcalloc(p, sizeof(*modp));
+    minfo = (modperl_module_info_t *)apr_pcalloc(p, sizeof(*minfo));
 
     /* STANDARD20_MODULE_STUFF */
     modp->version       = MODULE_MAGIC_NUMBER_MAJOR;
@@ -827,6 +822,7 @@
     modp->cmds = NULL;
 
     if ((errmsg = modperl_module_add_cmds(p, s, modp, mod_cmds))) {
+        MP_INTERP_PUTBACK(interp, aTHX);
         return errmsg;
     }
 
@@ -855,10 +851,13 @@
      */
     if (!modperl_interp_pool_get(p)) {
         /* for vhosts */
-        modperl_interp_pool_set(p, scfg->mip->parent, FALSE);
+        MP_TRACE_i(MP_FUNC, "set interp 0x%lx in pconf pool 0x%lx",
+                   (unsigned long)scfg->mip->parent, (unsigned long)p);
+        modperl_interp_pool_set(p, scfg->mip->parent);
     }
 #endif
 
+    MP_INTERP_PUTBACK(interp, aTHX);
     return NULL;
 }
 
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_svptr_table.c mod_perl-2.0.8/src/modules/perl/modperl_svptr_table.c
--- mod_perl-2.0.8/src/modules/perl/modperl_svptr_table.c	2012-07-20 03:57:38.000000000 +0400
+++ mod_perl-2.0.8/src/modules/perl/modperl_svptr_table.c	2014-05-08 19:05:39.370891554 +0400
@@ -184,7 +184,7 @@
 {
     PTR_TBL_ENT_t *tblent;
     UV hash = PTR2UV(sv);
-    assert(tbl);
+    MP_ASSERT(tbl);
     tblent = tbl->tbl_ary[hash & tbl->tbl_max];
     for (; tblent; tblent = tblent->next) {
         if (tblent->oldval == sv)
@@ -205,7 +205,7 @@
     UV hash = PTR2UV(oldv);
     bool i = 1;
 
-    assert(tbl);
+    MP_ASSERT(tbl);
     otblent = &tbl->tbl_ary[hash & tbl->tbl_max];
     for (tblent = *otblent; tblent; i=0, tblent = tblent->next) {
         if (tblent->oldval == oldv) {
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_types.h mod_perl-2.0.8/src/modules/perl/modperl_types.h
--- mod_perl-2.0.8/src/modules/perl/modperl_types.h	2011-02-08 05:00:10.000000000 +0300
+++ mod_perl-2.0.8/src/modules/perl/modperl_types.h	2014-05-08 19:05:39.394203317 +0400
@@ -40,6 +40,8 @@
     server_rec  *s;
 } modperl_rcs_t;
 
+typedef struct modperl_config_con_t modperl_config_con_t;
+
 #ifdef USE_ITHREADS
 
 typedef struct modperl_list_t modperl_list_t;
@@ -52,13 +54,14 @@
 typedef struct modperl_interp_t modperl_interp_t;
 typedef struct modperl_interp_pool_t modperl_interp_pool_t;
 typedef struct modperl_tipool_t modperl_tipool_t;
+typedef struct modperl_tipool_config_t modperl_tipool_config_t;
 
 struct modperl_interp_t {
     modperl_interp_pool_t *mip;
     PerlInterpreter *perl;
     int num_requests;
     U8 flags;
-    request_rec *request;
+    modperl_config_con_t *ccfg;
     int refcnt;
 #ifdef MP_TRACE
     unsigned long tid;
@@ -79,13 +82,13 @@
                         modperl_list_t *listp);
 } modperl_tipool_vtbl_t;
 
-typedef struct {
+struct modperl_tipool_config_t {
     int start; /* number of items to create at startup */
     int min_spare; /* minimum number of spare items */
     int max_spare; /* maximum number of spare items */
     int max; /* maximum number of items */
     int max_requests; /* maximum number of requests per item */
-} modperl_tipool_config_t;
+};
 
 struct modperl_tipool_t {
     perl_mutex tiplock;
@@ -240,11 +243,21 @@
     int sent_eos;
     SV *data;
     modperl_handler_t *handler;
-    PerlInterpreter *perl;
+#ifdef USE_ITHREADS
+    modperl_interp_t *interp;
+#endif
 } modperl_filter_ctx_t;
 
 typedef struct {
     HV *pnotes;
+    apr_pool_t *pool;
+#ifdef USE_ITHREADS
+    modperl_interp_t *interp;
+#endif
+} modperl_pnotes_t;
+
+typedef struct {
+    modperl_pnotes_t pnotes;
     SV *global_request_obj;
     U8 flags;
     int status;
@@ -252,14 +265,14 @@
     MpAV *handlers_per_dir[MP_HANDLER_NUM_PER_DIR];
     MpAV *handlers_per_srv[MP_HANDLER_NUM_PER_SRV];
     modperl_perl_globals_t perl_globals;
+} modperl_config_req_t;
+
+struct modperl_config_con_t {
+    modperl_pnotes_t pnotes;
 #ifdef USE_ITHREADS
     modperl_interp_t *interp;
 #endif
-} modperl_config_req_t;
-
-typedef struct {
-    HV *pnotes;
-} modperl_config_con_t;
+};
 
 typedef struct {
     apr_pool_t *pool;
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_util.c mod_perl-2.0.8/src/modules/perl/modperl_util.c
--- mod_perl-2.0.8/src/modules/perl/modperl_util.c	2012-07-20 03:57:38.000000000 +0400
+++ mod_perl-2.0.8/src/modules/perl/modperl_util.c	2014-05-13 09:48:22.963066518 +0400
@@ -470,9 +470,8 @@
     I32 i, oldscope = PL_scopestack_ix;
     SV **ary = AvARRAY(subs);
 
-    MP_TRACE_g(MP_FUNC, "pid %lu" MP_TRACEf_TID MP_TRACEf_PERLID
-               " running %d %s subs",
-               (unsigned long)getpid(), MP_TRACEv_TID_ MP_TRACEv_PERLID_
+    MP_TRACE_g(MP_FUNC, MP_TRACEf_PERLID
+               " running %d %s subs", MP_TRACEv_PERLID_
                AvFILLp(subs)+1, name);
 
     for (i=0; i<=AvFILLp(subs); i++) {
@@ -830,56 +829,44 @@
     return data ? *(int *)data : 0;
  }
 
-#ifdef USE_ITHREADS
-typedef struct {
-    HV **pnotes;
-    PerlInterpreter *perl;
-} modperl_cleanup_pnotes_data_t;
-#endif
- 
 static MP_INLINE
 apr_status_t modperl_cleanup_pnotes(void *data) {
-    HV **pnotes = data;
+    modperl_pnotes_t *pnotes = data;
 
-    if (*pnotes) {
-#ifdef USE_ITHREADS
-        modperl_cleanup_pnotes_data_t *cleanup_data = data;
-        dTHXa(cleanup_data->perl);
-        pnotes = cleanup_data->pnotes;
-#else
-        pnotes = data;
-#endif
-        SvREFCNT_dec(*pnotes);
-        *pnotes = (HV *)NULL;
-    }
+    dTHXa(pnotes->interp->perl);
+    MP_ASSERT_CONTEXT(aTHX);
 
+    SvREFCNT_dec(pnotes->pnotes);
+    pnotes->pnotes = NULL;
+    pnotes->pool = NULL;
+
+    MP_INTERP_PUTBACK(pnotes->interp, aTHX);
     return APR_SUCCESS;
 }
 
-MP_INLINE
-static void *modperl_pnotes_cleanup_data(pTHX_ HV **pnotes, apr_pool_t *p) {
-#ifdef USE_ITHREADS
-    modperl_cleanup_pnotes_data_t *cleanup_data = apr_palloc(p, sizeof(*cleanup_data));
-    cleanup_data->pnotes = pnotes;
-    cleanup_data->perl = aTHX;
-    return cleanup_data;
-#else
-    return pnotes;
-#endif
-}
+void modperl_pnotes_kill(void *data) {
+    modperl_pnotes_t *pnotes = data;
 
-SV *modperl_pnotes(pTHX_ HV **pnotes, SV *key, SV *val,
-                   request_rec *r, conn_rec *c) {
-    SV *retval = (SV *)NULL;
+    if( !pnotes->pnotes ) return;
 
-    if (!*pnotes) {
-        apr_pool_t *pool = r ? r->pool : c->pool;
-        void *cleanup_data;
-        *pnotes = newHV();
+    apr_pool_cleanup_kill(pnotes->pool, pnotes, modperl_cleanup_pnotes);
+    modperl_cleanup_pnotes(pnotes);
+}
 
-        cleanup_data = modperl_pnotes_cleanup_data(aTHX_ pnotes, pool);
+SV *modperl_pnotes(pTHX_ modperl_pnotes_t *pnotes, SV *key, SV *val,
+                   apr_pool_t *pool) {
+    SV *retval = (SV *)NULL;
 
-        apr_pool_cleanup_register(pool, cleanup_data,
+    if (!pnotes->pnotes) {
+        pnotes->pool = pool;
+#ifdef USE_ITHREADS
+        pnotes->interp = modperl_thx_interp_get(aTHX);
+        pnotes->interp->refcnt++;
+        MP_TRACE_i(MP_FUNC, "TO: (0x%lx)->refcnt incremented to %ld",
+                   pnotes->interp, pnotes->interp->refcnt);
+#endif
+        pnotes->pnotes = newHV();
+        apr_pool_cleanup_register(pool, pnotes,
                                   modperl_cleanup_pnotes,
                                   apr_pool_cleanup_null);
     }
@@ -889,15 +876,15 @@
         char *k = SvPV(key, len);
 
         if (val) {
-            retval = *hv_store(*pnotes, k, len, SvREFCNT_inc(val), 0);
+            retval = *hv_store(pnotes->pnotes, k, len, SvREFCNT_inc(val), 0);
         }
-        else if (hv_exists(*pnotes, k, len)) {
-            retval = *hv_fetch(*pnotes, k, len, FALSE);
+        else if (hv_exists(pnotes->pnotes, k, len)) {
+            retval = *hv_fetch(pnotes->pnotes, k, len, FALSE);
         }
 
         return retval ? SvREFCNT_inc(retval) : &PL_sv_undef;
     }
-    return newRV_inc((SV *)*pnotes);
+    return newRV_inc((SV *)pnotes->pnotes);
 }
 
 U16 *modperl_code_attrs(pTHX_ CV *cv) {
@@ -910,3 +897,372 @@
     mg = mg_find((SV*)cv, PERL_MAGIC_ext);
     return &(mg->mg_private);
 }
+
+#if AP_SERVER_MAJORVERSION_NUMBER>2 || \
+    (AP_SERVER_MAJORVERSION_NUMBER == 2 && AP_SERVER_MINORVERSION_NUMBER>=3)
+
+static apr_hash_t *global_authz_providers = NULL;
+static apr_hash_t *global_authn_providers = NULL;
+
+typedef struct {
+    SV *cb1;
+    SV *cb2;
+    modperl_handler_t *cb1_handler;
+    modperl_handler_t *cb2_handler;
+} auth_callback;
+
+static apr_status_t cleanup_perl_global_providers(void *ctx)
+{
+    global_authz_providers = NULL;
+    global_authn_providers = NULL;
+    return APR_SUCCESS;
+}
+
+static authz_status perl_check_authorization(request_rec *r,
+                                             const char *require_args,
+                                             const void *parsed_require_args)
+{
+    authz_status ret = AUTHZ_DENIED;
+    int count;
+    AV *args = Nullav;
+    const char *key;
+    auth_callback *ab;
+    MP_dINTERPa(r, NULL, NULL);
+
+    if (global_authz_providers == NULL) {
+        MP_INTERP_PUTBACK(interp, aTHX);
+        return ret;
+    }
+
+    key = apr_table_get(r->notes, AUTHZ_PROVIDER_NAME_NOTE);
+    ab = apr_hash_get(global_authz_providers, key, APR_HASH_KEY_STRING);
+    if (ab == NULL) {
+        MP_INTERP_PUTBACK(interp, aTHX);
+        return ret;
+    }
+
+    if (ab->cb1 == NULL) {
+        if (ab->cb1_handler == NULL) {
+            MP_INTERP_PUTBACK(interp, aTHX);
+            return ret;
+        }
+
+        modperl_handler_make_args(aTHX_ &args, "Apache2::RequestRec", r,
+                                  "PV", require_args, NULL);
+        ret = modperl_callback(aTHX_ ab->cb1_handler, r->pool, r, r->server,
+                               args);
+        SvREFCNT_dec((SV*)args);
+        MP_INTERP_PUTBACK(interp, aTHX);
+        return ret;
+    }
+
+    {
+        dSP;
+        ENTER;
+        SAVETMPS;
+        PUSHMARK(SP);
+        XPUSHs(sv_2mortal(modperl_ptr2obj(aTHX_ "Apache2::RequestRec", r)));
+        XPUSHs(sv_2mortal(newSVpv(require_args, 0)));
+        PUTBACK;
+        count = call_sv(ab->cb1, G_SCALAR);
+        SPAGAIN;
+
+        if (count == 1) {
+            ret = (authz_status) POPi;
+        }
+
+        PUTBACK;
+        FREETMPS;
+        LEAVE;
+    }
+
+    MP_INTERP_PUTBACK(interp, aTHX);
+    return ret;
+}
+
+static const char *perl_parse_require_line(cmd_parms *cmd,
+                                           const char *require_line,
+                                           const void **parsed_require_line)
+{
+    char *ret = NULL;
+    void *key;
+    auth_callback *ab;
+
+    if (global_authz_providers == NULL ||
+        apr_hash_count(global_authz_providers) == 0)
+    {
+        return NULL;
+    }
+
+    apr_pool_userdata_get(&key, AUTHZ_PROVIDER_NAME_NOTE, cmd->temp_pool);
+    ab = apr_hash_get(global_authz_providers, (char *) key, APR_HASH_KEY_STRING);
+    if (ab == NULL || ab->cb2 == NULL) {
+        return NULL;
+    }
+
+    {
+        /* PerlAddAuthzProvider currently does not support an optional second
+         * handler, so ab->cb2 should always be NULL above and we will never get
+         * here. If such support is added in the future then this code will be
+         * reached, but cannot succeed in the absence of an interpreter. The
+         * second handler would be called at init to check a Require line for
+         * errors, but in the current design there is no interpreter available
+         * at that time.
+         */
+        MP_dINTERP_POOLa(cmd->pool, cmd->server);
+        if (!MP_HAS_INTERP(interp)) {
+	    return "Require handler is not currently supported in this context";
+	}
+
+        {
+            SV *ret_sv;
+            int count;
+            dSP;
+
+            ENTER;
+            SAVETMPS;
+            PUSHMARK(SP);
+            XPUSHs(sv_2mortal(modperl_ptr2obj(aTHX_ "Apache2::CmdParms", cmd)));
+            XPUSHs(sv_2mortal(newSVpv(require_line, 0)));
+            PUTBACK;
+            count = call_sv(ab->cb2, G_SCALAR);
+            SPAGAIN;
+
+            if (count == 1) {
+                ret_sv = POPs;
+                if (SvOK(ret_sv)) {
+                    char *tmp = SvPV_nolen(ret_sv);
+                    if (*tmp != '\0') {
+                        ret = apr_pstrdup(cmd->pool, tmp);
+                    }
+                }
+            }
+
+            PUTBACK;
+            FREETMPS;
+            LEAVE;
+        }
+
+        MP_INTERP_PUTBACK(interp, aTHX);
+    }
+    return ret;
+}
+
+static authn_status perl_check_password(request_rec *r, const char *user,
+                                        const char *password)
+{
+    authn_status ret = AUTH_DENIED;
+    int count;
+    AV *args = Nullav;
+    const char *key;
+    auth_callback *ab;
+    MP_dINTERPa(r, NULL, NULL);
+
+    if (global_authn_providers == NULL) {
+        MP_INTERP_PUTBACK(interp, aTHX);
+        return ret;
+    }
+
+    key = apr_table_get(r->notes, AUTHN_PROVIDER_NAME_NOTE);
+    ab = apr_hash_get(global_authn_providers, key,
+                                     APR_HASH_KEY_STRING);
+    if (ab == NULL || ab->cb1) {
+        MP_INTERP_PUTBACK(interp, aTHX);
+        return ret;
+    }
+
+    if (ab->cb1 == NULL) {
+        if (ab->cb1_handler == NULL) {
+            MP_INTERP_PUTBACK(interp, aTHX);
+            return ret;
+        }
+
+        modperl_handler_make_args(aTHX_ &args, "Apache2::RequestRec", r,
+                                  "PV", user,
+                                  "PV", password, NULL);
+        ret = modperl_callback(aTHX_ ab->cb1_handler, r->pool, r, r->server,
+                               args);
+        SvREFCNT_dec((SV*)args);
+        MP_INTERP_PUTBACK(interp, aTHX);
+        return ret;
+    }
+
+    {
+        dSP;
+        ENTER;
+        SAVETMPS;
+        PUSHMARK(SP);
+        XPUSHs(sv_2mortal(modperl_ptr2obj(aTHX_ "Apache2::RequestRec", r)));
+        XPUSHs(sv_2mortal(newSVpv(user, 0)));
+        XPUSHs(sv_2mortal(newSVpv(password, 0)));
+        PUTBACK;
+        count = call_sv(ab->cb1, G_SCALAR);
+        SPAGAIN;
+
+        if (count == 1) {
+            ret = (authn_status) POPi;
+        }
+
+        PUTBACK;
+        FREETMPS;
+        LEAVE;
+    }
+
+    MP_INTERP_PUTBACK(interp, aTHX);
+    return ret;
+}
+
+static authn_status perl_get_realm_hash(request_rec *r, const char *user,
+                                        const char *realm, char **rethash)
+{
+    authn_status ret = AUTH_USER_NOT_FOUND;
+    const char *key;
+    auth_callback *ab;
+
+    if (global_authn_providers == NULL ||
+        apr_hash_count(global_authn_providers) == 0)
+    {
+        return AUTH_GENERAL_ERROR;
+    }
+
+    key = apr_table_get(r->notes, AUTHN_PROVIDER_NAME_NOTE);
+    ab = apr_hash_get(global_authn_providers, key, APR_HASH_KEY_STRING);
+    if (ab == NULL || ab->cb2 == NULL) {
+        return AUTH_GENERAL_ERROR;
+    }
+
+    {
+        /* PerlAddAuthnProvider currently does not support an optional second
+         * handler, so ab->cb2 should always be NULL above and we will never get
+         * here. If such support is added in the future then this code will be
+         * reached. Unlike the PerlAddAuthzProvider case, the second handler here
+         * would be called during request_rec processing to obtain a password hash
+         * for the realm so there should be no problem grabbing an interpreter.
+         */
+        MP_dINTERPa(r, NULL, NULL);
+
+        {
+            SV* rh = sv_2mortal(newSVpv("", 0));
+            int count;
+            dSP;
+
+            ENTER;
+            SAVETMPS;
+            PUSHMARK(SP);
+            XPUSHs(sv_2mortal(modperl_ptr2obj(aTHX_ "Apache2::RequestRec", r)));
+            XPUSHs(sv_2mortal(newSVpv(user, 0)));
+            XPUSHs(sv_2mortal(newSVpv(realm, 0)));
+            XPUSHs(newRV_noinc(rh));
+            PUTBACK;
+            count = call_sv(ab->cb2, G_SCALAR);
+            SPAGAIN;
+
+            if (count == 1) {
+                const char *tmp = SvPV_nolen(rh);
+                ret = (authn_status) POPi;
+                if (*tmp != '\0') {
+                    *rethash = apr_pstrdup(r->pool, tmp);
+                }
+            }
+
+            PUTBACK;
+            FREETMPS;
+            LEAVE;
+        }
+
+        MP_INTERP_PUTBACK(interp, aTHX);
+    }
+
+    return ret;
+}
+
+static const authz_provider authz_perl_provider = { perl_check_authorization,
+                                                    perl_parse_require_line };
+
+static const authn_provider authn_perl_provider = { perl_check_password,
+                                                    perl_get_realm_hash };
+
+static apr_status_t register_auth_provider(apr_pool_t *pool,
+                                           const char *provider_group,
+                                           const char *provider_name,
+                                           const char *provider_version,
+                                           auth_callback *ab, int type)
+{
+    void *provider_ = NULL;
+
+    if (global_authz_providers == NULL) {
+        global_authz_providers = apr_hash_make(pool);
+        global_authn_providers = apr_hash_make(pool);
+        /* We have to use pre_cleanup here, otherwise this cleanup method
+         * would be called after another cleanup method which unloads
+         * mod_perl module.
+         */
+        apr_pool_pre_cleanup_register(pool, NULL,
+                                      cleanup_perl_global_providers);
+    }
+
+    if (strcmp(provider_group, AUTHZ_PROVIDER_GROUP) == 0) {
+        provider_ = (void *) &authz_perl_provider;
+        apr_hash_set(global_authz_providers, provider_name,
+                     APR_HASH_KEY_STRING, ab);
+    }
+    else {
+        provider_ = (void *) &authn_perl_provider;
+        apr_hash_set(global_authn_providers, provider_name,
+                     APR_HASH_KEY_STRING, ab);
+    }
+
+    return ap_register_auth_provider(pool, provider_group, provider_name,
+                                     provider_version, provider_, type);
+
+}
+
+apr_status_t modperl_register_auth_provider(apr_pool_t *pool,
+                                            const char *provider_group,
+                                            const char *provider_name,
+                                            const char *provider_version,
+                                            SV *callback1, SV *callback2,
+                                            int type)
+{
+    char *provider_name_dup;
+    auth_callback *ab = NULL;
+
+    provider_name_dup = apr_pstrdup(pool, provider_name);
+    ab = apr_pcalloc(pool, sizeof(auth_callback));
+    ab->cb1 = callback1;
+    ab->cb2 = callback2;
+
+    return register_auth_provider(pool, provider_group, provider_name_dup,
+                                  provider_version, ab, type);
+}
+
+apr_status_t modperl_register_auth_provider_name(apr_pool_t *pool,
+                                                 const char *provider_group,
+                                                 const char *provider_name,
+                                                 const char *provider_version,
+                                                 const char *callback1,
+                                                 const char *callback2,
+                                                 int type)
+{
+    char *provider_name_dup;
+    auth_callback *ab = NULL;
+
+    provider_name_dup = apr_pstrdup(pool, provider_name);
+    ab = apr_pcalloc(pool, sizeof(auth_callback));
+    ab->cb1_handler = modperl_handler_new(pool, callback1);
+    if (callback2) {
+        ab->cb2_handler = modperl_handler_new(pool, callback2);
+    }
+
+    return register_auth_provider(pool, provider_group, provider_name_dup,
+                                  provider_version, ab, type);
+}
+
+#endif /* httpd-2.4 */
+
+/*
+ * Local Variables:
+ * c-basic-offset: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/src/modules/perl/modperl_util.h mod_perl-2.0.8/src/modules/perl/modperl_util.h
--- mod_perl-2.0.8/src/modules/perl/modperl_util.h	2011-02-08 05:00:10.000000000 +0300
+++ mod_perl-2.0.8/src/modules/perl/modperl_util.h	2014-05-08 19:05:39.404038262 +0400
@@ -101,20 +101,8 @@
 apr_array_header_t *modperl_avrv2apr_array_header(pTHX_ apr_pool_t *p,
                                                   SV *avrv);
 void modperl_package_unload(pTHX_ const char *package);
-#if defined(MP_TRACE) && APR_HAS_THREADS
-#define MP_TRACEf_TID   "/tid 0x%lx"
-#define MP_TRACEv_TID   (unsigned long)apr_os_thread_current()
-#define MP_TRACEv_TID_  MP_TRACEv_TID,
-#define MP_TRACEv__TID  ,MP_TRACEv_TID
-#else
-#define MP_TRACEf_TID
-#define MP_TRACEv_TID
-#define MP_TRACEv_TID_
-#define MP_TRACEv__TID
-#endif /* APR_HAS_THREADS */
-
 #if defined(MP_TRACE) && defined(USE_ITHREADS)
-#define MP_TRACEf_PERLID   "/perl id 0x%lx"
+#define MP_TRACEf_PERLID   "perl id 0x%lx"
 #define MP_TRACEv_PERLID   (unsigned long)my_perl
 #define MP_TRACEv_PERLID_  MP_TRACEv_PERLID,
 #define MP_TRACEv__PERLID  ,MP_TRACEv_PERLID
@@ -146,9 +134,35 @@
 void modperl_restart_count_inc(server_rec *base_server);
 int  modperl_restart_count(void);
 
-SV *modperl_pnotes(pTHX_ HV **pnotes, SV *key, SV *val,
-                   request_rec *r, conn_rec *c);
+void modperl_pnotes_kill(void *data);
+
+SV *modperl_pnotes(pTHX_ modperl_pnotes_t *pnotes, SV *key, SV *val,
+                   apr_pool_t *pool );
 
 U16 *modperl_code_attrs(pTHX_ CV *cv);
 
+#if AP_SERVER_MAJORVERSION_NUMBER>2 || \
+    (AP_SERVER_MAJORVERSION_NUMBER == 2 && AP_SERVER_MINORVERSION_NUMBER>=3)
+apr_status_t
+modperl_register_auth_provider(apr_pool_t *pool, const char *provider_group,
+                               const char *provider_name,
+                               const char *provider_version, SV *callback1,
+                               SV *callback2, int type);
+
+apr_status_t
+modperl_register_auth_provider_name(apr_pool_t *pool,
+                                    const char *provider_group,
+                                    const char *provider_name,
+                                    const char *provider_version,
+                                    const char *callback1,
+                                    const char *callback2, int type);
+#endif
+
 #endif /* MODPERL_UTIL_H */
+
+/*
+ * Local Variables:
+ * c-basic-offset: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/Apache2/Access/Apache2__Access.h mod_perl-2.0.8/xs/Apache2/Access/Apache2__Access.h
--- mod_perl-2.0.8/xs/Apache2/Access/Apache2__Access.h	2011-02-08 05:00:11.000000000 +0300
+++ mod_perl-2.0.8/xs/Apache2/Access/Apache2__Access.h	2014-05-08 19:05:39.727704799 +0400
@@ -19,7 +19,12 @@
     AV *av;
     HV *hv;
     register int x;
-    const apr_array_header_t *reqs_arr = ap_requires(r);
+    const apr_array_header_t *reqs_arr = 
+#if AP_SERVER_MAJORVERSION_NUMBER>2 || AP_SERVER_MINORVERSION_NUMBER>=3
+        0;
+#else
+        ap_requires(r);
+#endif
     require_line *reqs;
 
     if (!reqs_arr) {
@@ -95,11 +100,18 @@
 const char *mpxs_Apache2__RequestRec_auth_type(pTHX_ request_rec *r,
                                               char *type)
 {
+    const char *ret = NULL;
+
     if (type) {
         mpxs_insert_auth_cfg(aTHX_ r, "AuthType", type);
     }
 
-    return ap_auth_type(r);
+    ret = ap_auth_type(r);
+    if (!ret) {
+        return "none";
+    }
+
+    return ret;
 }
 
 static MP_INLINE
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/Apache2/ConnectionUtil/Apache2__ConnectionUtil.h mod_perl-2.0.8/xs/Apache2/ConnectionUtil/Apache2__ConnectionUtil.h
--- mod_perl-2.0.8/xs/Apache2/ConnectionUtil/Apache2__ConnectionUtil.h	2011-02-08 05:00:11.000000000 +0300
+++ mod_perl-2.0.8/xs/Apache2/ConnectionUtil/Apache2__ConnectionUtil.h	2014-05-08 19:05:39.702126045 +0400
@@ -24,6 +24,27 @@
     if (!ccfg) {
         return &PL_sv_undef;
     }
-    
-    return modperl_pnotes(aTHX_ &ccfg->pnotes, key, val, NULL, c);
+
+    return modperl_pnotes(aTHX_ &ccfg->pnotes, key, val, c->pool);
 }
+
+static MP_INLINE
+void mpxs_Apache2__Connection_pnotes_kill(pTHX_ conn_rec *c)
+{
+    MP_dCCFG;
+
+    modperl_config_con_init(c, ccfg);
+
+    if (!ccfg) {
+        return;
+    }
+
+    modperl_pnotes_kill(&ccfg->pnotes);
+}
+
+/*
+ * Local Variables:
+ * c-basic-offset: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/Apache2/Filter/Apache2__Filter.h mod_perl-2.0.8/xs/Apache2/Filter/Apache2__Filter.h
--- mod_perl-2.0.8/xs/Apache2/Filter/Apache2__Filter.h	2012-07-20 03:57:39.000000000 +0400
+++ mod_perl-2.0.8/xs/Apache2/Filter/Apache2__Filter.h	2014-05-08 19:05:39.663811760 +0400
@@ -196,8 +196,9 @@
         }
 
 #ifdef USE_ITHREADS
-        if (!ctx->perl) {
-            ctx->perl = aTHX;
+        if (!ctx->interp) {
+            ctx->interp = modperl_thx_interp_get(aTHX);
+            MP_INTERP_REFCNT_inc(ctx->interp);
         }
 #endif
         ctx->data = SvREFCNT_inc(data);
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/Apache2/RequestUtil/Apache2__RequestUtil.h mod_perl-2.0.8/xs/Apache2/RequestUtil/Apache2__RequestUtil.h
--- mod_perl-2.0.8/xs/Apache2/RequestUtil/Apache2__RequestUtil.h	2012-07-20 03:57:39.000000000 +0400
+++ mod_perl-2.0.8/xs/Apache2/RequestUtil/Apache2__RequestUtil.h	2014-05-08 19:05:39.683340035 +0400
@@ -212,7 +212,19 @@
         return &PL_sv_undef;
     }
 
-    return modperl_pnotes(aTHX_ &rcfg->pnotes, key, val, r, NULL);
+    return modperl_pnotes(aTHX_ &rcfg->pnotes, key, val, r->pool);
+}
+
+static MP_INLINE
+void mpxs_Apache2__RequestRec_pnotes_kill(pTHX_ request_rec *r)
+{
+    MP_dRCFG;
+
+    if (!rcfg) {
+        return;
+    }
+
+    modperl_pnotes_kill(&rcfg->pnotes);
 }
 
 #define mpxs_Apache2__RequestRec_dir_config(r, key, sv_val) \
@@ -349,3 +361,61 @@
     apr_pool_cleanup_register(r->pool, r->pool, child_terminate,
                               apr_pool_cleanup_null);
 }
+
+
+
+static MP_INLINE
+apr_status_t mpxs_ap_register_auth_provider(pTHX_ I32 items, SV **MARK, SV **SP)
+{
+    apr_pool_t *pool;
+    const char *provider_group;
+    const char *provider_name;
+    const char *provider_version;
+    SV *callback1;
+    SV *callback2 = NULL;
+    int type;
+
+    if (items != 7)
+       Perl_croak(aTHX_ "pool, provider_group, provider_name, "
+                        "provider_version, callback1, callback2, type");
+
+    if (SvROK(*MARK) && sv_derived_from(*MARK, "APR::Pool")) {
+        IV tmp = SvIV((SV*)SvRV(*MARK));
+            if (tmp == 0) {
+                Perl_croak(aTHX_ "invalid pool object (already destroyed?)");
+            }
+        pool = INT2PTR(APR__Pool, tmp);
+    }
+    else {
+        Perl_croak(aTHX_ SvROK(*MARK) ?
+                       "pool is not of type APR::Pool" :
+                       "pool is not a blessed reference");
+        }
+
+    MARK++;
+    provider_group = (const char *)SvPV_nolen(*MARK);
+    MARK++;
+    provider_name = (const char *)SvPV_nolen(*MARK);
+    MARK++;
+    provider_version = (const char *)SvPV_nolen(*MARK);
+    MARK++;
+    callback1 = newSVsv(*MARK);
+    MARK++;
+    callback2 = NULL;
+    if (SvROK(*MARK)) {
+        callback2 = newSVsv(*MARK);
+    }
+    MARK++;
+    type = (int)SvIV(*MARK);
+
+    return modperl_register_auth_provider(pool, provider_group, provider_name,
+                                          provider_version, callback1,
+                                          callback2, type);
+}
+
+/*
+ * Local Variables:
+ * c-basic-offset: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/Apache2/Response/Apache2__Response.h mod_perl-2.0.8/xs/Apache2/Response/Apache2__Response.h
--- mod_perl-2.0.8/xs/Apache2/Response/Apache2__Response.h	2011-02-08 05:00:11.000000000 +0300
+++ mod_perl-2.0.8/xs/Apache2/Response/Apache2__Response.h	2014-05-08 19:05:39.706627462 +0400
@@ -39,3 +39,10 @@
     }
     ap_set_last_modified(r);
 }
+
+/*
+ * Local Variables:
+ * c-basic-offset: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/Apache2/ServerRec/Apache2__ServerRec.h mod_perl-2.0.8/xs/Apache2/ServerRec/Apache2__ServerRec.h
--- mod_perl-2.0.8/xs/Apache2/ServerRec/Apache2__ServerRec.h	1970-01-01 03:00:00.000000000 +0300
+++ mod_perl-2.0.8/xs/Apache2/ServerRec/Apache2__ServerRec.h	2014-05-08 19:05:39.721085665 +0400
@@ -0,0 +1,32 @@
+/* Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#if AP_SERVER_MAJORVERSION_NUMBER>2 || AP_SERVER_MINORVERSION_NUMBER>=3
+#define loglevel log.level
+
+static MP_INLINE
+int mpxs_Apache2__ServerRec_is_virtual(pTHX_ server_rec *s, SV *val)
+{
+    int retval = s->is_virtual;
+
+    if (val) {
+        s->is_virtual = SvIV(val);
+    }
+
+    return retval;
+}
+
+#endif
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/Apache2/ServerUtil/Apache2__ServerUtil.h mod_perl-2.0.8/xs/Apache2/ServerUtil/Apache2__ServerUtil.h
--- mod_perl-2.0.8/xs/Apache2/ServerUtil/Apache2__ServerUtil.h	2012-12-09 10:48:59.000000000 +0400
+++ mod_perl-2.0.8/xs/Apache2/ServerUtil/Apache2__ServerUtil.h	2014-05-08 19:05:39.736596101 +0400
@@ -205,3 +205,23 @@
     newCONSTSUB(PL_defstash, "Apache2::ServerUtil::get_server_built",
                 newSVpv(ap_get_server_built(), 0));
 }
+
+#if AP_SERVER_MAJORVERSION_NUMBER>2 || \
+    (AP_SERVER_MAJORVERSION_NUMBER == 2 && AP_SERVER_MINORVERSION_NUMBER>=3)
+static MP_INLINE
+int mpxs_Apache2__ServerRec_loglevel(pTHX_ server_rec *s, int loglevel)
+{
+    if (loglevel) {
+        s->log.level = loglevel;
+    }
+
+    return s->log.level;
+}
+#endif
+
+/*
+ * Local Variables:
+ * c-basic-offset: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/APR/APR/Makefile.PL mod_perl-2.0.8/xs/APR/APR/Makefile.PL
--- mod_perl-2.0.8/xs/APR/APR/Makefile.PL	2011-02-08 05:00:11.000000000 +0300
+++ mod_perl-2.0.8/xs/APR/APR/Makefile.PL	2014-05-08 19:05:39.482977451 +0400
@@ -37,7 +37,7 @@
     my $mp_apr_lib = $build->mp_apr_lib;
 
     if (CYGWIN) {
-        # For Cygwin compatibility, set $mp_apr_lib before the apru flags
+        # For Cygwin compatibility, set $mp_apr_lib before the apache libs
         $libs = qq{ $mp_apr_lib } . $libs;
     } else {
         $libs .= qq{ $mp_apr_lib };
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/APR/aprext/Makefile.PL mod_perl-2.0.8/xs/APR/aprext/Makefile.PL
--- mod_perl-2.0.8/xs/APR/aprext/Makefile.PL	2011-02-08 05:00:11.000000000 +0300
+++ mod_perl-2.0.8/xs/APR/aprext/Makefile.PL	2014-05-08 19:05:39.590507497 +0400
@@ -19,6 +19,8 @@
     $src{$cfile} = "$srcdir/$cfile";
 }
 
+push @obj, q{modperl_dummy.o};
+
 my @skip = qw(dynamic test);
 push @skip, q{static}
     unless (Apache2::Build::BUILD_APREXT);
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/APR/aprext/modperl_dummy.c mod_perl-2.0.8/xs/APR/aprext/modperl_dummy.c
--- mod_perl-2.0.8/xs/APR/aprext/modperl_dummy.c	1970-01-01 03:00:00.000000000 +0300
+++ mod_perl-2.0.8/xs/APR/aprext/modperl_dummy.c	2014-05-08 19:05:39.589144082 +0400
@@ -0,0 +1,51 @@
+/* Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "mod_perl.h"
+
+/* FIXME: To define extern perl_module to something so libaprext.lib can be
+ * linked without error when building against httpd-2.4+. (The symbol is
+ * referenced by modperl_apache_compat.h for httpd-2.4+, so must be defined
+ * somewhere in that case.)
+ */
+module AP_MODULE_DECLARE_DATA perl_module = {
+    STANDARD20_MODULE_STUFF,
+    NULL, /* dir config creater */
+    NULL,  /* dir merger --- default is to override */
+    NULL, /* server config */
+    NULL,  /* merge server config */
+    NULL,              /* table of config file commands       */
+    NULL,    /* register hooks */
+};
+
+/* FIXME: These functions are called from modperl_trace() in libaprext.lib
+ * but are normally defined in mod_perl.c which can't be included.
+ */
+
+int modperl_is_running(void)
+{
+    return 0;
+}
+
+int modperl_threads_started(void)
+{
+    return 0;
+}
+
+int modperl_threaded_mpm(void)
+{
+    return 0;
+}
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/APR/PerlIO/PerlIO.pm mod_perl-2.0.8/xs/APR/PerlIO/PerlIO.pm
--- mod_perl-2.0.8/xs/APR/PerlIO/PerlIO.pm	2011-02-08 05:00:11.000000000 +0300
+++ mod_perl-2.0.8/xs/APR/PerlIO/PerlIO.pm	2014-05-08 19:05:39.562959223 +0400
@@ -21,7 +22,7 @@
 
 # The PerlIO layer is available only since 5.8.0 (5.7.2@13534)
 use Config;
-use constant PERLIO_LAYERS_ARE_ENABLED => $Config{useperlio} && $] >= 5.00703;
+use constant PERLIO_LAYERS_ARE_ENABLED => $Config{useperlio} && $] >= 5.007003;
 
 use APR ();
 use APR::XSLoader ();
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/APR/Pool/APR__Pool.h mod_perl-2.0.8/xs/APR/Pool/APR__Pool.h
--- mod_perl-2.0.8/xs/APR/Pool/APR__Pool.h	2012-07-20 03:57:39.000000000 +0400
+++ mod_perl-2.0.8/xs/APR/Pool/APR__Pool.h	2014-05-08 19:05:39.461179641 +0400
@@ -77,6 +77,8 @@
          * there are no more references, in which case                  \
          * the interpreter will be putback into the mip                 \
          */                                                             \
+        MP_TRACE_i(MP_FUNC, "DO: calling interp_unselect(0x%lx)",       \
+                   acct->interp);					\
         (void)modperl_opt_interp_unselect(acct->interp);                \
     }                                                                   \
 } STMT_END
@@ -100,6 +102,8 @@
     if (modperl_opt_thx_interp_get) {                                   \
         if ((acct->interp = modperl_opt_thx_interp_get(aTHX))) {        \
             acct->interp->refcnt++;                                     \
+            MP_TRACE_i(MP_FUNC, "TO: (0x%lx)->refcnt incremented to %ld",   \
+                       acct->interp, acct->interp->refcnt);                 \
         }                                                               \
     }                                                                   \
 } STMT_END
@@ -313,6 +317,7 @@
          * there are no more references, in which case
          * the interpreter will be putback into the mip
          */
+        MP_TRACE_i(MP_FUNC, "calling interp_unselect(0x%lx)", cdata->interp);
         (void)modperl_opt_interp_unselect(cdata->interp);
     }
 #endif
@@ -344,6 +349,8 @@
     if (modperl_opt_thx_interp_get) {
         if ((data->interp = modperl_opt_thx_interp_get(data->perl))) {
             data->interp->refcnt++;
+            MP_TRACE_i(MP_FUNC, "(0x%lx)->refcnt incremented to %ld",
+                       data->interp, data->interp->refcnt);
         }
     }
 #endif
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/APR/Socket/APR__Socket.h mod_perl-2.0.8/xs/APR/Socket/APR__Socket.h
--- mod_perl-2.0.8/xs/APR/Socket/APR__Socket.h	2011-02-08 05:00:11.000000000 +0300
+++ mod_perl-2.0.8/xs/APR/Socket/APR__Socket.h	2014-05-08 19:05:39.526166207 +0400
@@ -118,10 +118,17 @@
 }
 
 #ifndef WIN32
-static MP_INLINE int mpxs_APR__Socket_fileno(pTHX_ apr_socket_t *sock)
+static MP_INLINE int mpxs_APR__Socket_fileno(pTHX_ apr_socket_t *socket)
 {
     apr_os_sock_t s;
-    apr_os_sock_get(&s, sock);
+    apr_os_sock_get(&s, socket);
     return s;
 }
 #endif
+
+/*
+ * Local Variables:
+ * c-basic-offset: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/maps/apache2_functions.map mod_perl-2.0.8/xs/maps/apache2_functions.map
--- mod_perl-2.0.8/xs/maps/apache2_functions.map	2011-04-19 11:46:42.000000000 +0400
+++ mod_perl-2.0.8/xs/maps/apache2_functions.map	2014-05-08 19:05:39.854937486 +0400
@@ -37,11 +37,26 @@
 
 MODULE=Apache2::RequestUtil
  ap_get_status_line
+#_if_ do {                                                                  \
+          Apache2::Build->build_config                                      \
+	      ->httpd_version =~ /^(\d+)\.(\d+)\.(\d+)/                     \
+          ? ($1*1000+$2)*1000+$3                                            \
+          : die "Cannot get httpd version";                                 \
+      } > 2003000
+ ap_register_auth_provider | mpxs_ | ...
+#_end_
 
 MODULE=Apache2::RequestUtil   PACKAGE=guess
  ap_psignature | | r, prefix
 >ap_finalize_request_protocol
+#_if_ do {                                                                  \
+          Apache2::Build->build_config                                      \
+	      ->httpd_version =~ /^(\d+)\.(\d+)\.(\d+)/                     \
+          ? ($1*1000+$2)*1000+$3                                            \
+          : die "Cannot get httpd version";                                 \
+      } < 2003000
  ap_default_type
+#_end_
  ap_get_server_name
  ap_get_server_port
 !ap_content_type_tolower
@@ -161,6 +176,14 @@
  int:DEFINE_method_register | | server_rec *:s, const char *:methname
 ~add_version_component
  void:DEFINE_add_version_component | | server_rec *:s, const char *:component
+#_if_ do {                                                                  \
+          Apache2::Build->build_config                                      \
+	      ->httpd_version =~ /^(\d+)\.(\d+)\.(\d+)/                     \
+          ? ($1*1000+$2)*1000+$3                                            \
+          : die "Cannot get httpd version";                                 \
+      } > 2003000
+ mpxs_Apache2__ServerRec_loglevel | | server_rec *:s, loglevel=NULL
+#_end_
 
 MODULE=Apache2::ServerUtil   PACKAGE=Apache2::ServerUtil
  ap_exists_config_define
@@ -533,3 +556,13 @@
 ?ap_mpm_set_pidfile
 ?ap_mpm_set_scoreboard
 ?ap_listen_pre_config
+
+#_if_ do {                                                                  \
+          Apache2::Build->build_config                                      \
+	      ->httpd_version =~ /^(\d+)\.(\d+)\.(\d+)/                     \
+          ? ($1*1000+$2)*1000+$3                                            \
+          : die "Cannot get httpd version";                                 \
+      } > 2003000
+MODULE=Apache2::Provider
+ ap_register_provider
+#_end_
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/maps/apache2_structures.map mod_perl-2.0.8/xs/maps/apache2_structures.map
--- mod_perl-2.0.8/xs/maps/apache2_structures.map	2011-02-08 05:00:11.000000000 +0300
+++ mod_perl-2.0.8/xs/maps/apache2_structures.map	2014-05-08 19:05:39.858867644 +0400
@@ -2,6 +2,20 @@
 
 # for mapping see %ModPerl::MapUtil::disabled_map in
 # lib/ModPerl/MapUtil.pm
+# the mapping happens in lib/ModPerl/StructureMap.pm: sub parse
+#    '<' => 'auto-generated but gives only a read-only access'
+#    '&' => 'RDWR accessor to a char* field, supporting undef arg'
+#    '$' => 'RONLY accessor, with WRITE accessor before child_init'
+#    '%' => like $, but makes sure that for the write accessor the
+#           original perl scalar can change or go away w/o affecting
+#           the object
+# my %disabled_map = (
+#     '!' => 'disabled or not yet implemented',
+#     '~' => 'implemented but not auto-generated',
+#     '-' => 'likely never be available to Perl',
+#     '>' => '"private" to apache',
+#     '?' => 'unclassified',
+# );
 
 IGNORE: ap_LINK_ ap_filter_func ap_bucket_error ap_listen_rec core_net_rec
 
@@ -69,6 +83,15 @@
    proto_output_filters
    proto_input_filters
 ?  eos_sent
+#_if_ do {                                                                  \
+          Apache2::Build->build_config                                      \
+	      ->httpd_version =~ /^(\d+)\.(\d+)\.(\d+)/                     \
+          ? ($1*1000+$2)*1000+$3                                            \
+          : die "Cannot get httpd version";                                 \
+      } > 2003000
+<  useragent_addr
+   useragent_ip
+#_end_
 </request_rec>
 
 <server_rec>
@@ -78,11 +101,28 @@
 -  defn_line_number
 %  server_admin
 %  server_hostname
+#_if_ do {                                                                  \
+          Apache2::Build->build_config                                      \
+	      ->httpd_version =~ /^(\d+)\.(\d+)\.(\d+)/                     \
+          ? ($1*1000+$2)*1000+$3                                            \
+          : die "Cannot get httpd version";                                 \
+      } > 2003000
+%  server_scheme
+#_end_
 $  port
 %  error_fname
 $  error_log
 $  loglevel
+#_if_ do {                                                                  \
+          Apache2::Build->build_config                                      \
+	      ->httpd_version =~ /^(\d+)\.(\d+)\.(\d+)/                     \
+          ? ($1*1000+$2)*1000+$3                                            \
+          : die "Cannot get httpd version";                                 \
+      } > 2003000
+~  is_virtual
+#_else_
 <  is_virtual
+#_end_
 <  module_config
 <  lookup_defaults
 <  addrs
@@ -97,6 +137,14 @@
 $  limit_req_line
 $  limit_req_fieldsize
 $  limit_req_fields
+#_if_ do {                                                                  \
+          Apache2::Build->build_config                                      \
+	      ->httpd_version =~ /^(\d+)\.(\d+)\.(\d+)/                     \
+          ? ($1*1000+$2)*1000+$3                                            \
+          : die "Cannot get httpd version";                                 \
+      } > 2003000
+   context
+#_end_
 </server_rec>
 
 <conn_rec>
@@ -104,6 +152,15 @@
 <  base_server
 >  vhost_lookup_data
 <  local_addr
+#_if_ do {                                                                  \
+          Apache2::Build->build_config                                      \
+	      ->httpd_version =~ /^(\d+)\.(\d+)\.(\d+)/                     \
+          ? ($1*1000+$2)*1000+$3                                            \
+          : die "Cannot get httpd version";                                 \
+      } > 2003000
+<  client_addr
+   client_ip
+#_end_
 <  local_ip
 <  local_host
 <  remote_addr
@@ -121,6 +178,15 @@
    output_filters
 <  sbh
 <  bucket_alloc
+#_if_ do {                                                                  \
+          Apache2::Build->build_config                                      \
+	      ->httpd_version =~ /^(\d+)\.(\d+)\.(\d+)/                     \
+          ? ($1*1000+$2)*1000+$3                                            \
+          : die "Cannot get httpd version";                                 \
+      } > 2003000
+<  log
+<  log_id
+#_end_
 </conn_rec>
 
 !<server_addr_rec>
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/maps/modperl_functions.map mod_perl-2.0.8/xs/maps/modperl_functions.map
--- mod_perl-2.0.8/xs/maps/modperl_functions.map	2012-07-20 03:57:39.000000000 +0400
+++ mod_perl-2.0.8/xs/maps/modperl_functions.map	2014-05-08 19:05:39.853473603 +0400
@@ -22,6 +22,16 @@
  mpxs_Apache2__RequestRec_handler | | ...
  mpxs_Apache2__RequestRec_content_languages | | r, languages=(SV *)NULL
 
+#_if_ do {                                                                  \
+          Apache2::Build->build_config                                      \
+	      ->httpd_version =~ /^(\d+)\.(\d+)\.(\d+)/                     \
+          ? ($1*1000+$2)*1000+$3                                            \
+          : die "Cannot get httpd version";                                 \
+      } > 2003000
+MODULE=Apache2::ServerRec   PACKAGE=Apache2::ServerRec
+ mpxs_Apache2__ServerRec_is_virtual       | | server_rec *:s, val=(SV *)NULL
+#_end_
+
 MODULE=Apache2::RequestUtil   PACKAGE=guess
  mpxs_Apache2__RequestRec_push_handlers
  mpxs_Apache2__RequestRec_set_handlers
@@ -30,6 +40,7 @@
  mpxs_Apache2__RequestRec_location
  mpxs_Apache2__RequestRec_as_string
  mpxs_Apache2__RequestRec_pnotes | | r, key=(SV *)NULL, val=(SV *)NULL
+ mpxs_Apache2__RequestRec_pnotes_kill | | r
  mpxs_Apache2__RequestRec_add_config | | r, lines, override=MP_HTTPD_OVERRIDE_HTACCESS, path=NULL, override_options=MP_HTTPD_OVERRIDE_OPTS_UNSET
  mpxs_Apache2__RequestRec_document_root | | r, new_root=(SV *)NULL
  mpxs_Apache2__RequestRec_child_terminate
@@ -95,6 +106,7 @@
 
 MODULE=Apache2::ConnectionUtil   PACKAGE=guess
  mpxs_Apache2__Connection_pnotes | | c, key=(SV *)NULL, val=(SV *)NULL
+ mpxs_Apache2__Connection_pnotes_kill | | c
 
 MODULE=Apache2::Filter
  modperl_filter_attributes | MPXS_ | ... | MODIFY_CODE_ATTRIBUTES
@@ -162,3 +174,10 @@
 
 MODULE=Apache2::Access   PACKAGE=guess
  mpxs_Apache2__RequestRec_allow_override_opts
+
+#_if_ do {use Apache2::Build; Apache2::Build::PERL_HAS_ITHREADS}
+
+MODULE=ModPerl::Interpreter
+ mpxs_ModPerl__Interpreter_current | | class=Nullsv
+
+#_end_
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/maps/modperl_structures.map mod_perl-2.0.8/xs/maps/modperl_structures.map
--- mod_perl-2.0.8/xs/maps/modperl_structures.map	1970-01-01 03:00:00.000000000 +0300
+++ mod_perl-2.0.8/xs/maps/modperl_structures.map	2014-05-08 19:05:39.857469478 +0400
@@ -0,0 +1,44 @@
+##########  ModPerl structures  ##########
+
+# for mapping see %ModPerl::MapUtil::disabled_map in
+# lib/ModPerl/MapUtil.pm
+
+#_if_ do {use Apache2::Build; Apache2::Build::PERL_HAS_ITHREADS}
+
+<modperl_interp_t>
+<  mip
+<  perl
+<  num_requests
+<  flags
+-  ccfg
+<  refcnt
+-  tid
+</modperl_interp_t>
+
+<modperl_interp_pool_t>
+<  server
+<  tipool
+<  parent
+</modperl_interp_pool_t>
+
+<modperl_tipool_t>
+-  tiplock
+-  available
+-  idle
+-  busy
+<  in_use
+<  size
+-  data
+<  cfg
+-  func
+</modperl_tipool_t>
+
+<modperl_tipool_config_t>
+<  start
+<  min_spare
+<  max_spare
+<  max
+<  max_requests
+</modperl_tipool_config_t>
+
+#_end_
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/maps/modperl_types.map mod_perl-2.0.8/xs/maps/modperl_types.map
--- mod_perl-2.0.8/xs/maps/modperl_types.map	2011-02-08 05:00:11.000000000 +0300
+++ mod_perl-2.0.8/xs/maps/modperl_types.map	2014-05-08 19:05:39.861555225 +0400
@@ -1,12 +1,24 @@
 ##########  mod_perl types  ##########
 
-struct modperl_filter_t | Apache2::OutputFilter
+struct modperl_filter_t        | Apache2::OutputFilter
+
+#_if_ do {use Apache2::Build; Apache2::Build::PERL_HAS_ITHREADS}
+
+struct modperl_interp_t        | ModPerl::Interpreter
+struct modperl_interp_pool_t   | ModPerl::InterpPool
+struct modperl_tipool_t        | ModPerl::TiPool
+struct modperl_tipool_config_t | ModPerl::TiPoolConfig
+PerlInterpreter *              | IV
+
+#_end_
 
 ##########  Perl types  ##########
 
 SV *  | SV
 I32   | IV
 I32 * | IV
+U16   | UV
+U16 * | UV
 U32   | UV
 U32 * | UV
 
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/ModPerl/Const/Const.xs mod_perl-2.0.8/xs/ModPerl/Const/Const.xs
--- mod_perl-2.0.8/xs/ModPerl/Const/Const.xs	2011-02-08 05:00:11.000000000 +0300
+++ mod_perl-2.0.8/xs/ModPerl/Const/Const.xs	2014-05-08 19:05:39.613469130 +0400
@@ -17,6 +17,23 @@
 #include "mod_perl.h"
 #include "modperl_const.h"
 
+#ifndef WIN32
+/* FIXME: To define extern perl_module to something so Const.so can be
+ * loaded later. Without this code, loading Const.so fails with 
+ * undefined_symbol: perl_module. (Windows does not need this since it
+ * explicitly links against mod_perl.lib anyway.)
+ */
+module AP_MODULE_DECLARE_DATA perl_module = {
+    STANDARD20_MODULE_STUFF,
+    NULL, /* dir config creater */
+    NULL,  /* dir merger --- default is to override */
+    NULL, /* server config */
+    NULL,  /* merge server config */
+    NULL,              /* table of config file commands       */
+    NULL,    /* register hooks */
+};
+#endif
+
 MODULE = ModPerl::Const    PACKAGE = ModPerl::Const
 
 PROTOTYPES: disable
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/ModPerl/Interpreter/ModPerl__Interpreter.h mod_perl-2.0.8/xs/ModPerl/Interpreter/ModPerl__Interpreter.h
--- mod_perl-2.0.8/xs/ModPerl/Interpreter/ModPerl__Interpreter.h	1970-01-01 03:00:00.000000000 +0300
+++ mod_perl-2.0.8/xs/ModPerl/Interpreter/ModPerl__Interpreter.h	2014-05-08 19:05:39.605142028 +0400
@@ -0,0 +1,28 @@
+/* Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+static MP_INLINE
+modperl_interp_t *mpxs_ModPerl__Interpreter_current(pTHX_ SV *class)
+{
+    return modperl_thx_interp_get(aTHX);
+}
+
+/*
+ * Local Variables:
+ * c-basic-offset: 4
+ * indent-tabs-mode: nil
+ * End:
+ */
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/tables/current/Apache2/ConstantsTable.pm mod_perl-2.0.8/xs/tables/current/Apache2/ConstantsTable.pm
--- mod_perl-2.0.8/xs/tables/current/Apache2/ConstantsTable.pm	2012-12-09 10:48:59.000000000 +0400
+++ mod_perl-2.0.8/xs/tables/current/Apache2/ConstantsTable.pm	2014-05-08 19:05:39.784689548 +0400
@@ -53,7 +54,6 @@
       'OPT_EXECCGI',
       'OPT_UNSET',
       'OPT_INCNOEXEC',
-      'OPT_INC_WITH_EXEC',
       'OPT_SYM_OWNER',
       'OPT_MULTI',
       'OPT_ALL'
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/tables/current/Apache2/StructureTable.pm mod_perl-2.0.8/xs/tables/current/Apache2/StructureTable.pm
--- mod_perl-2.0.8/xs/tables/current/Apache2/StructureTable.pm	2011-02-08 05:00:11.000000000 +0300
+++ mod_perl-2.0.8/xs/tables/current/Apache2/StructureTable.pm	2014-05-08 19:05:39.779003942 +0400
@@ -3333,6 +3334,126 @@
         'name' => 'suexec_enabled'
       }
     ]
+  },
+  {
+    'type' => 'modperl_interp_t',
+    'elts' => [
+      {
+        'type' => 'modperl_interp_pool_t *',
+        'name' => 'mip'
+      },
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'perl'
+      },
+      {
+        'type' => 'int',
+        'name' => 'num_requests'
+      },
+      {
+        'type' => 'U8',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'modperl_config_con_t *',
+        'name' => 'ccfg'
+      },
+      {
+        'type' => 'int',
+        'name' => 'refcnt'
+      },
+      {
+        'type' => 'unsigned long',
+        'name' => 'tid'
+      }
+    ]
+  },
+  {
+    'type' => 'modperl_interp_pool_t',
+    'elts' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 'server'
+      },
+      {
+        'type' => 'modperl_tipool_t *',
+        'name' => 'tipool'
+      },
+      {
+        'type' => 'modperl_tipool_config_t *',
+        'name' => 'tipool_cfg'
+      },
+      {
+        'type' => 'modperl_interp_t *',
+        'name' => 'parent'
+      }
+    ]
+  },
+  {
+    'type' => 'modperl_tipool_t',
+    'elts' => [
+      {
+        'type' => 'perl_mutex',
+        'name' => 'tiplock'
+      },
+      {
+        'type' => 'perl_cond',
+        'name' => 'available'
+      },
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'idle'
+      },
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'busy'
+      },
+      {
+        'type' => 'int',
+        'name' => 'in_use'
+      },
+      {
+        'type' => 'int',
+        'name' => 'size'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'modperl_tipool_config_t *',
+        'name' => 'cfg'
+      },
+      {
+        'type' => 'modperl_tipool_vtbl_t *',
+        'name' => 'func'
+      }
+    ]
+  },
+  {
+    'type' => 'modperl_tipool_config_t',
+    'elts' => [
+      {
+        'type' => 'int',
+        'name' => 'start'
+      },
+      {
+        'type' => 'int',
+        'name' => 'min_spare'
+      },
+      {
+        'type' => 'int',
+        'name' => 'max_spare'
+      },
+      {
+        'type' => 'int',
+        'name' => 'max'
+      },
+      {
+        'type' => 'int',
+        'name' => 'max_requests'
+      }
+    ]
   }
 ];
 
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/tables/current/ModPerl/FunctionTable.pm mod_perl-2.0.8/xs/tables/current/ModPerl/FunctionTable.pm
--- mod_perl-2.0.8/xs/tables/current/ModPerl/FunctionTable.pm	2011-02-08 05:00:11.000000000 +0300
+++ mod_perl-2.0.8/xs/tables/current/ModPerl/FunctionTable.pm	2014-05-08 19:05:39.762413159 +0400
@@ -4424,19 +4425,6 @@
     ]
   },
   {
-    'return_type' => 'char *',
-    'name' => 'modperl_pid_tid',
-    'attr' => [
-      '__inline__'
-    ],
-    'args' => [
-      {
-        'type' => 'apr_pool_t *',
-        'name' => 'p'
-      }
-    ]
-  },
-  {
     'return_type' => 'SV *',
     'name' => 'modperl_pnotes',
     'args' => [
@@ -4460,7 +4448,17 @@
         'type' => 'request_rec *',
         'name' => 'r'
       }
-    ]    
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_pnotes_kill',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'cl_data'
+      }
+    ]
   },
   {
     'return_type' => 'int',
@@ -6321,6 +6319,20 @@
     ]
   },
   {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__Connection_pnotes_kill',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
     'return_type' => 'SV *',
     'name' => 'mpxs_Apache2__Directive_as_hash',
     'attr' => [
@@ -7128,6 +7140,20 @@
     ]
   },
   {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__RequestRec_pnotes_kill',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
     'return_type' => 'SV *',
     'name' => 'mpxs_Apache2__RequestRec_print',
     'args' => [
@@ -8255,6 +8281,24 @@
         'name' => 'func'
       }
     ]
+  },
+  {
+    'return_type' => 'modperl_interp_t *',
+    'name' => 'mpxs_ModPerl__Interpreter_current',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'class'
+      }
+    ]
   }
 ];
 
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/tables/current24/Apache2/ConstantsTable.pm mod_perl-2.0.8/xs/tables/current24/Apache2/ConstantsTable.pm
--- mod_perl-2.0.8/xs/tables/current24/Apache2/ConstantsTable.pm	1970-01-01 03:00:00.000000000 +0300
+++ mod_perl-2.0.8/xs/tables/current24/Apache2/ConstantsTable.pm	2014-05-08 19:05:39.819729170 +0400
@@ -0,0 +1,545 @@
+package Apache2::ConstantsTable;
+
+# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+# ! WARNING: generated by Apache2::ParseSource/0.02
+# !          Mon Jul  1 12:38:09 2013
+# !          do NOT edit, any changes will be lost !
+# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+
+$Apache2::ConstantsTable = {
+  'ModPerl' => {
+    'common' => [
+      'MODPERL_RC_EXIT'
+    ]
+  },
+  'Apache2::Const' => {
+    'types' => [
+      'DIR_MAGIC_TYPE'
+    ],
+    'satisfy' => [
+      'SATISFY_ALL',
+      'SATISFY_ANY',
+      'SATISFY_NOSPEC'
+    ],
+    'remotehost' => [
+      'REMOTE_HOST',
+      'REMOTE_NAME',
+      'REMOTE_NOLOOKUP',
+      'REMOTE_DOUBLE_REV'
+    ],
+    'proxy' => [
+      'PROXYREQ_NONE',
+      'PROXYREQ_PROXY',
+      'PROXYREQ_REVERSE',
+      'PROXYREQ_RESPONSE'
+    ],
+    'platform' => [
+      'LF',
+      'CR',
+      'CRLF',
+      'CRLF_ASCII'
+    ],
+    'override' => [
+      'OR_NONE',
+      'OR_LIMIT',
+      'OR_OPTIONS',
+      'OR_FILEINFO',
+      'OR_AUTHCFG',
+      'OR_INDEXES',
+      'OR_UNSET',
+      'ACCESS_CONF',
+      'RSRC_CONF',
+      'EXEC_ON_READ',
+      'OR_ALL'
+    ],
+    'options' => [
+      'OPT_NONE',
+      'OPT_INDEXES',
+      'OPT_INCLUDES',
+      'OPT_SYM_LINKS',
+      'OPT_EXECCGI',
+      'OPT_UNSET',
+      'OPT_INC_WITH_EXEC',
+      'OPT_SYM_OWNER',
+      'OPT_MULTI',
+      'OPT_ALL'
+    ],
+    'mpmq' => [
+      'AP_MPMQ_NOT_SUPPORTED',
+      'AP_MPMQ_STATIC',
+      'AP_MPMQ_DYNAMIC',
+      'AP_MPMQ_STARTING',
+      'AP_MPMQ_RUNNING',
+      'AP_MPMQ_STOPPING',
+      'AP_MPMQ_MAX_DAEMON_USED',
+      'AP_MPMQ_IS_THREADED',
+      'AP_MPMQ_IS_FORKED',
+      'AP_MPMQ_HARD_LIMIT_DAEMONS',
+      'AP_MPMQ_HARD_LIMIT_THREADS',
+      'AP_MPMQ_MAX_THREADS',
+      'AP_MPMQ_MIN_SPARE_DAEMONS',
+      'AP_MPMQ_MIN_SPARE_THREADS',
+      'AP_MPMQ_MAX_SPARE_DAEMONS',
+      'AP_MPMQ_MAX_SPARE_THREADS',
+      'AP_MPMQ_MAX_REQUESTS_DAEMON',
+      'AP_MPMQ_MAX_DAEMONS',
+      'AP_MPMQ_MPM_STATE',
+      'AP_MPMQ_IS_ASYNC',
+      'AP_MPMQ_GENERATION',
+      'AP_MPMQ_HAS_SERF'
+    ],
+    'methods' => [
+      'M_GET',
+      'M_PUT',
+      'M_POST',
+      'M_DELETE',
+      'M_CONNECT',
+      'M_OPTIONS',
+      'M_TRACE',
+      'M_PATCH',
+      'M_PROPFIND',
+      'M_PROPPATCH',
+      'M_MKCOL',
+      'M_COPY',
+      'M_MOVE',
+      'M_LOCK',
+      'M_UNLOCK',
+      'M_VERSION_CONTROL',
+      'M_CHECKOUT',
+      'M_UNCHECKOUT',
+      'M_CHECKIN',
+      'M_UPDATE',
+      'M_LABEL',
+      'M_REPORT',
+      'M_MKWORKSPACE',
+      'M_MKACTIVITY',
+      'M_BASELINE_CONTROL',
+      'M_MERGE',
+      'M_INVALID',
+      'METHODS'
+    ],
+    'log' => [
+      'APLOG_EMERG',
+      'APLOG_ALERT',
+      'APLOG_CRIT',
+      'APLOG_ERR',
+      'APLOG_WARNING',
+      'APLOG_NOTICE',
+      'APLOG_INFO',
+      'APLOG_DEBUG',
+      'APLOG_TRACE1',
+      'APLOG_TRACE2',
+      'APLOG_TRACE3',
+      'APLOG_TRACE4',
+      'APLOG_TRACE5',
+      'APLOG_TRACE6',
+      'APLOG_TRACE7',
+      'APLOG_TRACE8',
+      'APLOG_LEVELMASK',
+      'APLOG_TOCLIENT',
+      'APLOG_STARTUP',
+      'APLOG_NO_MODULE',
+      'APLOG_MODULE_INDEX'
+    ],
+    'input_mode' => [
+      'AP_MODE_READBYTES',
+      'AP_MODE_GETLINE',
+      'AP_MODE_EATCRLF',
+      'AP_MODE_SPECULATIVE',
+      'AP_MODE_EXHAUSTIVE',
+      'AP_MODE_INIT'
+    ],
+    'http' => [
+      'HTTP_CONTINUE',
+      'HTTP_SWITCHING_PROTOCOLS',
+      'HTTP_PROCESSING',
+      'HTTP_OK',
+      'HTTP_CREATED',
+      'HTTP_ACCEPTED',
+      'HTTP_NON_AUTHORITATIVE',
+      'HTTP_NO_CONTENT',
+      'HTTP_RESET_CONTENT',
+      'HTTP_PARTIAL_CONTENT',
+      'HTTP_MULTI_STATUS',
+      'HTTP_ALREADY_REPORTED',
+      'HTTP_IM_USED',
+      'HTTP_MULTIPLE_CHOICES',
+      'HTTP_MOVED_PERMANENTLY',
+      'HTTP_MOVED_TEMPORARILY',
+      'HTTP_SEE_OTHER',
+      'HTTP_NOT_MODIFIED',
+      'HTTP_USE_PROXY',
+      'HTTP_TEMPORARY_REDIRECT',
+      'HTTP_PERMANENT_REDIRECT',
+      'HTTP_BAD_REQUEST',
+      'HTTP_UNAUTHORIZED',
+      'HTTP_PAYMENT_REQUIRED',
+      'HTTP_FORBIDDEN',
+      'HTTP_NOT_FOUND',
+      'HTTP_METHOD_NOT_ALLOWED',
+      'HTTP_NOT_ACCEPTABLE',
+      'HTTP_PROXY_AUTHENTICATION_REQUIRED',
+      'HTTP_REQUEST_TIME_OUT',
+      'HTTP_CONFLICT',
+      'HTTP_GONE',
+      'HTTP_LENGTH_REQUIRED',
+      'HTTP_PRECONDITION_FAILED',
+      'HTTP_REQUEST_ENTITY_TOO_LARGE',
+      'HTTP_REQUEST_URI_TOO_LARGE',
+      'HTTP_UNSUPPORTED_MEDIA_TYPE',
+      'HTTP_RANGE_NOT_SATISFIABLE',
+      'HTTP_EXPECTATION_FAILED',
+      'HTTP_UNPROCESSABLE_ENTITY',
+      'HTTP_LOCKED',
+      'HTTP_FAILED_DEPENDENCY',
+      'HTTP_UPGRADE_REQUIRED',
+      'HTTP_PRECONDITION_REQUIRED',
+      'HTTP_TOO_MANY_REQUESTS',
+      'HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE',
+      'HTTP_INTERNAL_SERVER_ERROR',
+      'HTTP_NOT_IMPLEMENTED',
+      'HTTP_BAD_GATEWAY',
+      'HTTP_SERVICE_UNAVAILABLE',
+      'HTTP_GATEWAY_TIME_OUT',
+      'HTTP_VARIANT_ALSO_VARIES',
+      'HTTP_INSUFFICIENT_STORAGE',
+      'HTTP_LOOP_DETECTED',
+      'HTTP_NOT_EXTENDED',
+      'HTTP_NETWORK_AUTHENTICATION_REQUIRED'
+    ],
+    'filter_type' => [
+      'AP_FTYPE_RESOURCE',
+      'AP_FTYPE_CONTENT_SET',
+      'AP_FTYPE_PROTOCOL',
+      'AP_FTYPE_TRANSCODE',
+      'AP_FTYPE_CONNECTION',
+      'AP_FTYPE_NETWORK'
+    ],
+    'context' => [
+      'NOT_IN_VIRTUALHOST',
+      'NOT_IN_LIMIT',
+      'NOT_IN_DIRECTORY',
+      'NOT_IN_LOCATION',
+      'NOT_IN_FILES',
+      'NOT_IN_HTACCESS',
+      'NOT_IN_DIR_LOC_FILE',
+      'GLOBAL_ONLY'
+    ],
+    'conn_keepalive' => [
+      'AP_CONN_UNKNOWN',
+      'AP_CONN_CLOSE',
+      'AP_CONN_KEEPALIVE'
+    ],
+    'config' => [
+      'DECLINE_CMD'
+    ],
+    'common' => [
+      'OK',
+      'DECLINED',
+      'DONE',
+      'NOT_FOUND',
+      'FORBIDDEN',
+      'AUTH_REQUIRED',
+      'SERVER_ERROR',
+      'REDIRECT'
+    ],
+    'cmd_how' => [
+      'RAW_ARGS',
+      'TAKE1',
+      'TAKE2',
+      'ITERATE',
+      'ITERATE2',
+      'FLAG',
+      'NO_ARGS',
+      'TAKE12',
+      'TAKE3',
+      'TAKE23',
+      'TAKE123',
+      'TAKE13',
+      'TAKE_ARGV'
+    ],
+    'authz_status' => [
+      'AUTHZ_DENIED',
+      'AUTHZ_GRANTED',
+      'AUTHZ_NEUTRAL',
+      'AUTHZ_GENERAL_ERROR',
+      'AUTHZ_DENIED_NO_USER'
+    ],
+    'authn_status' => [
+      'AUTH_DENIED',
+      'AUTH_GRANTED',
+      'AUTH_USER_FOUND',
+      'AUTH_USER_NOT_FOUND',
+      'AUTH_GENERAL_ERROR'
+    ],
+    'auth' => [
+      'AUTHN_PROVIDER_GROUP',
+      'AUTHZ_PROVIDER_GROUP',
+      'AUTHN_PROVIDER_VERSION',
+      'AUTHZ_PROVIDER_VERSION',
+      'AUTHN_DEFAULT_PROVIDER',
+      'AUTHN_PROVIDER_NAME_NOTE',
+      'AUTHZ_PROVIDER_NAME_NOTE',
+      'AUTHN_PREFIX',
+      'AUTHZ_PREFIX',
+      'AP_AUTH_INTERNAL_PER_URI',
+      'AP_AUTH_INTERNAL_PER_CONF',
+      'AP_AUTH_INTERNAL_MASK'
+    ]
+  },
+  'APR::Const' => {
+    'uri' => [
+      'APR_URI_FTP_DEFAULT_PORT',
+      'APR_URI_SSH_DEFAULT_PORT',
+      'APR_URI_TELNET_DEFAULT_PORT',
+      'APR_URI_GOPHER_DEFAULT_PORT',
+      'APR_URI_HTTP_DEFAULT_PORT',
+      'APR_URI_POP_DEFAULT_PORT',
+      'APR_URI_NNTP_DEFAULT_PORT',
+      'APR_URI_IMAP_DEFAULT_PORT',
+      'APR_URI_PROSPERO_DEFAULT_PORT',
+      'APR_URI_WAIS_DEFAULT_PORT',
+      'APR_URI_LDAP_DEFAULT_PORT',
+      'APR_URI_HTTPS_DEFAULT_PORT',
+      'APR_URI_RTSP_DEFAULT_PORT',
+      'APR_URI_SNEWS_DEFAULT_PORT',
+      'APR_URI_ACAP_DEFAULT_PORT',
+      'APR_URI_NFS_DEFAULT_PORT',
+      'APR_URI_TIP_DEFAULT_PORT',
+      'APR_URI_SIP_DEFAULT_PORT',
+      'APR_URI_UNP_OMITSITEPART',
+      'APR_URI_UNP_OMITUSER',
+      'APR_URI_UNP_OMITPASSWORD',
+      'APR_URI_UNP_OMITUSERINFO',
+      'APR_URI_UNP_REVEALPASSWORD',
+      'APR_URI_UNP_OMITPATHINFO',
+      'APR_URI_UNP_OMITQUERY'
+    ],
+    'table' => [
+      'APR_OVERLAP_TABLES_SET',
+      'APR_OVERLAP_TABLES_MERGE'
+    ],
+    'status' => [
+      'APR_TIMEUP'
+    ],
+    'socket' => [
+      'APR_SO_LINGER',
+      'APR_SO_KEEPALIVE',
+      'APR_SO_DEBUG',
+      'APR_SO_NONBLOCK',
+      'APR_SO_REUSEADDR',
+      'APR_SO_SNDBUF',
+      'APR_SO_RCVBUF',
+      'APR_SO_DISCONNECTED'
+    ],
+    'shutdown_how' => [
+      'APR_SHUTDOWN_READ',
+      'APR_SHUTDOWN_WRITE',
+      'APR_SHUTDOWN_READWRITE'
+    ],
+    'read_type' => [
+      'APR_BLOCK_READ',
+      'APR_NONBLOCK_READ'
+    ],
+    'poll' => [
+      'APR_POLLIN',
+      'APR_POLLPRI',
+      'APR_POLLOUT',
+      'APR_POLLERR',
+      'APR_POLLHUP',
+      'APR_POLLNVAL',
+      'APR_POLLSET_THREADSAFE',
+      'APR_POLLSET_NOCOPY',
+      'APR_POLLSET_WAKEABLE',
+      'APR_POLLSET_NODEFAULT'
+    ],
+    'lockmech' => [
+      'APR_LOCK_FCNTL',
+      'APR_LOCK_FLOCK',
+      'APR_LOCK_SYSVSEM',
+      'APR_LOCK_PROC_PTHREAD',
+      'APR_LOCK_POSIXSEM',
+      'APR_LOCK_DEFAULT'
+    ],
+    'limit' => [
+      'APR_LIMIT_CPU',
+      'APR_LIMIT_MEM',
+      'APR_LIMIT_NPROC',
+      'APR_LIMIT_NOFILE'
+    ],
+    'hook' => [
+      'APR_HOOK_REALLY_FIRST',
+      'APR_HOOK_FIRST',
+      'APR_HOOK_MIDDLE',
+      'APR_HOOK_LAST',
+      'APR_HOOK_REALLY_LAST'
+    ],
+    'fprot' => [
+      'APR_FPROT_USETID',
+      'APR_FPROT_UREAD',
+      'APR_FPROT_UWRITE',
+      'APR_FPROT_UEXECUTE',
+      'APR_FPROT_GSETID',
+      'APR_FPROT_GREAD',
+      'APR_FPROT_GWRITE',
+      'APR_FPROT_GEXECUTE',
+      'APR_FPROT_WSTICKY',
+      'APR_FPROT_WREAD',
+      'APR_FPROT_WWRITE',
+      'APR_FPROT_WEXECUTE',
+      'APR_FPROT_OS_DEFAULT',
+      'APR_FPROT_FILE_SOURCE_PERMS'
+    ],
+    'fopen' => [
+      'APR_FOPEN_READ',
+      'APR_FOPEN_WRITE',
+      'APR_FOPEN_CREATE',
+      'APR_FOPEN_APPEND',
+      'APR_FOPEN_TRUNCATE',
+      'APR_FOPEN_BINARY',
+      'APR_FOPEN_EXCL',
+      'APR_FOPEN_BUFFERED',
+      'APR_FOPEN_DELONCLOSE',
+      'APR_FOPEN_XTHREAD',
+      'APR_FOPEN_SHARELOCK',
+      'APR_FOPEN_NOCLEANUP',
+      'APR_FOPEN_SENDFILE_ENABLED',
+      'APR_FOPEN_LARGEFILE',
+      'APR_FOPEN_SPARSE'
+    ],
+    'flock' => [
+      'APR_FLOCK_SHARED',
+      'APR_FLOCK_EXCLUSIVE',
+      'APR_FLOCK_TYPEMASK',
+      'APR_FLOCK_NONBLOCK'
+    ],
+    'finfo' => [
+      'APR_FINFO_LINK',
+      'APR_FINFO_MTIME',
+      'APR_FINFO_CTIME',
+      'APR_FINFO_ATIME',
+      'APR_FINFO_SIZE',
+      'APR_FINFO_CSIZE',
+      'APR_FINFO_DEV',
+      'APR_FINFO_INODE',
+      'APR_FINFO_NLINK',
+      'APR_FINFO_TYPE',
+      'APR_FINFO_USER',
+      'APR_FINFO_GROUP',
+      'APR_FINFO_UPROT',
+      'APR_FINFO_GPROT',
+      'APR_FINFO_WPROT',
+      'APR_FINFO_ICASE',
+      'APR_FINFO_NAME',
+      'APR_FINFO_MIN',
+      'APR_FINFO_IDENT',
+      'APR_FINFO_OWNER',
+      'APR_FINFO_PROT',
+      'APR_FINFO_NORM',
+      'APR_FINFO_DIRENT'
+    ],
+    'filetype' => [
+      'APR_FILETYPE_NOFILE',
+      'APR_FILETYPE_REG',
+      'APR_FILETYPE_DIR',
+      'APR_FILETYPE_CHR',
+      'APR_FILETYPE_BLK',
+      'APR_FILETYPE_PIPE',
+      'APR_FILETYPE_LNK',
+      'APR_FILETYPE_SOCK',
+      'APR_FILETYPE_UNKFILE'
+    ],
+    'filepath' => [
+      'APR_FILEPATH_NOTABOVEROOT',
+      'APR_FILEPATH_SECUREROOTTEST',
+      'APR_FILEPATH_SECUREROOT',
+      'APR_FILEPATH_NOTRELATIVE',
+      'APR_FILEPATH_NOTABSOLUTE',
+      'APR_FILEPATH_NATIVE',
+      'APR_FILEPATH_TRUENAME',
+      'APR_FILEPATH_ENCODING_UNKNOWN',
+      'APR_FILEPATH_ENCODING_LOCALE',
+      'APR_FILEPATH_ENCODING_UTF8'
+    ],
+    'error' => [
+      'APR_ENOSTAT',
+      'APR_ENOPOOL',
+      'APR_EBADDATE',
+      'APR_EINVALSOCK',
+      'APR_ENOPROC',
+      'APR_ENOTIME',
+      'APR_ENODIR',
+      'APR_ENOLOCK',
+      'APR_ENOPOLL',
+      'APR_ENOSOCKET',
+      'APR_ENOTHREAD',
+      'APR_ENOTHDKEY',
+      'APR_EGENERAL',
+      'APR_ENOSHMAVAIL',
+      'APR_EBADIP',
+      'APR_EBADMASK',
+      'APR_EDSOOPEN',
+      'APR_EABSOLUTE',
+      'APR_ERELATIVE',
+      'APR_EINCOMPLETE',
+      'APR_EABOVEROOT',
+      'APR_EBADPATH',
+      'APR_EPATHWILD',
+      'APR_ESYMNOTFOUND',
+      'APR_EPROC_UNKNOWN',
+      'APR_ENOTENOUGHENTROPY',
+      'APR_EOF',
+      'APR_EINIT',
+      'APR_ENOTIMPL',
+      'APR_EMISMATCH',
+      'APR_EBUSY',
+      'APR_EACCES',
+      'APR_EEXIST',
+      'APR_ENAMETOOLONG',
+      'APR_ENOENT',
+      'APR_ENOTDIR',
+      'APR_ENOSPC',
+      'APR_ENOMEM',
+      'APR_EMFILE',
+      'APR_ENFILE',
+      'APR_EBADF',
+      'APR_EINVAL',
+      'APR_ESPIPE',
+      'APR_EAGAIN',
+      'APR_EINTR',
+      'APR_ENOTSOCK',
+      'APR_ECONNREFUSED',
+      'APR_EINPROGRESS',
+      'APR_ECONNABORTED',
+      'APR_ECONNRESET',
+      'APR_ETIMEDOUT',
+      'APR_EHOSTUNREACH',
+      'APR_ENETUNREACH',
+      'APR_EFTYPE',
+      'APR_EPIPE',
+      'APR_EXDEV',
+      'APR_ENOTEMPTY',
+      'APR_EAFNOSUPPORT',
+      'APR_EXCL',
+      'APR_END',
+      'APR_ENOKEY',
+      'APR_ENOIV',
+      'APR_EKEYTYPE',
+      'APR_ENOSPACE',
+      'APR_ECRYPT',
+      'APR_EPADDING',
+      'APR_EKEYLENGTH',
+      'APR_ENOCIPHER',
+      'APR_ENODIGEST',
+      'APR_ENOENGINE',
+      'APR_EINITENGINE',
+      'APR_EREINIT'
+    ],
+    'common' => [
+      'APR_SUCCESS'
+    ]
+  }
+};
+
+
+1;
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/tables/current24/Apache2/FunctionTable.pm mod_perl-2.0.8/xs/tables/current24/Apache2/FunctionTable.pm
--- mod_perl-2.0.8/xs/tables/current24/Apache2/FunctionTable.pm	1970-01-01 03:00:00.000000000 +0300
+++ mod_perl-2.0.8/xs/tables/current24/Apache2/FunctionTable.pm	2014-05-08 19:05:39.825519933 +0400
@@ -0,0 +1,21265 @@
+package Apache2::FunctionTable;
+
+# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+# ! WARNING: generated by Apache2::ParseSource/0.02
+# !          Mon Jul  1 12:38:14 2013
+# !          do NOT edit, any changes will be lost !
+# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+
+$Apache2::FunctionTable = [
+  {
+    'return_type' => 'void',
+    'name' => 'ap_abort_on_oom',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_add_cgi_vars',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_add_common_vars',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_add_file_conf',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'core_dir_config *',
+        'name' => 'conf'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'url_config'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_add_if_conf',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'core_dir_config *',
+        'name' => 'conf'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'url_config'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_filter_t *',
+    'name' => 'ap_add_input_filter',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ctx'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_filter_t *',
+    'name' => 'ap_add_input_filter_handle',
+    'args' => [
+      {
+        'type' => 'ap_filter_rec_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ctx'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_add_loaded_module',
+    'args' => [
+      {
+        'type' => 'module *',
+        'name' => 'mod'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_add_module',
+    'args' => [
+      {
+        'type' => 'module *',
+        'name' => 'm'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_directive_t *',
+    'name' => 'ap_add_node',
+    'args' => [
+      {
+        'type' => 'ap_directive_t **',
+        'name' => 'parent'
+      },
+      {
+        'type' => 'ap_directive_t *',
+        'name' => 'current'
+      },
+      {
+        'type' => 'ap_directive_t *',
+        'name' => 'toadd'
+      },
+      {
+        'type' => 'int',
+        'name' => 'child'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_filter_t *',
+    'name' => 'ap_add_output_filter',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ctx'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_filter_t *',
+    'name' => 'ap_add_output_filter_handle',
+    'args' => [
+      {
+        'type' => 'ap_filter_rec_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ctx'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_add_output_filters_by_type',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_add_per_dir_conf',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dir_config'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_add_per_url_conf',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'url_config'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_add_version_component',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'component'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_allow_methods',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'reset'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_allow_options',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_allow_overrides',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_allow_standard_methods',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'reset'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_append_pid',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'string'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'delim'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_args_to_table',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_table_t **',
+        'name' => 'table'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_auth_name',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_auth_type',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_basic_http_header',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_bin2hex',
+    'args' => [
+      {
+        'type' => 'const void *',
+        'name' => 'src'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'srclen'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'dest'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'ap_bucket_eoc_create',
+    'args' => [
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'ap_bucket_eoc_make',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'ap_bucket_eor_create',
+    'args' => [
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'ap_bucket_eor_make',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'ap_bucket_error_create',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'error'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'ap_bucket_error_make',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'int',
+        'name' => 'error'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_build_config',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'conf_pool'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'temp_pool'
+      },
+      {
+        'type' => 'ap_directive_t **',
+        'name' => 'conftree'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_build_cont_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'temp_pool'
+      },
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'ap_directive_t **',
+        'name' => 'current'
+      },
+      {
+        'type' => 'ap_directive_t **',
+        'name' => 'curr_parent'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'orig_directive'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_byterange_filter',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_calc_scoreboard_size',
+    'args' => []
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'ap_calloc',
+    'args' => [
+      {
+        'type' => 'size_t',
+        'name' => 'nelem'
+      },
+      {
+        'type' => 'size_t',
+        'name' => 'size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_cfg_closefile',
+    'args' => [
+      {
+        'type' => 'ap_configfile_t *',
+        'name' => 'cfp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_cfg_getc',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'ch'
+      },
+      {
+        'type' => 'ap_configfile_t *',
+        'name' => 'cfp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_cfg_getline',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'bufsize'
+      },
+      {
+        'type' => 'ap_configfile_t *',
+        'name' => 'cfp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_check_cmd_context',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'unsigned',
+        'name' => 'forbidden'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_check_mpm',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_cleanup_scoreboard',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'd'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_clear_auth_internal',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_clear_method_list',
+    'args' => [
+      {
+        'type' => 'ap_method_list_t *',
+        'name' => 'l'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_close_listeners',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_close_piped_log',
+    'args' => [
+      {
+        'type' => 'piped_log *',
+        'name' => 'pl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_close_selected_listeners',
+    'args' => [
+      {
+        'type' => 'ap_slave_t *',
+        'name' => 'arg0'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_construct_server',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'hostname'
+      },
+      {
+        'type' => 'apr_port_t',
+        'name' => 'port'
+      },
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_construct_url',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'uri'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_content_length_filter',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'arg0'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'arg1'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_content_type_tolower',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_context_document_root',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_context_prefix',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_cookie_check_string',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'string'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_cookie_read',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'val'
+      },
+      {
+        'type' => 'int',
+        'name' => 'remove'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_cookie_remove',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'attrs'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg3'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_cookie_remove2',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name2'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'attrs2'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg3'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_cookie_write',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'val'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'attrs'
+      },
+      {
+        'type' => 'long',
+        'name' => 'maxage'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg5'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_cookie_write2',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name2'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'val'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'attrs2'
+      },
+      {
+        'type' => 'long',
+        'name' => 'maxage'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg5'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_copy_method_list',
+    'args' => [
+      {
+        'type' => 'ap_method_list_t *',
+        'name' => 'dest'
+      },
+      {
+        'type' => 'ap_method_list_t *',
+        'name' => 'src'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_core_child_status',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'pid_t',
+        'name' => 'pid'
+      },
+      {
+        'type' => 'ap_generation_t',
+        'name' => 'gen'
+      },
+      {
+        'type' => 'int',
+        'name' => 'slot'
+      },
+      {
+        'type' => 'mpm_child_status',
+        'name' => 'status'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_core_input_filter',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'ap_input_mode_t',
+        'name' => 'mode'
+      },
+      {
+        'type' => 'apr_read_type_e',
+        'name' => 'block'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'readbytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_core_output_filter',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_core_reorder_directories',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'arg0'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 'arg1'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_core_translate',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_count_dirs',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'path'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_conf_vector_t*',
+    'name' => 'ap_create_conn_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char **',
+    'name' => 'ap_create_environment',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_conf_vector_t *',
+    'name' => 'ap_create_per_dir_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_conf_vector_t*',
+    'name' => 'ap_create_request_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_create_sb_handle',
+    'args' => [
+      {
+        'type' => 'ap_sb_handle_t **',
+        'name' => 'new_sbh'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'int',
+        'name' => 'child_num'
+      },
+      {
+        'type' => 'int',
+        'name' => 'thread_num'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_create_scoreboard',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'ap_scoreboard_e',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_custom_response',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'status'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'string'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_dbd_t*',
+    'name' => 'ap_dbd_acquire',
+    'args' => [
+      {
+        'type' => 'request_rec*',
+        'name' => 'arg0'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_dbd_t*',
+    'name' => 'ap_dbd_cacquire',
+    'args' => [
+      {
+        'type' => 'conn_rec*',
+        'name' => 'arg0'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_dbd_close',
+    'args' => [
+      {
+        'type' => 'server_rec*',
+        'name' => 'arg0'
+      },
+      {
+        'type' => 'ap_dbd_t*',
+        'name' => 'arg1'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_dbd_t*',
+    'name' => 'ap_dbd_open',
+    'args' => [
+      {
+        'type' => 'apr_pool_t*',
+        'name' => 'arg0'
+      },
+      {
+        'type' => 'server_rec*',
+        'name' => 'arg1'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_dbd_prepare',
+    'args' => [
+      {
+        'type' => 'server_rec*',
+        'name' => 'arg0'
+      },
+      {
+        'type' => 'const char*',
+        'name' => 'arg1'
+      },
+      {
+        'type' => 'const char*',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_destroy_sub_req',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_die',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'type'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_directory_walk',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_discard_request_body',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_document_root',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_dump_mutexes',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'out'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_error_log2stderr',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'ap_escape_errorlog_item',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'dest'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'source'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'buflen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_escape_html2',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      },
+      {
+        'type' => 'int',
+        'name' => 'toasc'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_escape_logitem',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_escape_path_segment',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_escape_path_segment_buffer',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_escape_quotes',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'instring'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_escape_shell_cmd',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_escape_urlencoded',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_escape_urlencoded_buffer',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_exists_config_define',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_exists_scoreboard_image',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_explode_recent_gmt',
+    'args' => [
+      {
+        'type' => 'apr_time_exp_t *',
+        'name' => 'tm'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_explode_recent_localtime',
+    'args' => [
+      {
+        'type' => 'apr_time_exp_t *',
+        'name' => 'tm'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_expr_exec',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const ap_expr_info_t *',
+        'name' => 'expr'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'err'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_expr_exec_ctx',
+    'args' => [
+      {
+        'type' => 'ap_expr_eval_ctx_t *',
+        'name' => 'ctx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_expr_exec_re',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const ap_expr_info_t *',
+        'name' => 'expr'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nmatch'
+      },
+      {
+        'type' => 'ap_regmatch_t *',
+        'name' => 'pmatch'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'source'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'err'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_expr_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_expr_lookup_default',
+    'args' => [
+      {
+        'type' => 'ap_expr_lookup_parms *',
+        'name' => 'parms'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_expr_parse',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      },
+      {
+        'type' => 'ap_expr_info_t *',
+        'name' => 'info'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'expr'
+      },
+      {
+        'type' => 'ap_expr_lookup_fn_t *',
+        'name' => 'lookup_fn'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_expr_info_t *',
+    'name' => 'ap_expr_parse_cmd_mi',
+    'args' => [
+      {
+        'type' => 'const cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'expr'
+      },
+      {
+        'type' => 'unsigned int',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'err'
+      },
+      {
+        'type' => 'ap_expr_lookup_fn_t *',
+        'name' => 'lookup_fn'
+      },
+      {
+        'type' => 'int',
+        'name' => 'module_index'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_expr_str_exec',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const ap_expr_info_t *',
+        'name' => 'expr'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'err'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_expr_str_exec_re',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const ap_expr_info_t *',
+        'name' => 'expr'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nmatch'
+      },
+      {
+        'type' => 'ap_regmatch_t *',
+        'name' => 'pmatch'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'source'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'err'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_fatal_signal_child_setup',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_fatal_signal_setup',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'in_pconf'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_fflush',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_field_noparam',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'intype'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_file_walk',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_filter_flush',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ctx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_filter_protocol',
+    'args' => [
+      {
+        'type' => 'ap_filter_t*',
+        'name' => 'f'
+      },
+      {
+        'type' => 'unsigned int',
+        'name' => 'proto_flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_finalize_request_protocol',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_finalize_sub_req_protocol',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'sub_r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_find_child_by_pid',
+    'args' => [
+      {
+        'type' => 'apr_proc_t *',
+        'name' => 'pid'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const command_rec *',
+    'name' => 'ap_find_command',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'const command_rec *',
+        'name' => 'cmds'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const command_rec *',
+    'name' => 'ap_find_command_in_modules',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'cmd_name'
+      },
+      {
+        'type' => 'module **',
+        'name' => 'mod'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_find_last_token',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'line'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'tok'
+      }
+    ]
+  },
+  {
+    'return_type' => 'module *',
+    'name' => 'ap_find_linked_module',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_find_list_item',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'line'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'tok'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_find_module_name',
+    'args' => [
+      {
+        'type' => 'module *',
+        'name' => 'm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_find_module_short_name',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'module_index'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_find_path_info',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'uri'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'path_info'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_find_token',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'line'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'tok'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_fini_vhost_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 'main_server'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_fixup_virtual_hosts',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 'main_server'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_flush_conn',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_fprintf',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg3'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_fputstrs',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_get_basic_auth_pw',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'pw'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_get_brigade',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'filter'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bucket'
+      },
+      {
+        'type' => 'ap_input_mode_t',
+        'name' => 'mode'
+      },
+      {
+        'type' => 'apr_read_type_e',
+        'name' => 'block'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'readbytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'long',
+    'name' => 'ap_get_client_block',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'bufsiz'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_get_conn_module_loglevel',
+    'args' => [
+      {
+        'type' => 'const conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'int',
+        'name' => 'index'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_get_conn_server_module_loglevel',
+    'args' => [
+      {
+        'type' => 'const conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'const server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'int',
+        'name' => 'index'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_socket_t *',
+    'name' => 'ap_get_conn_socket',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'ap_get_core_module_config',
+    'args' => [
+      {
+        'type' => 'const ap_conf_vector_t *',
+        'name' => 'cv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_filter_rec_t *',
+    'name' => 'ap_get_input_filter_handle',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_off_t',
+    'name' => 'ap_get_limit_req_body',
+    'args' => [
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'ap_get_limit_xml_body',
+    'args' => [
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_get_list_item',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'field'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_get_loadavg',
+    'args' => [
+      {
+        'type' => 'ap_loadavg_t *',
+        'name' => 'ld'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_get_local_host',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_get_mime_headers',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_get_mime_headers_core',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'ap_get_module_config',
+    'args' => [
+      {
+        'type' => 'const ap_conf_vector_t *',
+        'name' => 'cv'
+      },
+      {
+        'type' => 'const module *',
+        'name' => 'm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_filter_rec_t *',
+    'name' => 'ap_get_output_filter_handle',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_get_remote_host',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'conn'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dir_config'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'str_is_ip'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_get_remote_logname',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_get_request_module_loglevel',
+    'args' => [
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'index'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void **',
+    'name' => 'ap_get_request_note',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'note_num'
+      }
+    ]
+  },
+  {
+    'return_type' => 'global_score *',
+    'name' => 'ap_get_scoreboard_global',
+    'args' => []
+  },
+  {
+    'return_type' => 'process_score *',
+    'name' => 'ap_get_scoreboard_process',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'x'
+      }
+    ]
+  },
+  {
+    'return_type' => 'worker_score *',
+    'name' => 'ap_get_scoreboard_worker',
+    'args' => [
+      {
+        'type' => 'ap_sb_handle_t *',
+        'name' => 'sbh'
+      }
+    ]
+  },
+  {
+    'return_type' => 'worker_score *',
+    'name' => 'ap_get_scoreboard_worker_from_indexes',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'child_num'
+      },
+      {
+        'type' => 'int',
+        'name' => 'thread_num'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_get_server_banner',
+    'args' => []
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_get_server_built',
+    'args' => []
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_get_server_description',
+    'args' => []
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_get_server_module_loglevel',
+    'args' => [
+      {
+        'type' => 'const server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'int',
+        'name' => 'index'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_get_server_name',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_get_server_name_for_url',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_port_t',
+    'name' => 'ap_get_server_port',
+    'args' => [
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char*',
+    'name' => 'ap_get_server_protocol',
+    'args' => [
+      {
+        'type' => 'server_rec*',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_get_server_revision',
+    'args' => [
+      {
+        'type' => 'ap_version_t *',
+        'name' => 'version'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_get_server_version',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_get_sload',
+    'args' => [
+      {
+        'type' => 'ap_sload_t *',
+        'name' => 'ld'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_get_status_line',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'status'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_get_token',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'accept_line'
+      },
+      {
+        'type' => 'int',
+        'name' => 'accept_white'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_getline',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 's'
+      },
+      {
+        'type' => 'int',
+        'name' => 'n'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'fold'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_getparents',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_getword',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'line'
+      },
+      {
+        'type' => 'char',
+        'name' => 'stop'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_getword_conf',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'line'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_getword_conf_nc',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'line'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_getword_nc',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'line'
+      },
+      {
+        'type' => 'char',
+        'name' => 'stop'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_getword_nulls',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'line'
+      },
+      {
+        'type' => 'char',
+        'name' => 'stop'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_getword_nulls_nc',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'line'
+      },
+      {
+        'type' => 'char',
+        'name' => 'stop'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_getword_white',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'line'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_getword_white_nc',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'line'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_global_mutex_create',
+    'args' => [
+      {
+        'type' => 'apr_global_mutex_t **',
+        'name' => 'mutex'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'name'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'type'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'instance_id'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 'server'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'options'
+      }
+    ]
+  },
+  {
+    'return_type' => 'gid_t',
+    'name' => 'ap_gname2id',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_access_checker',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_access_checker_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_access_checker_ex',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_access_checker_ex_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_auth_checker',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_auth_checker_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_check_access',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_access_checker_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_check_access_ex',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_access_checker_ex_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_check_authn',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_check_user_id_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_check_authz',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_auth_checker_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_check_config',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_check_config_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_check_user_id',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_check_user_id_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_child_init',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_child_init_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_child_status',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_child_status_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_create_connection',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_create_connection_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_create_request',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_create_request_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_default_port',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_default_port_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_drop_privileges',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_drop_privileges_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_end_generation',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_end_generation_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_error_log',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_error_log_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_expr_lookup',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_expr_lookup_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_fixups',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_fixups_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_generate_log_id',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_generate_log_id_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_access_checker',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_access_checker_ex',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_auth_checker',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_check_config',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_check_user_id',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_child_init',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_child_status',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_create_connection',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_create_request',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_default_port',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_drop_privileges',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_end_generation',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_error_log',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_expr_lookup',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_fixups',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_generate_log_id',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_get_mgmt_items',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_get_suexec_identity',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_handler',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_header_parser',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_http_scheme',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_insert_error_filter',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_insert_filter',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_insert_network_bucket',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_log_transaction',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_map_to_storage',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_get_mgmt_items',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_get_mgmt_items_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_monitor',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_mpm',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_mpm_get_name',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_mpm_query',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_mpm_register_timed_callback',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_note_auth_failure',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_open_logs',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_optional_fn_retrieve',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_post_config',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_post_read_request',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_pre_config',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_pre_connection',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_pre_mpm',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_pre_read_request',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_process_connection',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_quick_handler',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_session_decode',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_session_encode',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_session_load',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_session_save',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_status_hook',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_get_suexec_identity',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_get_suexec_identity_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_test_config',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_translate_name',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_type_checker',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_watchdog_exit',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_watchdog_init',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_watchdog_need',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_hook_get_watchdog_step',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_handler',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_handler_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_header_parser',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_header_parser_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_http_scheme',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_http_scheme_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_insert_error_filter',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_insert_error_filter_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_insert_filter',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_insert_filter_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_insert_network_bucket',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_insert_network_bucket_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_log_transaction',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_log_transaction_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_map_to_storage',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_map_to_storage_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_monitor',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_monitor_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_mpm',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_mpm_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_mpm_get_name',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_mpm_get_name_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_mpm_query',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_mpm_query_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_mpm_register_timed_callback',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_mpm_register_timed_callback_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_note_auth_failure',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_note_auth_failure_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_open_logs',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_open_logs_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_optional_fn_retrieve',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_optional_fn_retrieve_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_post_config',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_post_config_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_post_read_request',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_post_read_request_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_pre_config',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_pre_config_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_pre_connection',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_pre_connection_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_pre_mpm',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_pre_mpm_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_pre_read_request',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_pre_read_request_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_process_connection',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_process_connection_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_quick_handler',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_quick_handler_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_session_decode',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_session_decode_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_session_encode',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_session_encode_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_session_load',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_session_load_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_session_save',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_session_save_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_status_hook',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_status_hook_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_test_config',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_test_config_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_translate_name',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_translate_name_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_type_checker',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_type_checker_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_watchdog_exit',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_watchdog_exit_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_watchdog_init',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_watchdog_init_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_watchdog_need',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_watchdog_need_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_hook_watchdog_step',
+    'args' => [
+      {
+        'type' => 'ap_HOOK_watchdog_step_t *',
+        'name' => 'pf'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_ht_time',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 't'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => 'int',
+        'name' => 'gmt'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_http_chunk_filter',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_http_filter',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'ap_input_mode_t',
+        'name' => 'mode'
+      },
+      {
+        'type' => 'apr_read_type_e',
+        'name' => 'block'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'readbytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_http_header_filter',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_http_outerror_filter',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_if_walk',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_increment_counts',
+    'args' => [
+      {
+        'type' => 'ap_sb_handle_t *',
+        'name' => 'sbh'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_ind',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      },
+      {
+        'type' => 'char',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_index_of_response',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'status'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_init_rng',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_init_scoreboard',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'shared_score'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_init_vhost_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_init_virtual_host',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'hostname'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 'main_server'
+      },
+      {
+        'type' => 'server_rec **',
+        'name' => 'ps'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_internal_fast_redirect',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'sub_req'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_internal_redirect',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'new_uri'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_internal_redirect_handler',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'new_uri'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_invoke_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_is_directory',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_is_initial_req',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_is_matchexp',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_is_rdirectory',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_is_recursion_limit_exceeded',
+    'args' => [
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_is_url',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'u'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_limit_section',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_lingering_close',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_list_provider_groups',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'ap_list_provider_names',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_group'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_version'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_listen_pre_config',
+    'args' => []
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_location_walk',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_log_assert',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'szExp'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szFile'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nLine'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_log_cerror_',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'file'
+      },
+      {
+        'type' => 'int',
+        'name' => 'line'
+      },
+      {
+        'type' => 'int',
+        'name' => 'module_index'
+      },
+      {
+        'type' => 'int',
+        'name' => 'level'
+      },
+      {
+        'type' => 'apr_status_t',
+        'name' => 'status'
+      },
+      {
+        'type' => 'const conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg7'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_log_command_line',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_log_cserror_',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'file'
+      },
+      {
+        'type' => 'int',
+        'name' => 'line'
+      },
+      {
+        'type' => 'int',
+        'name' => 'module_index'
+      },
+      {
+        'type' => 'int',
+        'name' => 'level'
+      },
+      {
+        'type' => 'apr_status_t',
+        'name' => 'status'
+      },
+      {
+        'type' => 'const conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'const server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg8'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_log_error_',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'file'
+      },
+      {
+        'type' => 'int',
+        'name' => 'line'
+      },
+      {
+        'type' => 'int',
+        'name' => 'module_index'
+      },
+      {
+        'type' => 'int',
+        'name' => 'level'
+      },
+      {
+        'type' => 'apr_status_t',
+        'name' => 'status'
+      },
+      {
+        'type' => 'const server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg7'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_log_perror_',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'file'
+      },
+      {
+        'type' => 'int',
+        'name' => 'line'
+      },
+      {
+        'type' => 'int',
+        'name' => 'module_index'
+      },
+      {
+        'type' => 'int',
+        'name' => 'level'
+      },
+      {
+        'type' => 'apr_status_t',
+        'name' => 'status'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg7'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_log_pid',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_log_rerror_',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'file'
+      },
+      {
+        'type' => 'int',
+        'name' => 'line'
+      },
+      {
+        'type' => 'int',
+        'name' => 'module_index'
+      },
+      {
+        'type' => 'int',
+        'name' => 'level'
+      },
+      {
+        'type' => 'apr_status_t',
+        'name' => 'status'
+      },
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg7'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_logs_child_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'ap_lookup_provider',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'provider_group'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_name'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_version'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_make_content_type',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_make_dirstr_parent',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_make_dirstr_prefix',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'd'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      },
+      {
+        'type' => 'int',
+        'name' => 'n'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_make_etag',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'force_weak'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_make_full_path',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'a'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'dir'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'f'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_method_list_t *',
+    'name' => 'ap_make_method_list',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nelts'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'ap_malloc',
+    'args' => [
+      {
+        'type' => 'size_t',
+        'name' => 'size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_matches_request_vhost',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'host'
+      },
+      {
+        'type' => 'apr_port_t',
+        'name' => 'port'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_md5',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'a'
+      },
+      {
+        'type' => 'const unsigned char *',
+        'name' => 'string'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_md5_binary',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'a'
+      },
+      {
+        'type' => 'const unsigned char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'int',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_md5contextTo64',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_md5_ctx_t *',
+        'name' => 'context'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_md5digest',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'infile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_meets_conditions',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_merge_log_config',
+    'args' => [
+      {
+        'type' => 'const struct ap_logconf *',
+        'name' => 'old_conf'
+      },
+      {
+        'type' => 'struct ap_logconf *',
+        'name' => 'new_conf'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_conf_vector_t*',
+    'name' => 'ap_merge_per_dir_configs',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'base'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'new_conf'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_method_in_list',
+    'args' => [
+      {
+        'type' => 'ap_method_list_t *',
+        'name' => 'l'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'method'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_method_is_limited',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'method'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_method_list_add',
+    'args' => [
+      {
+        'type' => 'ap_method_list_t *',
+        'name' => 'l'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'method'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_method_list_remove',
+    'args' => [
+      {
+        'type' => 'ap_method_list_t *',
+        'name' => 'l'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'method'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_method_name_of',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'int',
+        'name' => 'methnum'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_method_number_of',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'method'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_method_register',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'methname'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_method_registry_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_mpm_dump_pidfile',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'out'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_mpm_end_gen_helper',
+    'args' => [
+      {
+        'type' => 'void *unused',
+        'name' => 'arg0'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_mpm_pod_check',
+    'args' => [
+      {
+        'type' => 'ap_pod_t *',
+        'name' => 'pod'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_mpm_pod_close',
+    'args' => [
+      {
+        'type' => 'ap_pod_t *',
+        'name' => 'pod'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_mpm_pod_killpg',
+    'args' => [
+      {
+        'type' => 'ap_pod_t *',
+        'name' => 'pod'
+      },
+      {
+        'type' => 'int',
+        'name' => 'num'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_mpm_pod_open',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'ap_pod_t **',
+        'name' => 'pod'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_mpm_pod_signal',
+    'args' => [
+      {
+        'type' => 'ap_pod_t *',
+        'name' => 'pod'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_mpm_query',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'query_code'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'result'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_mpm_register_timed_callback',
+    'args' => [
+      {
+        'type' => 'apr_time_t',
+        'name' => 't'
+      },
+      {
+        'type' => 'ap_mpm_callback_fn_t *',
+        'name' => 'cbfn'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'baton'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_mpm_rewrite_args',
+    'args' => [
+      {
+        'type' => 'process_rec *',
+        'name' => 'arg0'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_mpm_safe_kill',
+    'args' => [
+      {
+        'type' => 'pid_t',
+        'name' => 'pid'
+      },
+      {
+        'type' => 'int',
+        'name' => 'sig'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_mpm_set_coredumpdir',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_mpm_set_graceful_shutdown',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_mpm_set_max_mem_free',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_mpm_set_max_requests',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_mpm_set_pidfile',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_mpm_set_thread_stacksize',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_mutex_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_mutex_register',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'type'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'default_dir'
+      },
+      {
+        'type' => 'apr_lockmech_e',
+        'name' => 'default_mech'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'options'
+      }
+    ]
+  },
+  {
+    'return_type' => 'struct ap_logconf *',
+    'name' => 'ap_new_log_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const struct ap_logconf *',
+        'name' => 'old'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_no2slash',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_note_auth_failure',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_note_basic_auth_failure',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_note_digest_auth_failure',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_old_write_filter',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_open_logs',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'plog'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's_main'
+      }
+    ]
+  },
+  {
+    'return_type' => 'piped_log *',
+    'name' => 'ap_open_piped_log',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'program'
+      }
+    ]
+  },
+  {
+    'return_type' => 'piped_log *',
+    'name' => 'ap_open_piped_log_ex',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'program'
+      },
+      {
+        'type' => 'apr_cmdtype_e',
+        'name' => 'cmdtype'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_open_stderr_log',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_os_create_privileged_process',
+    'args' => [
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_proc_t *',
+        'name' => 'newproc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'progname'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'args'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'env'
+      },
+      {
+        'type' => 'apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_os_escape_path',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'int',
+        'name' => 'partial'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_os_is_path_absolute',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'dir'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_parse_form_data',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'struct ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_array_header_t **',
+        'name' => 'ptr'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'num'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_parse_htaccess',
+    'args' => [
+      {
+        'type' => 'ap_conf_vector_t **',
+        'name' => 'result'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'override'
+      },
+      {
+        'type' => 'int',
+        'name' => 'override_opts'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'override_list'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'access_name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_parse_log_level',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_parse_mutex',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_lockmech_e *',
+        'name' => 'mutexmech'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'mutexfile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_parse_uri',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'uri'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_parse_vhost_addrs',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'hostname'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_pass_brigade',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'filter'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bucket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_pass_brigade_fchk',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bucket'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg3'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_pbase64decode',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'bufcoded'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_pbase64encode',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'string'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_configfile_t *',
+    'name' => 'ap_pcfg_open_custom',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'descr'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'param'
+      },
+      {
+        'type' => 'apr_status_t (*getc_func) (char *ch, void *param)',
+        'name' => 'arg3'
+      },
+      {
+        'type' => 'apr_status_t (*gets_func) (void *buf, apr_size_t bufsiz, void *param)',
+        'name' => 'arg4'
+      },
+      {
+        'type' => 'apr_status_t (*close_func) (void *param)',
+        'name' => 'arg5'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_pcfg_openfile',
+    'args' => [
+      {
+        'type' => 'ap_configfile_t **',
+        'name' => 'ret_cfg'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_pcfg_strerror',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'ap_configfile_t *',
+        'name' => 'cfp'
+      },
+      {
+        'type' => 'apr_status_t',
+        'name' => 'rc'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_pcw_walk_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'module *',
+        'name' => 'modp'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'ap_pcw_dir_cb_t',
+        'name' => 'dir_cb'
+      },
+      {
+        'type' => 'ap_pcw_srv_cb_t',
+        'name' => 'srv_cb'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_pcw_walk_default_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'module *',
+        'name' => 'modp'
+      },
+      {
+        'type' => 'ap_pcw_dir_cb_t',
+        'name' => 'dir_cb'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_pcw_walk_directory_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'core_server_config *',
+        'name' => 'sconf'
+      },
+      {
+        'type' => 'module *',
+        'name' => 'modp'
+      },
+      {
+        'type' => 'ap_pcw_dir_cb_t',
+        'name' => 'dir_cb'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_pcw_walk_files_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'core_dir_config *',
+        'name' => 'dconf'
+      },
+      {
+        'type' => 'module *',
+        'name' => 'modp'
+      },
+      {
+        'type' => 'ap_pcw_dir_cb_t',
+        'name' => 'dir_cb'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_pcw_walk_location_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'core_server_config *',
+        'name' => 'sconf'
+      },
+      {
+        'type' => 'module *',
+        'name' => 'modp'
+      },
+      {
+        'type' => 'ap_pcw_dir_cb_t',
+        'name' => 'dir_cb'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_pcw_walk_server_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'module *',
+        'name' => 'modp'
+      },
+      {
+        'type' => 'ap_pcw_srv_cb_t',
+        'name' => 'srv_cb'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_file_t *',
+    'name' => 'ap_piped_log_read_fd',
+    'args' => [
+      {
+        'type' => 'piped_log *',
+        'name' => 'pl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_file_t *',
+    'name' => 'ap_piped_log_write_fd',
+    'args' => [
+      {
+        'type' => 'piped_log *',
+        'name' => 'pl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_pool_cleanup_set_null',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_regex_t *',
+    'name' => 'ap_pregcomp',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'pattern'
+      },
+      {
+        'type' => 'int',
+        'name' => 'cflags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_pregfree',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'ap_regex_t *',
+        'name' => 'reg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_pregsub',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'input'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'source'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nmatch'
+      },
+      {
+        'type' => 'ap_regmatch_t',
+        'name' => 'pmatch'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_pregsub_ex',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'result'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'input'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'source'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nmatch'
+      },
+      {
+        'type' => 'ap_regmatch_t',
+        'name' => 'pmatch'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'maxlen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_proc_mutex_create',
+    'args' => [
+      {
+        'type' => 'apr_proc_mutex_t **',
+        'name' => 'mutex'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'name'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'type'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'instance_id'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 'server'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'options'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_process_async_request',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_process_child_status',
+    'args' => [
+      {
+        'type' => 'apr_proc_t *',
+        'name' => 'pid'
+      },
+      {
+        'type' => 'apr_exit_why_e',
+        'name' => 'why'
+      },
+      {
+        'type' => 'int',
+        'name' => 'status'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_process_config_tree',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'ap_directive_t *',
+        'name' => 'conftree'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_process_connection',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'csd'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_process_fnmatch_configs',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      },
+      {
+        'type' => 'ap_directive_t **',
+        'name' => 'conftree'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      },
+      {
+        'type' => 'int',
+        'name' => 'optional'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_process_request',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_process_request_after_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_process_request_internal',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_process_resource_config',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      },
+      {
+        'type' => 'ap_directive_t **',
+        'name' => 'conftree'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_psignature',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'prefix'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_pstr2_alnum',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'src'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'dest'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_random_insecure_bytes',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_random_parent_after_fork',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_uint32_t',
+    'name' => 'ap_random_pick',
+    'args' => [
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'min'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'max'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_time_t',
+    'name' => 'ap_rationalize_mtime',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'mtime'
+      }
+    ]
+  },
+  {
+    'return_type' => 'server_rec *',
+    'name' => 'ap_read_config',
+    'args' => [
+      {
+        'type' => 'process_rec *',
+        'name' => 'process'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'temp_pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'config_name'
+      },
+      {
+        'type' => 'ap_directive_t **',
+        'name' => 'conftree'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_read_pid',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'filename'
+      },
+      {
+        'type' => 'pid_t *',
+        'name' => 'mypid'
+      }
+    ]
+  },
+  {
+    'return_type' => 'request_rec *',
+    'name' => 'ap_read_request',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'ap_realloc',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'ptr'
+      },
+      {
+        'type' => 'size_t',
+        'name' => 'size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_recent_ctime',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'date_str'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_recent_ctime_ex',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'date_str'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 't'
+      },
+      {
+        'type' => 'int',
+        'name' => 'option'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_recent_rfc822_date',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'date_str'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_reclaim_child_processes',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'terminate'
+      },
+      {
+        'type' => 'ap_reclaim_callback_fn_t *',
+        'name' => 'mpm_callback'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_regcomp',
+    'args' => [
+      {
+        'type' => 'ap_regex_t *',
+        'name' => 'preg'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'regex'
+      },
+      {
+        'type' => 'int',
+        'name' => 'cflags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'ap_regerror',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'errcode'
+      },
+      {
+        'type' => 'const ap_regex_t *',
+        'name' => 'preg'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'errbuf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'errbuf_size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_regexec',
+    'args' => [
+      {
+        'type' => 'const ap_regex_t *',
+        'name' => 'preg'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'string'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nmatch'
+      },
+      {
+        'type' => 'ap_regmatch_t *',
+        'name' => 'pmatch'
+      },
+      {
+        'type' => 'int',
+        'name' => 'eflags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_regexec_len',
+    'args' => [
+      {
+        'type' => 'const ap_regex_t *',
+        'name' => 'preg'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'buff'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nmatch'
+      },
+      {
+        'type' => 'ap_regmatch_t *',
+        'name' => 'pmatch'
+      },
+      {
+        'type' => 'int',
+        'name' => 'eflags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_regfree',
+    'args' => [
+      {
+        'type' => 'ap_regex_t *',
+        'name' => 'preg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_register_auth_provider',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_group'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_name'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_version'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'provider'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_register_config_hooks',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_register_errorlog_handler',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'tag'
+      },
+      {
+        'type' => 'ap_errorlog_handler_fn_t *',
+        'name' => 'handler'
+      },
+      {
+        'type' => 'int',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_register_extra_mpm_process',
+    'args' => [
+      {
+        'type' => 'pid_t',
+        'name' => 'pid'
+      },
+      {
+        'type' => 'ap_generation_t',
+        'name' => 'gen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_register_hooks',
+    'args' => [
+      {
+        'type' => 'module *',
+        'name' => 'm'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_filter_rec_t *',
+    'name' => 'ap_register_input_filter',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'ap_in_filter_func',
+        'name' => 'filter_func'
+      },
+      {
+        'type' => 'ap_init_filter_func',
+        'name' => 'filter_init'
+      },
+      {
+        'type' => 'ap_filter_type',
+        'name' => 'ftype'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_register_log_hooks',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_filter_rec_t *',
+    'name' => 'ap_register_output_filter',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'ap_out_filter_func',
+        'name' => 'filter_func'
+      },
+      {
+        'type' => 'ap_init_filter_func',
+        'name' => 'filter_init'
+      },
+      {
+        'type' => 'ap_filter_type',
+        'name' => 'ftype'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_filter_rec_t *',
+    'name' => 'ap_register_output_filter_protocol',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'ap_out_filter_func',
+        'name' => 'filter_func'
+      },
+      {
+        'type' => 'ap_init_filter_func',
+        'name' => 'filter_init'
+      },
+      {
+        'type' => 'ap_filter_type',
+        'name' => 'ftype'
+      },
+      {
+        'type' => 'unsigned int',
+        'name' => 'proto_flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_register_provider',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_group'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_name'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_version'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'provider'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'ap_register_request_note',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_relieve_child_processes',
+    'args' => [
+      {
+        'type' => 'ap_reclaim_callback_fn_t *',
+        'name' => 'mpm_callback'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_remove_input_filter',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_remove_loaded_module',
+    'args' => [
+      {
+        'type' => 'module *',
+        'name' => 'mod'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_remove_module',
+    'args' => [
+      {
+        'type' => 'module *',
+        'name' => 'm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_remove_output_filter',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_remove_pid',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_reopen_scoreboard',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_shm_t **',
+        'name' => 'shm'
+      },
+      {
+        'type' => 'int',
+        'name' => 'detached'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_replace_stderr_log',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'file'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_request_has_body',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_reserve_module_slots',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'count'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_reserve_module_slots_directive',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'directive'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_reset_module_loglevels',
+    'args' => [
+      {
+        'type' => 'struct ap_logconf *',
+        'name' => 'l'
+      },
+      {
+        'type' => 'int',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_resolve_env',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'word'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_response_code_string',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'error_index'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'ap_retained_data_create',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'ap_retained_data_get',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_rflush',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_rgetline_core',
+    'args' => [
+      {
+        'type' => 'char **',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'n'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'read'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'fold'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_rind',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      },
+      {
+        'type' => 'char',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_rprintf',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_rputc',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'c'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_rputs',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_access_checker',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_access_checker_ex',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_auth_checker',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_check_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'plog'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_check_user_id',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_run_child_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pchild'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_run_child_status',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'pid_t',
+        'name' => 'pid'
+      },
+      {
+        'type' => 'ap_generation_t',
+        'name' => 'gen'
+      },
+      {
+        'type' => 'int',
+        'name' => 'slot'
+      },
+      {
+        'type' => 'mpm_child_status',
+        'name' => 'state'
+      }
+    ]
+  },
+  {
+    'return_type' => 'conn_rec *',
+    'name' => 'ap_run_create_connection',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 'server'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'csd'
+      },
+      {
+        'type' => 'long',
+        'name' => 'conn_id'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'sbh'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'alloc'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_create_request',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_port_t',
+    'name' => 'ap_run_default_port',
+    'args' => [
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_drop_privileges',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pchild'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_run_end_generation',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'ap_generation_t',
+        'name' => 'gen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_run_error_log',
+    'args' => [
+      {
+        'type' => 'const ap_errorlog_info *',
+        'name' => 'info'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'errstr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_expr_lookup',
+    'args' => [
+      {
+        'type' => 'ap_expr_lookup_parms *',
+        'name' => 'parms'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_fixups',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_generate_log_id',
+    'args' => [
+      {
+        'type' => 'const conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'id'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_get_mgmt_items',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'val'
+      },
+      {
+        'type' => 'apr_hash_t *',
+        'name' => 'ht'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_unix_identity_t *',
+    'name' => 'ap_run_get_suexec_identity',
+    'args' => [
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_header_parser',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_run_http_scheme',
+    'args' => [
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_run_insert_error_filter',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_run_insert_filter',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_run_insert_network_bucket',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'socket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_log_transaction',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_map_to_storage',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_monitor',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_mpm',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'plog'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 'server_conf'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_run_mpm_get_name',
+    'args' => []
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_mpm_query',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'query_code'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'result'
+      },
+      {
+        'type' => 'apr_status_t *',
+        'name' => 'rv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_run_mpm_register_timed_callback',
+    'args' => [
+      {
+        'type' => 'apr_time_t',
+        'name' => 't'
+      },
+      {
+        'type' => 'ap_mpm_callback_fn_t *',
+        'name' => 'cbfn'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'baton'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_note_auth_failure',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'auth_type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_open_logs',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'plog'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_run_optional_fn_retrieve',
+    'args' => []
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_post_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'plog'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_post_read_request',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_pre_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'plog'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_pre_connection',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'csd'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_pre_mpm',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'ap_scoreboard_e',
+        'name' => 'sb_type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_run_pre_read_request',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_process_connection',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_quick_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'lookup_uri'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_run_rewrite_args',
+    'args' => [
+      {
+        'type' => 'process_rec *',
+        'name' => 'process'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_run_session_decode',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'session_rec *',
+        'name' => 'z'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_run_session_encode',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'session_rec *',
+        'name' => 'z'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_run_session_load',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'session_rec **',
+        'name' => 'z'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_run_session_save',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'session_rec *',
+        'name' => 'z'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_status_hook',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_sub_req',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_run_test_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_translate_name',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_type_checker',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_watchdog_exit',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_watchdog_init',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_watchdog_need',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'int',
+        'name' => 'parent'
+      },
+      {
+        'type' => 'int',
+        'name' => 'singleton'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_run_watchdog_step',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_runtime_dir_relative',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_rvputs',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg1'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_rwrite',
+    'args' => [
+      {
+        'type' => 'const void *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nbyte'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ap_rxplus_t*',
+    'name' => 'ap_rxplus_compile',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'pattern'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_rxplus_exec',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'ap_rxplus_t *',
+        'name' => 'rx'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'pattern'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'newpattern'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_rxplus_match',
+    'args' => [
+      {
+        'type' => 'ap_rxplus_t *',
+        'name' => 'rx'
+      },
+      {
+        'type' => 'int',
+        'name' => 'n'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'len'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'match'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char*',
+    'name' => 'ap_rxplus_pmatch',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'ap_rxplus_t *',
+        'name' => 'rx'
+      },
+      {
+        'type' => 'int',
+        'name' => 'n'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_satisfies',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_save_brigade',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade **',
+        'name' => 'save_to'
+      },
+      {
+        'type' => 'apr_bucket_brigade **',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_scan_script_header_err',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buffer'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_scan_script_header_err_brigade',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buffer'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_scan_script_header_err_brigade_ex',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'int',
+        'name' => 'module_index'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_scan_script_header_err_core',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'int (*getsfunc) (char *, int, void *)',
+        'name' => 'arg2'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'getsfunc_data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_scan_script_header_err_core_ex',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'int (*getsfunc) (char *, int, void *)',
+        'name' => 'arg2'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'getsfunc_data'
+      },
+      {
+        'type' => 'int',
+        'name' => 'module_index'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_scan_script_header_err_ex',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'int',
+        'name' => 'module_index'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_scan_script_header_err_strs',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'termch'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'termarg'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg4'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_scan_script_header_err_strs_ex',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'int',
+        'name' => 'module_index'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'termch'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'termarg'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg5'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_send_error_response',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'recursive_error'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_send_fd',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'fd'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'offset'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'length'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'nbytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_send_http_options',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_send_http_trace',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_send_interim_response',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'send_headers'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'ap_send_mmap',
+    'args' => [
+      {
+        'type' => 'apr_mmap_t *',
+        'name' => 'mm'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'offset'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'length'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_server_root_relative',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_set_accept_ranges',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'ap_set_config_vectors',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 'server'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'section_vector'
+      },
+      {
+        'type' => 'const char *section',
+        'name' => 'arg2'
+      },
+      {
+        'type' => 'module *',
+        'name' => 'mod'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_set_content_length',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'length'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_set_content_type',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'ct'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_set_context_info',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'prefix'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'document_root'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_set_core_module_config',
+    'args' => [
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'cv'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_deprecated',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'struct_ptr'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_set_document_root',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'document_root'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_set_etag',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_extended_status',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'int',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_file_slot',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'struct_ptr'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_flag_slot',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'struct_ptr'
+      },
+      {
+        'type' => 'int',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_flag_slot_char',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'struct_ptr'
+      },
+      {
+        'type' => 'int',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_int_slot',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'struct_ptr'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_set_keepalive',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_set_last_modified',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_listenbacklog',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_listener',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'int',
+        'name' => 'argc'
+      },
+      {
+        'type' => 'char *const',
+        'name' => 'argv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_set_module_config',
+    'args' => [
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'cv'
+      },
+      {
+        'type' => 'const module *',
+        'name' => 'm'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_set_module_loglevel',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'struct ap_logconf *',
+        'name' => 'l'
+      },
+      {
+        'type' => 'int',
+        'name' => 'index'
+      },
+      {
+        'type' => 'int',
+        'name' => 'level'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_mutex',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_name_virtual_host',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_receive_buffer_size',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_reqtail',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'int',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_scoreboard',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_send_buffer_size',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_set_server_protocol',
+    'args' => [
+      {
+        'type' => 'server_rec*',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char*',
+        'name' => 'proto'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_string_slot',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'struct_ptr'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_set_string_slot_lower',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'struct_ptr'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_set_sub_req_protocol',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'rnew'
+      },
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_setup_auth_internal',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_setup_client_block',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'read_policy'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_setup_listeners',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_setup_make_content_type',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_setup_prelinked_modules',
+    'args' => [
+      {
+        'type' => 'process_rec *',
+        'name' => 'process'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_should_client_block',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_show_directives',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_show_modules',
+    'args' => []
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_show_mpm',
+    'args' => []
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_signal_server',
+    'args' => [
+      {
+        'type' => 'int *',
+        'name' => 'arg0'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'arg1'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_single_module_configure',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'module *',
+        'name' => 'm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_size_list_item',
+    'args' => [
+      {
+        'type' => 'const char **',
+        'name' => 'field'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_soak_end_container',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'directive'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_some_auth_required',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_start_lingering_close',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_state_query',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'query_code'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_str2_alnum',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'src'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'dest'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_str_tolower',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_str_toupper',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_strcasecmp_match',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'expected'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_strcasestr',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 's1'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_strchr',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 's'
+      },
+      {
+        'type' => 'int',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_strchr_c',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      },
+      {
+        'type' => 'int',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_strcmp_match',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'expected'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_stripprefix',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'bigstring'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'prefix'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_strrchr',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 's'
+      },
+      {
+        'type' => 'int',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_strrchr_c',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      },
+      {
+        'type' => 'int',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_strstr',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_strstr_c',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'request_rec *',
+    'name' => 'ap_sub_req_lookup_dirent',
+    'args' => [
+      {
+        'type' => 'const apr_finfo_t *',
+        'name' => 'finfo'
+      },
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'subtype'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'next_filter'
+      }
+    ]
+  },
+  {
+    'return_type' => 'request_rec *',
+    'name' => 'ap_sub_req_lookup_file',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'new_file'
+      },
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'next_filter'
+      }
+    ]
+  },
+  {
+    'return_type' => 'request_rec *',
+    'name' => 'ap_sub_req_lookup_uri',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'new_uri'
+      },
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'next_filter'
+      }
+    ]
+  },
+  {
+    'return_type' => 'request_rec *',
+    'name' => 'ap_sub_req_method_uri',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'method'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'new_uri'
+      },
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'next_filter'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_sub_req_output_filter',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_sys_privileges_handlers',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'inc'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_time_process_request',
+    'args' => [
+      {
+        'type' => 'ap_sb_handle_t *',
+        'name' => 'sbh'
+      },
+      {
+        'type' => 'int',
+        'name' => 'status'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_timeout_parameter_parse',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'timeout_parameter'
+      },
+      {
+        'type' => 'apr_interval_time_t *',
+        'name' => 'timeout'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'default_time_unit'
+      }
+    ]
+  },
+  {
+    'return_type' => 'uid_t',
+    'name' => 'ap_uname2id',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_unescape_all',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'url'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_unescape_url',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'url'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_unescape_url_keep2f',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'url'
+      },
+      {
+        'type' => 'int',
+        'name' => 'decode_slashes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_unescape_urlencoded',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'query'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_unixd_accept',
+    'args' => [
+      {
+        'type' => 'void **',
+        'name' => 'accepted'
+      },
+      {
+        'type' => 'ap_listen_rec *',
+        'name' => 'lr'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptrans'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_unixd_set_global_mutex_perms',
+    'args' => [
+      {
+        'type' => 'apr_global_mutex_t *',
+        'name' => 'gmutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_unixd_set_proc_mutex_perms',
+    'args' => [
+      {
+        'type' => 'apr_proc_mutex_t *',
+        'name' => 'pmutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_unixd_set_rlimit',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'struct rlimit **',
+        'name' => 'plimit'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg2'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_unixd_setup_child',
+    'args' => []
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_unregister_extra_mpm_process',
+    'args' => [
+      {
+        'type' => 'pid_t',
+        'name' => 'pid'
+      },
+      {
+        'type' => 'ap_generation_t *',
+        'name' => 'old_gen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_update_child_status',
+    'args' => [
+      {
+        'type' => 'ap_sb_handle_t *',
+        'name' => 'sbh'
+      },
+      {
+        'type' => 'int',
+        'name' => 'status'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_update_child_status_from_conn',
+    'args' => [
+      {
+        'type' => 'ap_sb_handle_t *',
+        'name' => 'sbh'
+      },
+      {
+        'type' => 'int',
+        'name' => 'status'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_update_child_status_from_indexes',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'child_num'
+      },
+      {
+        'type' => 'int',
+        'name' => 'thread_num'
+      },
+      {
+        'type' => 'int',
+        'name' => 'status'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_update_mtime',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'dependency_mtime'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_update_vhost_from_headers',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_update_vhost_given_ip',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'conn'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_varbuf_cfg_getline',
+    'args' => [
+      {
+        'type' => 'struct ap_varbuf *',
+        'name' => 'vb'
+      },
+      {
+        'type' => 'ap_configfile_t *',
+        'name' => 'cfp'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'max_len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_varbuf_free',
+    'args' => [
+      {
+        'type' => 'struct ap_varbuf *',
+        'name' => 'vb'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_varbuf_grow',
+    'args' => [
+      {
+        'type' => 'struct ap_varbuf *',
+        'name' => 'vb'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'new_size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_varbuf_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'struct ap_varbuf *',
+        'name' => 'vb'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'init_size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'ap_varbuf_pdup',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'struct ap_varbuf *',
+        'name' => 'vb'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'prepend'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'prepend_len'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'append'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'append_len'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'new_len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'ap_varbuf_regsub',
+    'args' => [
+      {
+        'type' => 'struct ap_varbuf *',
+        'name' => 'vb'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'input'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'source'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nmatch'
+      },
+      {
+        'type' => 'ap_regmatch_t',
+        'name' => 'pmatch'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'maxlen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_varbuf_strmemcat',
+    'args' => [
+      {
+        'type' => 'struct ap_varbuf *',
+        'name' => 'vb'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      },
+      {
+        'type' => 'int',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_vhost_iterate_given_conn',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'conn'
+      },
+      {
+        'type' => 'ap_vhost_iterate_conn_cb',
+        'name' => 'func_cb'
+      },
+      {
+        'type' => 'void*',
+        'name' => 'baton'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_vrprintf',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => 'va_list',
+        'name' => 'vlist'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'ap_wait_or_timeout',
+    'args' => [
+      {
+        'type' => 'apr_exit_why_e *',
+        'name' => 'status'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'exitcode'
+      },
+      {
+        'type' => 'apr_proc_t *',
+        'name' => 'ret'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'ap_walk_config',
+    'args' => [
+      {
+        'type' => 'ap_directive_t *',
+        'name' => 'conftree'
+      },
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'section_vector'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'ap_xml_parse_input',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_xml_doc **',
+        'name' => 'pdoc'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_memnode_t *',
+    'name' => 'apr_allocator_alloc',
+    'args' => [
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_allocator_create',
+    'args' => [
+      {
+        'type' => 'apr_allocator_t **',
+        'name' => 'allocator'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_allocator_destroy',
+    'args' => [
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_allocator_free',
+    'args' => [
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      },
+      {
+        'type' => 'apr_memnode_t *',
+        'name' => 'memnode'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_allocator_max_free_set',
+    'args' => [
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_thread_mutex_t *',
+    'name' => 'apr_allocator_mutex_get',
+    'args' => [
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_allocator_mutex_set',
+    'args' => [
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      },
+      {
+        'type' => 'apr_thread_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'apr_allocator_owner_get',
+    'args' => [
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_allocator_owner_set',
+    'args' => [
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_app_initialize',
+    'args' => [
+      {
+        'type' => 'int *',
+        'name' => 'argc'
+      },
+      {
+        'type' => 'char const * const * *',
+        'name' => 'argv'
+      },
+      {
+        'type' => 'char const * const * *',
+        'name' => 'env'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'apr_array_append',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const apr_array_header_t *',
+        'name' => 'first'
+      },
+      {
+        'type' => 'const apr_array_header_t *',
+        'name' => 'second'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_array_cat',
+    'args' => [
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'dst'
+      },
+      {
+        'type' => 'const apr_array_header_t *',
+        'name' => 'src'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_array_clear',
+    'args' => [
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'arr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'apr_array_copy',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const apr_array_header_t *',
+        'name' => 'arr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'apr_array_copy_hdr',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const apr_array_header_t *',
+        'name' => 'arr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'apr_array_make',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nelts'
+      },
+      {
+        'type' => 'int',
+        'name' => 'elt_size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'apr_array_pop',
+    'args' => [
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'arr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_array_pstrcat',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const apr_array_header_t *',
+        'name' => 'arr'
+      },
+      {
+        'type' => 'const char',
+        'name' => 'sep'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'apr_array_push',
+    'args' => [
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'arr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_int64_t',
+    'name' => 'apr_atoi64',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_uint32_t',
+    'name' => 'apr_atomic_add32',
+    'args' => [
+      {
+        'type' => 'volatile apr_uint32_t *',
+        'name' => 'mem'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_uint32_t',
+    'name' => 'apr_atomic_cas32',
+    'args' => [
+      {
+        'type' => 'volatile apr_uint32_t *',
+        'name' => 'mem'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'with'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'cmp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void*',
+    'name' => 'apr_atomic_casptr',
+    'args' => [
+      {
+        'type' => 'volatile void **',
+        'name' => 'mem'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'with'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'cmp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_atomic_dec32',
+    'args' => [
+      {
+        'type' => 'volatile apr_uint32_t *',
+        'name' => 'mem'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_uint32_t',
+    'name' => 'apr_atomic_inc32',
+    'args' => [
+      {
+        'type' => 'volatile apr_uint32_t *',
+        'name' => 'mem'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_atomic_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_uint32_t',
+    'name' => 'apr_atomic_read32',
+    'args' => [
+      {
+        'type' => 'volatile apr_uint32_t *',
+        'name' => 'mem'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_atomic_set32',
+    'args' => [
+      {
+        'type' => 'volatile apr_uint32_t *',
+        'name' => 'mem'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_atomic_sub32',
+    'args' => [
+      {
+        'type' => 'volatile apr_uint32_t *',
+        'name' => 'mem'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_uint32_t',
+    'name' => 'apr_atomic_xchg32',
+    'args' => [
+      {
+        'type' => 'volatile apr_uint32_t *',
+        'name' => 'mem'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void*',
+    'name' => 'apr_atomic_xchgptr',
+    'args' => [
+      {
+        'type' => 'volatile void **',
+        'name' => 'mem'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'with'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_base64_decode',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'plain_dst'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'coded_src'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_base64_decode_binary',
+    'args' => [
+      {
+        'type' => 'unsigned char *',
+        'name' => 'plain_dst'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'coded_src'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_base64_decode_len',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'coded_src'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_base64_encode',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'coded_dst'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'plain_src'
+      },
+      {
+        'type' => 'int',
+        'name' => 'len_plain_src'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_base64_encode_binary',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'coded_dst'
+      },
+      {
+        'type' => 'const unsigned char *',
+        'name' => 'plain_src'
+      },
+      {
+        'type' => 'int',
+        'name' => 'len_plain_src'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_base64_encode_len',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_cleanup',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket_brigade *',
+    'name' => 'apr_brigade_create',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_destroy',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_flatten',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_brigade_insert_file',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'start'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'len'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_length',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'int',
+        'name' => 'read_all'
+      },
+      {
+        'type' => 'apr_off_t *',
+        'name' => 'length'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_partition',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'point'
+      },
+      {
+        'type' => 'apr_bucket **',
+        'name' => 'after_point'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_pflatten',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'c'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'len'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_printf',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_brigade_flush',
+        'name' => 'flush'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ctx'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg4'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_putc',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_brigade_flush',
+        'name' => 'flush'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ctx'
+      },
+      {
+        'type' => 'const char',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_puts',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'apr_brigade_flush',
+        'name' => 'flush'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ctx'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_putstrs',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_brigade_flush',
+        'name' => 'flush'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ctx'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg3'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket_brigade *',
+    'name' => 'apr_brigade_split',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'e'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket_brigade *',
+    'name' => 'apr_brigade_split_ex',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'e'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'a'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_split_line',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bbOut'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bbIn'
+      },
+      {
+        'type' => 'apr_read_type_e',
+        'name' => 'block'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'maxbytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_to_iovec',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'struct iovec *',
+        'name' => 'vec'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'nvec'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_vprintf',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_brigade_flush',
+        'name' => 'flush'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ctx'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => 'va_list',
+        'name' => 'va'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_vputstrs',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_brigade_flush',
+        'name' => 'flush'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ctx'
+      },
+      {
+        'type' => 'va_list',
+        'name' => 'va'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_write',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_brigade_flush',
+        'name' => 'flush'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ctx'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nbyte'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_brigade_writev',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_brigade_flush',
+        'name' => 'flush'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ctx'
+      },
+      {
+        'type' => 'const struct iovec *',
+        'name' => 'vec'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nvec'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'apr_bucket_alloc',
+    'args' => [
+      {
+        'type' => 'apr_size_t',
+        'name' => 'size'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket_alloc_t *',
+    'name' => 'apr_bucket_alloc_create',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket_alloc_t *',
+    'name' => 'apr_bucket_alloc_create_ex',
+    'args' => [
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_bucket_alloc_destroy',
+    'args' => [
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_bucket_copy_notimpl',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'e'
+      },
+      {
+        'type' => 'apr_bucket **',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_bucket_destroy_noop',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_eos_create',
+    'args' => [
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_eos_make',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_file_create',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'fd'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'offset'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_bucket_file_enable_mmap',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'int',
+        'name' => 'enabled'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_file_make',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'fd'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'offset'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_flush_create',
+    'args' => [
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_flush_make',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_bucket_free',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'block'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_heap_create',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nbyte'
+      },
+      {
+        'type' => 'void (*free_func)(void *data)',
+        'name' => 'arg2'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_heap_make',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nbyte'
+      },
+      {
+        'type' => 'void (*free_func)(void *data)',
+        'name' => 'arg3'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_immortal_create',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nbyte'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_immortal_make',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nbyte'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_mmap_create',
+    'args' => [
+      {
+        'type' => 'apr_mmap_t *',
+        'name' => 'mm'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'start'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'length'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_mmap_make',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_mmap_t *',
+        'name' => 'mm'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'start'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'length'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_pipe_create',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thispipe'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_pipe_make',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thispipe'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_pool_create',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'length'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_pool_make',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'length'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_bucket_setaside_noop',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_bucket_setaside_notimpl',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_bucket_shared_copy',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'a'
+      },
+      {
+        'type' => 'apr_bucket **',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_bucket_shared_destroy',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_shared_make',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'start'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'length'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_bucket_shared_split',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'point'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_bucket_simple_copy',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'a'
+      },
+      {
+        'type' => 'apr_bucket **',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_bucket_simple_split',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'point'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_socket_create',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'thissock'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_socket_make',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'thissock'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_bucket_split_notimpl',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'point'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_transient_create',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nbyte'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'apr_bucket_transient_make',
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nbyte'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_collapse_spaces',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'dest'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'src'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_cpystrn',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'dst'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'src'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'dst_size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_block_cleanup',
+    'args' => [
+      {
+        'type' => 'apr_crypto_block_t *',
+        'name' => 'ctx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_block_decrypt',
+    'args' => [
+      {
+        'type' => 'unsigned char **',
+        'name' => 'out'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'outlen'
+      },
+      {
+        'type' => 'const unsigned char *',
+        'name' => 'in'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'inlen'
+      },
+      {
+        'type' => 'apr_crypto_block_t *',
+        'name' => 'ctx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_block_decrypt_finish',
+    'args' => [
+      {
+        'type' => 'unsigned char *',
+        'name' => 'out'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'outlen'
+      },
+      {
+        'type' => 'apr_crypto_block_t *',
+        'name' => 'ctx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_block_decrypt_init',
+    'args' => [
+      {
+        'type' => 'apr_crypto_block_t **',
+        'name' => 'ctx'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'blockSize'
+      },
+      {
+        'type' => 'const unsigned char *',
+        'name' => 'iv'
+      },
+      {
+        'type' => 'const apr_crypto_key_t *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_block_encrypt',
+    'args' => [
+      {
+        'type' => 'unsigned char **',
+        'name' => 'out'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'outlen'
+      },
+      {
+        'type' => 'const unsigned char *',
+        'name' => 'in'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'inlen'
+      },
+      {
+        'type' => 'apr_crypto_block_t *',
+        'name' => 'ctx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_block_encrypt_finish',
+    'args' => [
+      {
+        'type' => 'unsigned char *',
+        'name' => 'out'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'outlen'
+      },
+      {
+        'type' => 'apr_crypto_block_t *',
+        'name' => 'ctx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_block_encrypt_init',
+    'args' => [
+      {
+        'type' => 'apr_crypto_block_t **',
+        'name' => 'ctx'
+      },
+      {
+        'type' => 'const unsigned char **',
+        'name' => 'iv'
+      },
+      {
+        'type' => 'const apr_crypto_key_t *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'blockSize'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_cleanup',
+    'args' => [
+      {
+        'type' => 'apr_crypto_t *',
+        'name' => 'f'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_clear',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_crypto_driver_name',
+    'args' => [
+      {
+        'type' => 'const apr_crypto_driver_t *',
+        'name' => 'driver'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_error',
+    'args' => [
+      {
+        'type' => 'const apu_err_t **',
+        'name' => 'result'
+      },
+      {
+        'type' => 'const apr_crypto_t *',
+        'name' => 'f'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_get_block_key_modes',
+    'args' => [
+      {
+        'type' => 'apr_hash_t **',
+        'name' => 'modes'
+      },
+      {
+        'type' => 'const apr_crypto_t *',
+        'name' => 'f'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_get_block_key_types',
+    'args' => [
+      {
+        'type' => 'apr_hash_t **',
+        'name' => 'types'
+      },
+      {
+        'type' => 'const apr_crypto_t *',
+        'name' => 'f'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_get_driver',
+    'args' => [
+      {
+        'type' => 'const apr_crypto_driver_t **',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'params'
+      },
+      {
+        'type' => 'const apu_err_t **',
+        'name' => 'result'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_make',
+    'args' => [
+      {
+        'type' => 'apr_crypto_t **',
+        'name' => 'f'
+      },
+      {
+        'type' => 'const apr_crypto_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'params'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_passphrase',
+    'args' => [
+      {
+        'type' => 'apr_crypto_key_t **',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'ivSize'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'pass'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'passLen'
+      },
+      {
+        'type' => 'const unsigned char *',
+        'name' => 'salt'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'saltLen'
+      },
+      {
+        'type' => 'const apr_crypto_block_key_type_e',
+        'name' => 'type'
+      },
+      {
+        'type' => 'const apr_crypto_block_key_mode_e',
+        'name' => 'mode'
+      },
+      {
+        'type' => 'const int',
+        'name' => 'doPad'
+      },
+      {
+        'type' => 'const int',
+        'name' => 'iterations'
+      },
+      {
+        'type' => 'const apr_crypto_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_crypto_hash_t *',
+    'name' => 'apr_crypto_sha256_new',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_crypto_shutdown',
+    'args' => [
+      {
+        'type' => 'const apr_crypto_driver_t *',
+        'name' => 'driver'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_ctime',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'date_str'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_date_checkmask',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'mask'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_time_t',
+    'name' => 'apr_date_parse_http',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'date'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_time_t',
+    'name' => 'apr_date_parse_rfc',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'date'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_check_conn',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dbd_close',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dbd_datum_get',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_dbd_row_t *',
+        'name' => 'row'
+      },
+      {
+        'type' => 'int',
+        'name' => 'col'
+      },
+      {
+        'type' => 'apr_dbd_type_e',
+        'name' => 'type'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char*',
+    'name' => 'apr_dbd_error',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'int',
+        'name' => 'errnum'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char*',
+    'name' => 'apr_dbd_escape',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'string'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dbd_get_driver',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'const apr_dbd_driver_t **',
+        'name' => 'driver'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char*',
+    'name' => 'apr_dbd_get_entry',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_dbd_row_t *',
+        'name' => 'row'
+      },
+      {
+        'type' => 'int',
+        'name' => 'col'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char*',
+    'name' => 'apr_dbd_get_name',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_dbd_results_t *',
+        'name' => 'res'
+      },
+      {
+        'type' => 'int',
+        'name' => 'col'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_get_row',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_results_t *',
+        'name' => 'res'
+      },
+      {
+        'type' => 'apr_dbd_row_t **',
+        'name' => 'row'
+      },
+      {
+        'type' => 'int',
+        'name' => 'rownum'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dbd_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char*',
+    'name' => 'apr_dbd_name',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void*',
+    'name' => 'apr_dbd_native_handle',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_num_cols',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_dbd_results_t *',
+        'name' => 'res'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_num_tuples',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_dbd_results_t *',
+        'name' => 'res'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dbd_open',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'params'
+      },
+      {
+        'type' => 'apr_dbd_t **',
+        'name' => 'handle'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dbd_open_ex',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'params'
+      },
+      {
+        'type' => 'apr_dbd_t **',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'error'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_pbquery',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'nrows'
+      },
+      {
+        'type' => 'apr_dbd_prepared_t *',
+        'name' => 'statement'
+      },
+      {
+        'type' => 'const void **',
+        'name' => 'args'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_pbselect',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'apr_dbd_results_t **',
+        'name' => 'res'
+      },
+      {
+        'type' => 'apr_dbd_prepared_t *',
+        'name' => 'statement'
+      },
+      {
+        'type' => 'int',
+        'name' => 'random'
+      },
+      {
+        'type' => 'const void **',
+        'name' => 'args'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_pquery',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'nrows'
+      },
+      {
+        'type' => 'apr_dbd_prepared_t *',
+        'name' => 'statement'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nargs'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'args'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_prepare',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'query'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'label'
+      },
+      {
+        'type' => 'apr_dbd_prepared_t **',
+        'name' => 'statement'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_pselect',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'apr_dbd_results_t **',
+        'name' => 'res'
+      },
+      {
+        'type' => 'apr_dbd_prepared_t *',
+        'name' => 'statement'
+      },
+      {
+        'type' => 'int',
+        'name' => 'random'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nargs'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'args'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_pvbquery',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'nrows'
+      },
+      {
+        'type' => 'apr_dbd_prepared_t *',
+        'name' => 'statement'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg5'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_pvbselect',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'apr_dbd_results_t **',
+        'name' => 'res'
+      },
+      {
+        'type' => 'apr_dbd_prepared_t *',
+        'name' => 'statement'
+      },
+      {
+        'type' => 'int',
+        'name' => 'random'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg6'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_pvquery',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'nrows'
+      },
+      {
+        'type' => 'apr_dbd_prepared_t *',
+        'name' => 'statement'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg5'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_pvselect',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'apr_dbd_results_t **',
+        'name' => 'res'
+      },
+      {
+        'type' => 'apr_dbd_prepared_t *',
+        'name' => 'statement'
+      },
+      {
+        'type' => 'int',
+        'name' => 'random'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg6'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_query',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'nrows'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'statement'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_select',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'apr_dbd_results_t **',
+        'name' => 'res'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'statement'
+      },
+      {
+        'type' => 'int',
+        'name' => 'random'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_set_dbname',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_transaction_end',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_transaction_t *',
+        'name' => 'trans'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_transaction_mode_get',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_dbd_transaction_t *',
+        'name' => 'trans'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_transaction_mode_set',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_dbd_transaction_t *',
+        'name' => 'trans'
+      },
+      {
+        'type' => 'int',
+        'name' => 'mode'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbd_transaction_start',
+    'args' => [
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'apr_dbd_transaction_t **',
+        'name' => 'trans'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_dbm_close',
+    'args' => [
+      {
+        'type' => 'apr_dbm_t *',
+        'name' => 'dbm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dbm_delete',
+    'args' => [
+      {
+        'type' => 'apr_dbm_t *',
+        'name' => 'dbm'
+      },
+      {
+        'type' => 'apr_datum_t',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_dbm_exists',
+    'args' => [
+      {
+        'type' => 'apr_dbm_t *',
+        'name' => 'dbm'
+      },
+      {
+        'type' => 'apr_datum_t',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dbm_fetch',
+    'args' => [
+      {
+        'type' => 'apr_dbm_t *',
+        'name' => 'dbm'
+      },
+      {
+        'type' => 'apr_datum_t',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_datum_t *',
+        'name' => 'pvalue'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dbm_firstkey',
+    'args' => [
+      {
+        'type' => 'apr_dbm_t *',
+        'name' => 'dbm'
+      },
+      {
+        'type' => 'apr_datum_t *',
+        'name' => 'pkey'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_dbm_freedatum',
+    'args' => [
+      {
+        'type' => 'apr_dbm_t *',
+        'name' => 'dbm'
+      },
+      {
+        'type' => 'apr_datum_t',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_dbm_get_usednames',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'pathname'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'used1'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'used2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dbm_get_usednames_ex',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'type'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'pathname'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'used1'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'used2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_dbm_geterror',
+    'args' => [
+      {
+        'type' => 'apr_dbm_t *',
+        'name' => 'dbm'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'errcode'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'errbuf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'errbufsize'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dbm_nextkey',
+    'args' => [
+      {
+        'type' => 'apr_dbm_t *',
+        'name' => 'dbm'
+      },
+      {
+        'type' => 'apr_datum_t *',
+        'name' => 'pkey'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dbm_open',
+    'args' => [
+      {
+        'type' => 'apr_dbm_t **',
+        'name' => 'dbm'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'mode'
+      },
+      {
+        'type' => 'apr_fileperms_t',
+        'name' => 'perm'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cntxt'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dbm_open_ex',
+    'args' => [
+      {
+        'type' => 'apr_dbm_t **',
+        'name' => 'dbm'
+      },
+      {
+        'type' => 'const char*',
+        'name' => 'type'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'mode'
+      },
+      {
+        'type' => 'apr_fileperms_t',
+        'name' => 'perm'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cntxt'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dbm_store',
+    'args' => [
+      {
+        'type' => 'apr_dbm_t *',
+        'name' => 'dbm'
+      },
+      {
+        'type' => 'apr_datum_t',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_datum_t',
+        'name' => 'value'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dir_close',
+    'args' => [
+      {
+        'type' => 'apr_dir_t *',
+        'name' => 'thedir'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dir_make',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'apr_fileperms_t',
+        'name' => 'perm'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dir_make_recursive',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'apr_fileperms_t',
+        'name' => 'perm'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dir_open',
+    'args' => [
+      {
+        'type' => 'apr_dir_t **',
+        'name' => 'new_dir'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'dirname'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dir_read',
+    'args' => [
+      {
+        'type' => 'apr_finfo_t *',
+        'name' => 'finfo'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'wanted'
+      },
+      {
+        'type' => 'apr_dir_t *',
+        'name' => 'thedir'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dir_remove',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dir_rewind',
+    'args' => [
+      {
+        'type' => 'apr_dir_t *',
+        'name' => 'thedir'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_dso_error',
+    'args' => [
+      {
+        'type' => 'apr_dso_handle_t *',
+        'name' => 'dso'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'bufsize'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dso_load',
+    'args' => [
+      {
+        'type' => 'apr_dso_handle_t **',
+        'name' => 'res_handle'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ctx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dso_sym',
+    'args' => [
+      {
+        'type' => 'apr_dso_handle_sym_t *',
+        'name' => 'ressym'
+      },
+      {
+        'type' => 'apr_dso_handle_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'symname'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_dso_unload',
+    'args' => [
+      {
+        'type' => 'apr_dso_handle_t *',
+        'name' => 'handle'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_dynamic_fn_register',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'apr_opt_fn_t *',
+        'name' => 'pfn'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_opt_fn_t *',
+    'name' => 'apr_dynamic_fn_retrieve',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_env_delete',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'envvar'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_env_get',
+    'args' => [
+      {
+        'type' => 'char **',
+        'name' => 'value'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'envvar'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_env_set',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'envvar'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'value'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_append',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'from_path'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'to_path'
+      },
+      {
+        'type' => 'apr_fileperms_t',
+        'name' => 'perms'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_attrs_set',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      },
+      {
+        'type' => 'apr_fileattrs_t',
+        'name' => 'attributes'
+      },
+      {
+        'type' => 'apr_fileattrs_t',
+        'name' => 'attr_mask'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_buffer_set',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'bufsize'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_file_buffer_size_get',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_close',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'file'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_copy',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'from_path'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'to_path'
+      },
+      {
+        'type' => 'apr_fileperms_t',
+        'name' => 'perms'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_data_get',
+    'args' => [
+      {
+        'type' => 'void **',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'file'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_data_set',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'file'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_status_t (*cleanup)(void *)',
+        'name' => 'arg3'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_datasync',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_dup',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'new_file'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'old_file'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_dup2',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'new_file'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'old_file'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_eof',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'fptr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_int32_t',
+    'name' => 'apr_file_flags_get',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'f'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_flush',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_getc',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'ch'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_gets',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'str'
+      },
+      {
+        'type' => 'int',
+        'name' => 'len'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_info_get',
+    'args' => [
+      {
+        'type' => 'apr_finfo_t *',
+        'name' => 'finfo'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'wanted'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_inherit_set',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_inherit_unset',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_link',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'from_path'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'to_path'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_lock',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_mktemp',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'fp'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'templ'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_mtime_set',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'mtime'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_name_get',
+    'args' => [
+      {
+        'type' => 'const char **',
+        'name' => 'new_path'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_namedpipe_create',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'filename'
+      },
+      {
+        'type' => 'apr_fileperms_t',
+        'name' => 'perm'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_open',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'newf'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flag'
+      },
+      {
+        'type' => 'apr_fileperms_t',
+        'name' => 'perm'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_open_flags_stderr',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_open_flags_stdin',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_open_flags_stdout',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_open_stderr',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_open_stdin',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_open_stdout',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_perms_set',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      },
+      {
+        'type' => 'apr_fileperms_t',
+        'name' => 'perms'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_pipe_create',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'in'
+      },
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'out'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_pipe_create_ex',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'in'
+      },
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'out'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'blocking'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_pipe_timeout_get',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thepipe'
+      },
+      {
+        'type' => 'apr_interval_time_t *',
+        'name' => 'timeout'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_pipe_timeout_set',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thepipe'
+      },
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 'timeout'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'apr_file_pool_get',
+    'args' => [
+      {
+        'type' => 'const apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_file_printf',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'fptr'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'format'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_putc',
+    'args' => [
+      {
+        'type' => 'char',
+        'name' => 'ch'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_puts',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_read',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'nbytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_read_full',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nbytes'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'bytes_read'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_remove',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_rename',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'from_path'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'to_path'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_seek',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'apr_seek_where_t',
+        'name' => 'where'
+      },
+      {
+        'type' => 'apr_off_t *',
+        'name' => 'offset'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_setaside',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'new_file'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'old_file'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_sync',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_trunc',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'fp'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'offset'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_ungetc',
+    'args' => [
+      {
+        'type' => 'char',
+        'name' => 'ch'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_unlock',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_write',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'nbytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_write_full',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nbytes'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'bytes_written'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_writev',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'const struct iovec *',
+        'name' => 'vec'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nvec'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'nbytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_file_writev_full',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'const struct iovec *',
+        'name' => 'vec'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nvec'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'nbytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_filepath_encoding',
+    'args' => [
+      {
+        'type' => 'int *',
+        'name' => 'style'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_filepath_get',
+    'args' => [
+      {
+        'type' => 'char **',
+        'name' => 'path'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_filepath_list_merge',
+    'args' => [
+      {
+        'type' => 'char **',
+        'name' => 'liststr'
+      },
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'pathelts'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_filepath_list_split',
+    'args' => [
+      {
+        'type' => 'apr_array_header_t **',
+        'name' => 'pathelts'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'liststr'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_filepath_merge',
+    'args' => [
+      {
+        'type' => 'char **',
+        'name' => 'newpath'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'rootpath'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'addpath'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_filepath_name_get',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'pathname'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_filepath_root',
+    'args' => [
+      {
+        'type' => 'const char **',
+        'name' => 'rootpath'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'filepath'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_filepath_set',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_fnmatch',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'pattern'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'strings'
+      },
+      {
+        'type' => 'int',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_fnmatch_test',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'pattern'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_generate_random_bytes',
+    'args' => [
+      {
+        'type' => 'unsigned char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'length'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_gethostname',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'int',
+        'name' => 'len'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_getnameinfo',
+    'args' => [
+      {
+        'type' => 'char **',
+        'name' => 'hostname'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'sa'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_getopt',
+    'args' => [
+      {
+        'type' => 'apr_getopt_t *',
+        'name' => 'os'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'opts'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'option_ch'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'option_arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_getopt_init',
+    'args' => [
+      {
+        'type' => 'apr_getopt_t **',
+        'name' => 'os'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      },
+      {
+        'type' => 'int',
+        'name' => 'argc'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'argv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_getopt_long',
+    'args' => [
+      {
+        'type' => 'apr_getopt_t *',
+        'name' => 'os'
+      },
+      {
+        'type' => 'const apr_getopt_option_t *',
+        'name' => 'opts'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'option_ch'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'option_arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_getservbyname',
+    'args' => [
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'sockaddr'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'servname'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_gid_get',
+    'args' => [
+      {
+        'type' => 'apr_gid_t *',
+        'name' => 'groupid'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'groupname'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_gid_name_get',
+    'args' => [
+      {
+        'type' => 'char **',
+        'name' => 'groupname'
+      },
+      {
+        'type' => 'apr_gid_t',
+        'name' => 'groupid'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_global_mutex_child_init',
+    'args' => [
+      {
+        'type' => 'apr_global_mutex_t **',
+        'name' => 'mutex'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_global_mutex_create',
+    'args' => [
+      {
+        'type' => 'apr_global_mutex_t **',
+        'name' => 'mutex'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      },
+      {
+        'type' => 'apr_lockmech_e',
+        'name' => 'mech'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_global_mutex_destroy',
+    'args' => [
+      {
+        'type' => 'apr_global_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_global_mutex_lock',
+    'args' => [
+      {
+        'type' => 'apr_global_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_global_mutex_lockfile',
+    'args' => [
+      {
+        'type' => 'apr_global_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_global_mutex_name',
+    'args' => [
+      {
+        'type' => 'apr_global_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'apr_global_mutex_pool_get',
+    'args' => [
+      {
+        'type' => 'const apr_global_mutex_t *',
+        'name' => 'theglobal_mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_global_mutex_trylock',
+    'args' => [
+      {
+        'type' => 'apr_global_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_global_mutex_unlock',
+    'args' => [
+      {
+        'type' => 'apr_global_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_hash_clear',
+    'args' => [
+      {
+        'type' => 'apr_hash_t *',
+        'name' => 'ht'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_hash_t *',
+    'name' => 'apr_hash_copy',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const apr_hash_t *',
+        'name' => 'h'
+      }
+    ]
+  },
+  {
+    'return_type' => 'unsigned int',
+    'name' => 'apr_hash_count',
+    'args' => [
+      {
+        'type' => 'apr_hash_t *',
+        'name' => 'ht'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_hash_do',
+    'args' => [
+      {
+        'type' => 'apr_hash_do_callback_fn_t *comp',
+        'name' => 'arg0'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'rec'
+      },
+      {
+        'type' => 'const apr_hash_t *',
+        'name' => 'ht'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_hash_index_t *',
+    'name' => 'apr_hash_first',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_hash_t *',
+        'name' => 'ht'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'apr_hash_get',
+    'args' => [
+      {
+        'type' => 'apr_hash_t *',
+        'name' => 'ht'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_ssize_t',
+        'name' => 'klen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_hash_t *',
+    'name' => 'apr_hash_make',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_hash_t *',
+    'name' => 'apr_hash_make_custom',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_hashfunc_t',
+        'name' => 'hash_func'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_hash_t *',
+    'name' => 'apr_hash_merge',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const apr_hash_t *',
+        'name' => 'h1'
+      },
+      {
+        'type' => 'const apr_hash_t *',
+        'name' => 'h2'
+      },
+      {
+        'type' => 'void * (*merger)(apr_pool_t *p, const void *key, apr_ssize_t klen, const void *h1_val, const void *h2_val, const void *data)',
+        'name' => 'arg3'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_hash_index_t *',
+    'name' => 'apr_hash_next',
+    'args' => [
+      {
+        'type' => 'apr_hash_index_t *',
+        'name' => 'hi'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_hash_t *',
+    'name' => 'apr_hash_overlay',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const apr_hash_t *',
+        'name' => 'overlay'
+      },
+      {
+        'type' => 'const apr_hash_t *',
+        'name' => 'base'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'apr_hash_pool_get',
+    'args' => [
+      {
+        'type' => 'const apr_hash_t *',
+        'name' => 'thehash'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_hash_set',
+    'args' => [
+      {
+        'type' => 'apr_hash_t *',
+        'name' => 'ht'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_ssize_t',
+        'name' => 'klen'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_hash_this',
+    'args' => [
+      {
+        'type' => 'apr_hash_index_t *',
+        'name' => 'hi'
+      },
+      {
+        'type' => 'const void **',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_ssize_t *',
+        'name' => 'klen'
+      },
+      {
+        'type' => 'void **',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'unsigned int',
+    'name' => 'apr_hashfunc_default',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_ssize_t *',
+        'name' => 'klen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_hook_debug_show',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_hook_deregister_all',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_hook_sort_all',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_hook_sort_register',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'szHookName'
+      },
+      {
+        'type' => 'apr_array_header_t **',
+        'name' => 'aHooks'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_initialize',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_ipsubnet_create',
+    'args' => [
+      {
+        'type' => 'apr_ipsubnet_t **',
+        'name' => 'ipsub'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'ipstr'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'mask_or_numbits'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_ipsubnet_test',
+    'args' => [
+      {
+        'type' => 'apr_ipsubnet_t *',
+        'name' => 'ipsub'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'sa'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_is_empty_array',
+    'args' => [
+      {
+        'type' => 'const apr_array_header_t *',
+        'name' => 'a'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_is_empty_table',
+    'args' => [
+      {
+        'type' => 'const apr_table_t *',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_itoa',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'int',
+        'name' => 'n'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_ldap_get_option',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'LDAP *',
+        'name' => 'ldap'
+      },
+      {
+        'type' => 'int',
+        'name' => 'option'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'outvalue'
+      },
+      {
+        'type' => 'apr_ldap_err_t **',
+        'name' => 'result_err'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_ldap_info',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_ldap_err_t **',
+        'name' => 'result_err'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_ldap_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'LDAP **',
+        'name' => 'ldap'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'hostname'
+      },
+      {
+        'type' => 'int',
+        'name' => 'portno'
+      },
+      {
+        'type' => 'int',
+        'name' => 'secure'
+      },
+      {
+        'type' => 'apr_ldap_err_t **',
+        'name' => 'result_err'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_ldap_is_ldap_url',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'url'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_ldap_is_ldapi_url',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'url'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_ldap_is_ldaps_url',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'url'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_ldap_rebind_add',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'LDAP *',
+        'name' => 'ld'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'bindDN'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'bindPW'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_ldap_rebind_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_ldap_rebind_remove',
+    'args' => [
+      {
+        'type' => 'LDAP *',
+        'name' => 'ld'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_ldap_set_option',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'LDAP *',
+        'name' => 'ldap'
+      },
+      {
+        'type' => 'int',
+        'name' => 'option'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'invalue'
+      },
+      {
+        'type' => 'apr_ldap_err_t **',
+        'name' => 'result_err'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_ldap_ssl_deinit',
+    'args' => []
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_ldap_ssl_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'cert_auth_file'
+      },
+      {
+        'type' => 'int',
+        'name' => 'cert_file_type'
+      },
+      {
+        'type' => 'apr_ldap_err_t **',
+        'name' => 'result_err'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_ldap_url_parse',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'url_in'
+      },
+      {
+        'type' => 'apr_ldap_url_desc_t **',
+        'name' => 'ludpp'
+      },
+      {
+        'type' => 'apr_ldap_err_t **',
+        'name' => 'result_err'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_ldap_url_parse_ext',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'url_in'
+      },
+      {
+        'type' => 'apr_ldap_url_desc_t **',
+        'name' => 'ludpp'
+      },
+      {
+        'type' => 'apr_ldap_err_t **',
+        'name' => 'result_err'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_ltoa',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'long',
+        'name' => 'n'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_match_glob',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'pattern'
+      },
+      {
+        'type' => 'apr_array_header_t **',
+        'name' => 'result'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_mcast_hops',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_byte_t',
+        'name' => 'ttl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_mcast_interface',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'iface'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_mcast_join',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'join'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'iface'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'source'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_mcast_leave',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'addr'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'iface'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'source'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_mcast_loopback',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_byte_t',
+        'name' => 'opt'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_md4',
+    'args' => [
+      {
+        'type' => 'unsigned char',
+        'name' => 'digest'
+      },
+      {
+        'type' => 'const unsigned char *',
+        'name' => 'input'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'inputLen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_md4_final',
+    'args' => [
+      {
+        'type' => 'unsigned char',
+        'name' => 'digest'
+      },
+      {
+        'type' => 'apr_md4_ctx_t *',
+        'name' => 'context'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_md4_init',
+    'args' => [
+      {
+        'type' => 'apr_md4_ctx_t *',
+        'name' => 'context'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_md4_set_xlate',
+    'args' => [
+      {
+        'type' => 'apr_md4_ctx_t *',
+        'name' => 'context'
+      },
+      {
+        'type' => 'apr_xlate_t *',
+        'name' => 'xlate'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_md4_update',
+    'args' => [
+      {
+        'type' => 'apr_md4_ctx_t *',
+        'name' => 'context'
+      },
+      {
+        'type' => 'const unsigned char *',
+        'name' => 'input'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'inputLen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_md5',
+    'args' => [
+      {
+        'type' => 'unsigned char',
+        'name' => 'digest'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'input'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'inputLen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_md5_encode',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'password'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'salt'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'result'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nbytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_md5_final',
+    'args' => [
+      {
+        'type' => 'unsigned char',
+        'name' => 'digest'
+      },
+      {
+        'type' => 'apr_md5_ctx_t *',
+        'name' => 'context'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_md5_init',
+    'args' => [
+      {
+        'type' => 'apr_md5_ctx_t *',
+        'name' => 'context'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_md5_set_xlate',
+    'args' => [
+      {
+        'type' => 'apr_md5_ctx_t *',
+        'name' => 'context'
+      },
+      {
+        'type' => 'apr_xlate_t *',
+        'name' => 'xlate'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_md5_update',
+    'args' => [
+      {
+        'type' => 'apr_md5_ctx_t *',
+        'name' => 'context'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'input'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'inputLen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_add',
+    'args' => [
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'baton'
+      },
+      {
+        'type' => 'const apr_size_t',
+        'name' => 'data_size'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'timeout'
+      },
+      {
+        'type' => 'apr_uint16_t',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_memcache_add_multget_key',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'data_pool'
+      },
+      {
+        'type' => 'const char*',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_hash_t **',
+        'name' => 'values'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_add_server',
+    'args' => [
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'apr_memcache_server_t *',
+        'name' => 'server'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_create',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_uint16_t',
+        'name' => 'max_servers'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_memcache_t **',
+        'name' => 'mc'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_decr',
+    'args' => [
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'n'
+      },
+      {
+        'type' => 'apr_uint32_t *',
+        'name' => 'new_value'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_delete',
+    'args' => [
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'timeout'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_disable_server',
+    'args' => [
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'apr_memcache_server_t *',
+        'name' => 'ms'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_enable_server',
+    'args' => [
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'apr_memcache_server_t *',
+        'name' => 'ms'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_memcache_server_t *',
+    'name' => 'apr_memcache_find_server',
+    'args' => [
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'host'
+      },
+      {
+        'type' => 'apr_port_t',
+        'name' => 'port'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_memcache_server_t *',
+    'name' => 'apr_memcache_find_server_hash',
+    'args' => [
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'const apr_uint32_t',
+        'name' => 'hash'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_memcache_server_t *',
+    'name' => 'apr_memcache_find_server_hash_default',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'baton'
+      },
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'const apr_uint32_t',
+        'name' => 'hash'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_getp',
+    'args' => [
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char*',
+        'name' => 'key'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'baton'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'len'
+      },
+      {
+        'type' => 'apr_uint16_t *',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_uint32_t',
+    'name' => 'apr_memcache_hash',
+    'args' => [
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const apr_size_t',
+        'name' => 'data_len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_uint32_t',
+    'name' => 'apr_memcache_hash_crc32',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'baton'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const apr_size_t',
+        'name' => 'data_len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_uint32_t',
+    'name' => 'apr_memcache_hash_default',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'baton'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const apr_size_t',
+        'name' => 'data_len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_incr',
+    'args' => [
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'n'
+      },
+      {
+        'type' => 'apr_uint32_t *',
+        'name' => 'nv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_multgetp',
+    'args' => [
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'temp_pool'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'data_pool'
+      },
+      {
+        'type' => 'apr_hash_t *',
+        'name' => 'values'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_replace',
+    'args' => [
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'baton'
+      },
+      {
+        'type' => 'const apr_size_t',
+        'name' => 'data_size'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'timeout'
+      },
+      {
+        'type' => 'apr_uint16_t',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_server_create',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'host'
+      },
+      {
+        'type' => 'apr_port_t',
+        'name' => 'port'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'min'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'smax'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'max'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'ttl'
+      },
+      {
+        'type' => 'apr_memcache_server_t **',
+        'name' => 'ns'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_set',
+    'args' => [
+      {
+        'type' => 'apr_memcache_t *',
+        'name' => 'mc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'baton'
+      },
+      {
+        'type' => 'const apr_size_t',
+        'name' => 'data_size'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'timeout'
+      },
+      {
+        'type' => 'apr_uint16_t',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_stats',
+    'args' => [
+      {
+        'type' => 'apr_memcache_server_t *',
+        'name' => 'ms'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_memcache_stats_t **',
+        'name' => 'stats'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_memcache_version',
+    'args' => [
+      {
+        'type' => 'apr_memcache_server_t *',
+        'name' => 'ms'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'baton'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_mmap_create',
+    'args' => [
+      {
+        'type' => 'apr_mmap_t **',
+        'name' => 'newmmap'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'file'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'offset'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'size'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flag'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cntxt'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_mmap_delete',
+    'args' => [
+      {
+        'type' => 'apr_mmap_t *',
+        'name' => 'mm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_mmap_dup',
+    'args' => [
+      {
+        'type' => 'apr_mmap_t **',
+        'name' => 'new_mmap'
+      },
+      {
+        'type' => 'apr_mmap_t *',
+        'name' => 'old_mmap'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_mmap_offset',
+    'args' => [
+      {
+        'type' => 'void **',
+        'name' => 'addr'
+      },
+      {
+        'type' => 'apr_mmap_t *',
+        'name' => 'mm'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'offset'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_off_t_toa',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'n'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_optional_hook_add',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'void (*pfn)(void)',
+        'name' => 'arg1'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPre'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSucc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'apr_optional_hook_get',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char*',
+    'name' => 'apr_os_default_encoding',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_dir_get',
+    'args' => [
+      {
+        'type' => 'apr_os_dir_t **',
+        'name' => 'thedir'
+      },
+      {
+        'type' => 'apr_dir_t *',
+        'name' => 'dir'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_dir_put',
+    'args' => [
+      {
+        'type' => 'apr_dir_t **',
+        'name' => 'dir'
+      },
+      {
+        'type' => 'apr_os_dir_t *',
+        'name' => 'thedir'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_dso_handle_get',
+    'args' => [
+      {
+        'type' => 'apr_os_dso_handle_t *',
+        'name' => 'dso'
+      },
+      {
+        'type' => 'apr_dso_handle_t *',
+        'name' => 'aprdso'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_dso_handle_put',
+    'args' => [
+      {
+        'type' => 'apr_dso_handle_t **',
+        'name' => 'dso'
+      },
+      {
+        'type' => 'apr_os_dso_handle_t',
+        'name' => 'thedso'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_exp_time_get',
+    'args' => [
+      {
+        'type' => 'apr_os_exp_time_t **',
+        'name' => 'ostime'
+      },
+      {
+        'type' => 'apr_time_exp_t *',
+        'name' => 'aprtime'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_exp_time_put',
+    'args' => [
+      {
+        'type' => 'apr_time_exp_t *',
+        'name' => 'aprtime'
+      },
+      {
+        'type' => 'apr_os_exp_time_t **',
+        'name' => 'ostime'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_file_get',
+    'args' => [
+      {
+        'type' => 'apr_os_file_t *',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'file'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_file_put',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'file'
+      },
+      {
+        'type' => 'apr_os_file_t *',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_global_mutex_get',
+    'args' => [
+      {
+        'type' => 'apr_os_global_mutex_t *',
+        'name' => 'ospmutex'
+      },
+      {
+        'type' => 'apr_global_mutex_t *',
+        'name' => 'pmutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_imp_time_get',
+    'args' => [
+      {
+        'type' => 'apr_os_imp_time_t **',
+        'name' => 'ostime'
+      },
+      {
+        'type' => 'apr_time_t *',
+        'name' => 'aprtime'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_imp_time_put',
+    'args' => [
+      {
+        'type' => 'apr_time_t *',
+        'name' => 'aprtime'
+      },
+      {
+        'type' => 'apr_os_imp_time_t **',
+        'name' => 'ostime'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char*',
+    'name' => 'apr_os_locale_encoding',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_pipe_put',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'file'
+      },
+      {
+        'type' => 'apr_os_file_t *',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_pipe_put_ex',
+    'args' => [
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'file'
+      },
+      {
+        'type' => 'apr_os_file_t *',
+        'name' => 'thefile'
+      },
+      {
+        'type' => 'int',
+        'name' => 'register_cleanup'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_proc_mutex_get',
+    'args' => [
+      {
+        'type' => 'apr_os_proc_mutex_t *',
+        'name' => 'ospmutex'
+      },
+      {
+        'type' => 'apr_proc_mutex_t *',
+        'name' => 'pmutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_proc_mutex_put',
+    'args' => [
+      {
+        'type' => 'apr_proc_mutex_t **',
+        'name' => 'pmutex'
+      },
+      {
+        'type' => 'apr_os_proc_mutex_t *',
+        'name' => 'ospmutex'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_shm_get',
+    'args' => [
+      {
+        'type' => 'apr_os_shm_t *',
+        'name' => 'osshm'
+      },
+      {
+        'type' => 'apr_shm_t *',
+        'name' => 'shm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_shm_put',
+    'args' => [
+      {
+        'type' => 'apr_shm_t **',
+        'name' => 'shm'
+      },
+      {
+        'type' => 'apr_os_shm_t *',
+        'name' => 'osshm'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_sock_get',
+    'args' => [
+      {
+        'type' => 'apr_os_sock_t *',
+        'name' => 'thesock'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_sock_make',
+    'args' => [
+      {
+        'type' => 'apr_socket_t **',
+        'name' => 'apr_sock'
+      },
+      {
+        'type' => 'apr_os_sock_info_t *',
+        'name' => 'os_sock_info'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_sock_put',
+    'args' => [
+      {
+        'type' => 'apr_socket_t **',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_os_sock_t *',
+        'name' => 'thesock'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_os_thread_t',
+    'name' => 'apr_os_thread_current',
+    'args' => []
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_os_thread_equal',
+    'args' => [
+      {
+        'type' => 'apr_os_thread_t',
+        'name' => 'tid1'
+      },
+      {
+        'type' => 'apr_os_thread_t',
+        'name' => 'tid2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_thread_get',
+    'args' => [
+      {
+        'type' => 'apr_os_thread_t **',
+        'name' => 'thethd'
+      },
+      {
+        'type' => 'apr_thread_t *',
+        'name' => 'thd'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_thread_put',
+    'args' => [
+      {
+        'type' => 'apr_thread_t **',
+        'name' => 'thd'
+      },
+      {
+        'type' => 'apr_os_thread_t *',
+        'name' => 'thethd'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_threadkey_get',
+    'args' => [
+      {
+        'type' => 'apr_os_threadkey_t *',
+        'name' => 'thekey'
+      },
+      {
+        'type' => 'apr_threadkey_t *',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_threadkey_put',
+    'args' => [
+      {
+        'type' => 'apr_threadkey_t **',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_os_threadkey_t *',
+        'name' => 'thekey'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_os_uuid_get',
+    'args' => [
+      {
+        'type' => 'unsigned char *',
+        'name' => 'uuid_data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'apr_palloc',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'apr_palloc_debug',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'size'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'file_line'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_parse_addr_port',
+    'args' => [
+      {
+        'type' => 'char **',
+        'name' => 'addr'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'scope_id'
+      },
+      {
+        'type' => 'apr_port_t *',
+        'name' => 'port'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_password_get',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'prompt'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'pwbuf'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'bufsize'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_password_validate',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'passwd'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'hash'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'apr_pcalloc_debug',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'size'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'file_line'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'apr_pmemdup',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'm'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'n'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_poll',
+    'args' => [
+      {
+        'type' => 'apr_pollfd_t *',
+        'name' => 'aprset'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'numsock'
+      },
+      {
+        'type' => 'apr_int32_t *',
+        'name' => 'nsds'
+      },
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 'timeout'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_poll_method_defname',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pollcb_add',
+    'args' => [
+      {
+        'type' => 'apr_pollcb_t *',
+        'name' => 'pollcb'
+      },
+      {
+        'type' => 'apr_pollfd_t *',
+        'name' => 'descriptor'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pollcb_create',
+    'args' => [
+      {
+        'type' => 'apr_pollcb_t **',
+        'name' => 'pollcb'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'size'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pollcb_create_ex',
+    'args' => [
+      {
+        'type' => 'apr_pollcb_t **',
+        'name' => 'pollcb'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'size'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_pollset_method_e',
+        'name' => 'method'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pollcb_poll',
+    'args' => [
+      {
+        'type' => 'apr_pollcb_t *',
+        'name' => 'pollcb'
+      },
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 'timeout'
+      },
+      {
+        'type' => 'apr_pollcb_cb_t',
+        'name' => 'func'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'baton'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pollcb_remove',
+    'args' => [
+      {
+        'type' => 'apr_pollcb_t *',
+        'name' => 'pollcb'
+      },
+      {
+        'type' => 'apr_pollfd_t *',
+        'name' => 'descriptor'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pollset_add',
+    'args' => [
+      {
+        'type' => 'apr_pollset_t *',
+        'name' => 'pollset'
+      },
+      {
+        'type' => 'const apr_pollfd_t *',
+        'name' => 'descriptor'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pollset_create',
+    'args' => [
+      {
+        'type' => 'apr_pollset_t **',
+        'name' => 'pollset'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'size'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pollset_create_ex',
+    'args' => [
+      {
+        'type' => 'apr_pollset_t **',
+        'name' => 'pollset'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'size'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_pollset_method_e',
+        'name' => 'method'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pollset_destroy',
+    'args' => [
+      {
+        'type' => 'apr_pollset_t *',
+        'name' => 'pollset'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_pollset_method_name',
+    'args' => [
+      {
+        'type' => 'apr_pollset_t *',
+        'name' => 'pollset'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pollset_poll',
+    'args' => [
+      {
+        'type' => 'apr_pollset_t *',
+        'name' => 'pollset'
+      },
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 'timeout'
+      },
+      {
+        'type' => 'apr_int32_t *',
+        'name' => 'num'
+      },
+      {
+        'type' => 'const apr_pollfd_t **',
+        'name' => 'descriptors'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pollset_remove',
+    'args' => [
+      {
+        'type' => 'apr_pollset_t *',
+        'name' => 'pollset'
+      },
+      {
+        'type' => 'const apr_pollfd_t *',
+        'name' => 'descriptor'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pollset_wakeup',
+    'args' => [
+      {
+        'type' => 'apr_pollset_t *',
+        'name' => 'pollset'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_abortfunc_t',
+    'name' => 'apr_pool_abort_get',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_pool_abort_set',
+    'args' => [
+      {
+        'type' => 'apr_abortfunc_t',
+        'name' => 'abortfunc'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_allocator_t *',
+    'name' => 'apr_pool_allocator_get',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_pool_child_cleanup_set',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'apr_status_t (*plain_cleanup)(void *)',
+        'name' => 'arg2'
+      },
+      {
+        'type' => 'apr_status_t (*child_cleanup)(void *)',
+        'name' => 'arg3'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_pool_cleanup_for_exec',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_pool_cleanup_kill',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'apr_status_t (*cleanup)(void *)',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pool_cleanup_null',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_pool_cleanup_register',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'apr_status_t (*plain_cleanup)(void *)',
+        'name' => 'arg2'
+      },
+      {
+        'type' => 'apr_status_t (*child_cleanup)(void *)',
+        'name' => 'arg3'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pool_cleanup_run',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'apr_status_t (*cleanup)(void *)',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_pool_clear',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_pool_clear_debug',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'file_line'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pool_create_core_ex',
+    'args' => [
+      {
+        'type' => 'apr_pool_t **',
+        'name' => 'newpool'
+      },
+      {
+        'type' => 'apr_abortfunc_t',
+        'name' => 'abort_fn'
+      },
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pool_create_core_ex_debug',
+    'args' => [
+      {
+        'type' => 'apr_pool_t **',
+        'name' => 'newpool'
+      },
+      {
+        'type' => 'apr_abortfunc_t',
+        'name' => 'abort_fn'
+      },
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'file_line'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pool_create_ex',
+    'args' => [
+      {
+        'type' => 'apr_pool_t **',
+        'name' => 'newpool'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'parent'
+      },
+      {
+        'type' => 'apr_abortfunc_t',
+        'name' => 'abort_fn'
+      },
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pool_create_ex_debug',
+    'args' => [
+      {
+        'type' => 'apr_pool_t **',
+        'name' => 'newpool'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'parent'
+      },
+      {
+        'type' => 'apr_abortfunc_t',
+        'name' => 'abort_fn'
+      },
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'file_line'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pool_create_unmanaged_ex',
+    'args' => [
+      {
+        'type' => 'apr_pool_t **',
+        'name' => 'newpool'
+      },
+      {
+        'type' => 'apr_abortfunc_t',
+        'name' => 'abort_fn'
+      },
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pool_create_unmanaged_ex_debug',
+    'args' => [
+      {
+        'type' => 'apr_pool_t **',
+        'name' => 'newpool'
+      },
+      {
+        'type' => 'apr_abortfunc_t',
+        'name' => 'abort_fn'
+      },
+      {
+        'type' => 'apr_allocator_t *',
+        'name' => 'allocator'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'file_line'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_pool_destroy',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_pool_destroy_debug',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'file_line'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pool_initialize',
+    'args' => []
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_pool_is_ancestor',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'a'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_pool_note_subprocess',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'a'
+      },
+      {
+        'type' => 'apr_proc_t *',
+        'name' => 'proc'
+      },
+      {
+        'type' => 'apr_kill_conditions_e',
+        'name' => 'how'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'apr_pool_parent_get',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_pool_pre_cleanup_register',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'apr_status_t (*plain_cleanup)(void *)',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_pool_tag',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'tag'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_pool_terminate',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pool_userdata_get',
+    'args' => [
+      {
+        'type' => 'void **',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pool_userdata_set',
+    'args' => [
+      {
+        'type' => 'const void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_status_t (*cleanup)(void *)',
+        'name' => 'arg2'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_pool_userdata_setn',
+    'args' => [
+      {
+        'type' => 'const void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_status_t (*cleanup)(void *)',
+        'name' => 'arg2'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_proc_create',
+    'args' => [
+      {
+        'type' => 'apr_proc_t *',
+        'name' => 'new_proc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'progname'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'args'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'env'
+      },
+      {
+        'type' => 'apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_proc_detach',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'daemonize'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_proc_fork',
+    'args' => [
+      {
+        'type' => 'apr_proc_t *',
+        'name' => 'proc'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_proc_kill',
+    'args' => [
+      {
+        'type' => 'apr_proc_t *',
+        'name' => 'proc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'sig'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_proc_mutex_child_init',
+    'args' => [
+      {
+        'type' => 'apr_proc_mutex_t **',
+        'name' => 'mutex'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_proc_mutex_cleanup',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_proc_mutex_create',
+    'args' => [
+      {
+        'type' => 'apr_proc_mutex_t **',
+        'name' => 'mutex'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      },
+      {
+        'type' => 'apr_lockmech_e',
+        'name' => 'mech'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_proc_mutex_defname',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_proc_mutex_destroy',
+    'args' => [
+      {
+        'type' => 'apr_proc_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_proc_mutex_lock',
+    'args' => [
+      {
+        'type' => 'apr_proc_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_proc_mutex_lockfile',
+    'args' => [
+      {
+        'type' => 'apr_proc_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_proc_mutex_name',
+    'args' => [
+      {
+        'type' => 'apr_proc_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'apr_proc_mutex_pool_get',
+    'args' => [
+      {
+        'type' => 'const apr_proc_mutex_t *',
+        'name' => 'theproc_mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_proc_mutex_trylock',
+    'args' => [
+      {
+        'type' => 'apr_proc_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_proc_mutex_unlock',
+    'args' => [
+      {
+        'type' => 'apr_proc_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_proc_other_child_alert',
+    'args' => [
+      {
+        'type' => 'apr_proc_t *',
+        'name' => 'proc'
+      },
+      {
+        'type' => 'int',
+        'name' => 'reason'
+      },
+      {
+        'type' => 'int',
+        'name' => 'status'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_proc_other_child_refresh',
+    'args' => [
+      {
+        'type' => 'apr_other_child_rec_t *',
+        'name' => 'ocr'
+      },
+      {
+        'type' => 'int',
+        'name' => 'reason'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_proc_other_child_refresh_all',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'reason'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_proc_other_child_register',
+    'args' => [
+      {
+        'type' => 'apr_proc_t *',
+        'name' => 'proc'
+      },
+      {
+        'type' => 'void (*maintenance) (int reason, void *, int status)',
+        'name' => 'arg1'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'write_fd'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_proc_other_child_unregister',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_proc_wait',
+    'args' => [
+      {
+        'type' => 'apr_proc_t *',
+        'name' => 'proc'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'exitcode'
+      },
+      {
+        'type' => 'apr_exit_why_e *',
+        'name' => 'exitwhy'
+      },
+      {
+        'type' => 'apr_wait_how_e',
+        'name' => 'waithow'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_proc_wait_all_procs',
+    'args' => [
+      {
+        'type' => 'apr_proc_t *',
+        'name' => 'proc'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'exitcode'
+      },
+      {
+        'type' => 'apr_exit_why_e *',
+        'name' => 'exitwhy'
+      },
+      {
+        'type' => 'apr_wait_how_e',
+        'name' => 'waithow'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_procattr_addrspace_set',
+    'args' => [
+      {
+        'type' => 'apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'addrspace'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_procattr_child_err_set',
+    'args' => [
+      {
+        'type' => 'struct apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'child_err'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'parent_err'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_procattr_child_errfn_set',
+    'args' => [
+      {
+        'type' => 'apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_child_errfn_t *',
+        'name' => 'errfn'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_procattr_child_in_set',
+    'args' => [
+      {
+        'type' => 'struct apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'child_in'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'parent_in'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_procattr_child_out_set',
+    'args' => [
+      {
+        'type' => 'struct apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'child_out'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'parent_out'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_procattr_cmdtype_set',
+    'args' => [
+      {
+        'type' => 'apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_cmdtype_e',
+        'name' => 'cmd'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_procattr_create',
+    'args' => [
+      {
+        'type' => 'apr_procattr_t **',
+        'name' => 'new_attr'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_procattr_detach_set',
+    'args' => [
+      {
+        'type' => 'apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'detach'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_procattr_dir_set',
+    'args' => [
+      {
+        'type' => 'apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'dir'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_procattr_error_check_set',
+    'args' => [
+      {
+        'type' => 'apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'chk'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_procattr_group_set',
+    'args' => [
+      {
+        'type' => 'apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'groupname'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_procattr_io_set',
+    'args' => [
+      {
+        'type' => 'apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'in'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'out'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'err'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_procattr_limit_set',
+    'args' => [
+      {
+        'type' => 'apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'what'
+      },
+      {
+        'type' => 'struct rlimit *',
+        'name' => 'limit'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_procattr_user_set',
+    'args' => [
+      {
+        'type' => 'apr_procattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'username'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'password'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_psprintf',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_pstrcat',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg1'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_pstrcatv',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const struct iovec *',
+        'name' => 'vec'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nvec'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'nbytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_pstrdup',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_pstrmemdup',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'n'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_pstrndup',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'n'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_pvsprintf',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => 'va_list',
+        'name' => 'ap'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_queue_create',
+    'args' => [
+      {
+        'type' => 'apr_queue_t **',
+        'name' => 'queue'
+      },
+      {
+        'type' => 'unsigned int',
+        'name' => 'queue_capacity'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'a'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_queue_interrupt_all',
+    'args' => [
+      {
+        'type' => 'apr_queue_t *',
+        'name' => 'queue'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_queue_pop',
+    'args' => [
+      {
+        'type' => 'apr_queue_t *',
+        'name' => 'queue'
+      },
+      {
+        'type' => 'void **',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_queue_push',
+    'args' => [
+      {
+        'type' => 'apr_queue_t *',
+        'name' => 'queue'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'unsigned int',
+    'name' => 'apr_queue_size',
+    'args' => [
+      {
+        'type' => 'apr_queue_t *',
+        'name' => 'queue'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_queue_term',
+    'args' => [
+      {
+        'type' => 'apr_queue_t *',
+        'name' => 'queue'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_queue_trypop',
+    'args' => [
+      {
+        'type' => 'apr_queue_t *',
+        'name' => 'queue'
+      },
+      {
+        'type' => 'void **',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_queue_trypush',
+    'args' => [
+      {
+        'type' => 'apr_queue_t *',
+        'name' => 'queue'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_random_add_entropy',
+    'args' => [
+      {
+        'type' => 'apr_random_t *',
+        'name' => 'g'
+      },
+      {
+        'type' => 'const void *',
+        'name' => 'entropy_'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'bytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_random_after_fork',
+    'args' => [
+      {
+        'type' => 'apr_proc_t *',
+        'name' => 'proc'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_random_barrier',
+    'args' => [
+      {
+        'type' => 'apr_random_t *',
+        'name' => 'g'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_random_init',
+    'args' => [
+      {
+        'type' => 'apr_random_t *',
+        'name' => 'g'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_crypto_hash_t *',
+        'name' => 'pool_hash'
+      },
+      {
+        'type' => 'apr_crypto_hash_t *',
+        'name' => 'key_hash'
+      },
+      {
+        'type' => 'apr_crypto_hash_t *',
+        'name' => 'prng_hash'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_random_insecure_bytes',
+    'args' => [
+      {
+        'type' => 'apr_random_t *',
+        'name' => 'g'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'random'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'bytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_random_insecure_ready',
+    'args' => [
+      {
+        'type' => 'apr_random_t *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_random_secure_bytes',
+    'args' => [
+      {
+        'type' => 'apr_random_t *',
+        'name' => 'g'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'random'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'bytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_random_secure_ready',
+    'args' => [
+      {
+        'type' => 'apr_random_t *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_random_t *',
+    'name' => 'apr_random_standard_new',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_reslist_acquire',
+    'args' => [
+      {
+        'type' => 'apr_reslist_t *',
+        'name' => 'reslist'
+      },
+      {
+        'type' => 'void **',
+        'name' => 'resource'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_uint32_t',
+    'name' => 'apr_reslist_acquired_count',
+    'args' => [
+      {
+        'type' => 'apr_reslist_t *',
+        'name' => 'reslist'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_reslist_cleanup_order_set',
+    'args' => [
+      {
+        'type' => 'apr_reslist_t *',
+        'name' => 'reslist'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'mode'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_reslist_create',
+    'args' => [
+      {
+        'type' => 'apr_reslist_t **',
+        'name' => 'reslist'
+      },
+      {
+        'type' => 'int',
+        'name' => 'min'
+      },
+      {
+        'type' => 'int',
+        'name' => 'smax'
+      },
+      {
+        'type' => 'int',
+        'name' => 'hmax'
+      },
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 'ttl'
+      },
+      {
+        'type' => 'apr_reslist_constructor',
+        'name' => 'con'
+      },
+      {
+        'type' => 'apr_reslist_destructor',
+        'name' => 'de'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'params'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_reslist_destroy',
+    'args' => [
+      {
+        'type' => 'apr_reslist_t *',
+        'name' => 'reslist'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_reslist_invalidate',
+    'args' => [
+      {
+        'type' => 'apr_reslist_t *',
+        'name' => 'reslist'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'resource'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_reslist_maintain',
+    'args' => [
+      {
+        'type' => 'apr_reslist_t *',
+        'name' => 'reslist'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_reslist_release',
+    'args' => [
+      {
+        'type' => 'apr_reslist_t *',
+        'name' => 'reslist'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'resource'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_reslist_timeout_set',
+    'args' => [
+      {
+        'type' => 'apr_reslist_t *',
+        'name' => 'reslist'
+      },
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 'timeout'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_rfc822_date',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'date_str'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'apr_rmm_addr_get',
+    'args' => [
+      {
+        'type' => 'apr_rmm_t *',
+        'name' => 'rmm'
+      },
+      {
+        'type' => 'apr_rmm_off_t',
+        'name' => 'entity'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_rmm_attach',
+    'args' => [
+      {
+        'type' => 'apr_rmm_t **',
+        'name' => 'rmm'
+      },
+      {
+        'type' => 'apr_anylock_t *',
+        'name' => 'lock'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'membuf'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_rmm_off_t',
+    'name' => 'apr_rmm_calloc',
+    'args' => [
+      {
+        'type' => 'apr_rmm_t *',
+        'name' => 'rmm'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'reqsize'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_rmm_destroy',
+    'args' => [
+      {
+        'type' => 'apr_rmm_t *',
+        'name' => 'rmm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_rmm_detach',
+    'args' => [
+      {
+        'type' => 'apr_rmm_t *',
+        'name' => 'rmm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_rmm_free',
+    'args' => [
+      {
+        'type' => 'apr_rmm_t *',
+        'name' => 'rmm'
+      },
+      {
+        'type' => 'apr_rmm_off_t',
+        'name' => 'entity'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_rmm_init',
+    'args' => [
+      {
+        'type' => 'apr_rmm_t **',
+        'name' => 'rmm'
+      },
+      {
+        'type' => 'apr_anylock_t *',
+        'name' => 'lock'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'membuf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'memsize'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_rmm_off_t',
+    'name' => 'apr_rmm_malloc',
+    'args' => [
+      {
+        'type' => 'apr_rmm_t *',
+        'name' => 'rmm'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'reqsize'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_rmm_off_t',
+    'name' => 'apr_rmm_offset_get',
+    'args' => [
+      {
+        'type' => 'apr_rmm_t *',
+        'name' => 'rmm'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'entity'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_rmm_overhead_get',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'n'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_rmm_off_t',
+    'name' => 'apr_rmm_realloc',
+    'args' => [
+      {
+        'type' => 'apr_rmm_t *',
+        'name' => 'rmm'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'entity'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'reqsize'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_sdbm_close',
+    'args' => [
+      {
+        'type' => 'apr_sdbm_t *',
+        'name' => 'db'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_sdbm_delete',
+    'args' => [
+      {
+        'type' => 'apr_sdbm_t *',
+        'name' => 'db'
+      },
+      {
+        'type' => 'const apr_sdbm_datum_t',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_sdbm_fetch',
+    'args' => [
+      {
+        'type' => 'apr_sdbm_t *',
+        'name' => 'db'
+      },
+      {
+        'type' => 'apr_sdbm_datum_t *',
+        'name' => 'value'
+      },
+      {
+        'type' => 'apr_sdbm_datum_t',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_sdbm_firstkey',
+    'args' => [
+      {
+        'type' => 'apr_sdbm_t *',
+        'name' => 'db'
+      },
+      {
+        'type' => 'apr_sdbm_datum_t *',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_sdbm_lock',
+    'args' => [
+      {
+        'type' => 'apr_sdbm_t *',
+        'name' => 'db'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_sdbm_nextkey',
+    'args' => [
+      {
+        'type' => 'apr_sdbm_t *',
+        'name' => 'db'
+      },
+      {
+        'type' => 'apr_sdbm_datum_t *',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_sdbm_open',
+    'args' => [
+      {
+        'type' => 'apr_sdbm_t **',
+        'name' => 'db'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'mode'
+      },
+      {
+        'type' => 'apr_fileperms_t',
+        'name' => 'perms'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_sdbm_rdonly',
+    'args' => [
+      {
+        'type' => 'apr_sdbm_t *',
+        'name' => 'db'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_sdbm_store',
+    'args' => [
+      {
+        'type' => 'apr_sdbm_t *',
+        'name' => 'db'
+      },
+      {
+        'type' => 'apr_sdbm_datum_t',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_sdbm_datum_t',
+        'name' => 'value'
+      },
+      {
+        'type' => 'int',
+        'name' => 'opt'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_sdbm_unlock',
+    'args' => [
+      {
+        'type' => 'apr_sdbm_t *',
+        'name' => 'db'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_setup_signal_thread',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_sha1_base64',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'clear'
+      },
+      {
+        'type' => 'int',
+        'name' => 'len'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'out'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_sha1_final',
+    'args' => [
+      {
+        'type' => 'unsigned char',
+        'name' => 'digest'
+      },
+      {
+        'type' => 'apr_sha1_ctx_t *',
+        'name' => 'context'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_sha1_init',
+    'args' => [
+      {
+        'type' => 'apr_sha1_ctx_t *',
+        'name' => 'context'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_sha1_update',
+    'args' => [
+      {
+        'type' => 'apr_sha1_ctx_t *',
+        'name' => 'context'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'input'
+      },
+      {
+        'type' => 'unsigned int',
+        'name' => 'inputLen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_sha1_update_binary',
+    'args' => [
+      {
+        'type' => 'apr_sha1_ctx_t *',
+        'name' => 'context'
+      },
+      {
+        'type' => 'const unsigned char *',
+        'name' => 'input'
+      },
+      {
+        'type' => 'unsigned int',
+        'name' => 'inputLen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_shm_attach',
+    'args' => [
+      {
+        'type' => 'apr_shm_t **',
+        'name' => 'm'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'filename'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'apr_shm_baseaddr_get',
+    'args' => [
+      {
+        'type' => 'const apr_shm_t *',
+        'name' => 'm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_shm_create',
+    'args' => [
+      {
+        'type' => 'apr_shm_t **',
+        'name' => 'm'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'reqsize'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'filename'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_shm_destroy',
+    'args' => [
+      {
+        'type' => 'apr_shm_t *',
+        'name' => 'm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_shm_detach',
+    'args' => [
+      {
+        'type' => 'apr_shm_t *',
+        'name' => 'm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'apr_shm_pool_get',
+    'args' => [
+      {
+        'type' => 'const apr_shm_t *',
+        'name' => 'theshm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_shm_remove',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'filename'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_shm_size_get',
+    'args' => [
+      {
+        'type' => 'const apr_shm_t *',
+        'name' => 'm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_sigfunc_t *',
+    'name' => 'apr_signal',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'signo'
+      },
+      {
+        'type' => 'apr_sigfunc_t *',
+        'name' => 'func'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_signal_block',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'signum'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_signal_description_get',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'signum'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_signal_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pglobal'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_signal_thread',
+    'args' => [
+      {
+        'type' => 'int(*signal_handler)(int signum)',
+        'name' => 'arg0'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_signal_unblock',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'signum'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_sleep',
+    'args' => [
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_snprintf',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'format'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg3'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_sockaddr_equal',
+    'args' => [
+      {
+        'type' => 'const apr_sockaddr_t *',
+        'name' => 'addr1'
+      },
+      {
+        'type' => 'const apr_sockaddr_t *',
+        'name' => 'addr2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_sockaddr_info_get',
+    'args' => [
+      {
+        'type' => 'apr_sockaddr_t **',
+        'name' => 'sa'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'hostname'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'family'
+      },
+      {
+        'type' => 'apr_port_t',
+        'name' => 'port'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_sockaddr_ip_get',
+    'args' => [
+      {
+        'type' => 'char **',
+        'name' => 'addr'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'sockaddr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_sockaddr_ip_getbuf',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'buflen'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'sockaddr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_accept',
+    'args' => [
+      {
+        'type' => 'apr_socket_t **',
+        'name' => 'new_sock'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'connection_pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_addr_get',
+    'args' => [
+      {
+        'type' => 'apr_sockaddr_t **',
+        'name' => 'sa'
+      },
+      {
+        'type' => 'apr_interface_e',
+        'name' => 'which'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_atmark',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'atmark'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_atreadeof',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'atreadeof'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_bind',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'sa'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_close',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'thesocket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_connect',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'sa'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_create',
+    'args' => [
+      {
+        'type' => 'apr_socket_t **',
+        'name' => 'new_sock'
+      },
+      {
+        'type' => 'int',
+        'name' => 'family'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      },
+      {
+        'type' => 'int',
+        'name' => 'protocol'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_data_get',
+    'args' => [
+      {
+        'type' => 'void **',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_data_set',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_status_t (*cleanup)(void*)',
+        'name' => 'arg3'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_inherit_set',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'thesocket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_inherit_unset',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'thesocket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_listen',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'backlog'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_opt_get',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'opt'
+      },
+      {
+        'type' => 'apr_int32_t *',
+        'name' => 'on'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_opt_set',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'opt'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'on'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'apr_socket_pool_get',
+    'args' => [
+      {
+        'type' => 'const apr_socket_t *',
+        'name' => 'thesocket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_protocol_get',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'protocol'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_recv',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_recvfrom',
+    'args' => [
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'from'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_send',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_sendfile',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'file'
+      },
+      {
+        'type' => 'apr_hdtr_t *',
+        'name' => 'hdtr'
+      },
+      {
+        'type' => 'apr_off_t *',
+        'name' => 'offset'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'len'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_sendto',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'where'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_sendv',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'const struct iovec *',
+        'name' => 'vec'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'nvec'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_shutdown',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'thesocket'
+      },
+      {
+        'type' => 'apr_shutdown_how_e',
+        'name' => 'how'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_timeout_get',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_interval_time_t *',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_timeout_set',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_socket_type_get',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sock'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_stat',
+    'args' => [
+      {
+        'type' => 'apr_finfo_t *',
+        'name' => 'finfo'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'wanted'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_strerror',
+    'args' => [
+      {
+        'type' => 'apr_status_t',
+        'name' => 'statcode'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'bufsize'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_strfsize',
+    'args' => [
+      {
+        'type' => 'apr_off_t',
+        'name' => 'size'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buf'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_strftime',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'retsize'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'max'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'format'
+      },
+      {
+        'type' => 'apr_time_exp_t *',
+        'name' => 'tm'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const apr_strmatch_pattern *',
+    'name' => 'apr_strmatch_precompile',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      },
+      {
+        'type' => 'int',
+        'name' => 'case_sensitive'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_strnatcasecmp',
+    'args' => [
+      {
+        'type' => 'char const *',
+        'name' => 'a'
+      },
+      {
+        'type' => 'char const *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_strnatcmp',
+    'args' => [
+      {
+        'type' => 'char const *',
+        'name' => 'a'
+      },
+      {
+        'type' => 'char const *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_strtoff',
+    'args' => [
+      {
+        'type' => 'apr_off_t *',
+        'name' => 'offset'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'end'
+      },
+      {
+        'type' => 'int',
+        'name' => 'base'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_int64_t',
+    'name' => 'apr_strtoi64',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'end'
+      },
+      {
+        'type' => 'int',
+        'name' => 'base'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_strtok',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'str'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'sep'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'last'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_table_add',
+    'args' => [
+      {
+        'type' => 'apr_table_t *',
+        'name' => 't'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_table_addn',
+    'args' => [
+      {
+        'type' => 'apr_table_t *',
+        'name' => 't'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_table_clear',
+    'args' => [
+      {
+        'type' => 'apr_table_t *',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_table_t *',
+    'name' => 'apr_table_clone',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const apr_table_t *',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_table_compress',
+    'args' => [
+      {
+        'type' => 'apr_table_t *',
+        'name' => 't'
+      },
+      {
+        'type' => 'unsigned',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_table_t *',
+    'name' => 'apr_table_copy',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const apr_table_t *',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_table_do',
+    'args' => [
+      {
+        'type' => 'void *comp',
+        'name' => 'arg0'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'rec'
+      },
+      {
+        'type' => 'const apr_table_t *',
+        'name' => 't'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg3'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const apr_array_header_t *',
+    'name' => 'apr_table_elts',
+    'args' => [
+      {
+        'type' => 'const apr_table_t *',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_table_get',
+    'args' => [
+      {
+        'type' => 'const apr_table_t *',
+        'name' => 't'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_table_t *',
+    'name' => 'apr_table_make',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nelts'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_table_merge',
+    'args' => [
+      {
+        'type' => 'apr_table_t *',
+        'name' => 't'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_table_mergen',
+    'args' => [
+      {
+        'type' => 'apr_table_t *',
+        'name' => 't'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_table_overlap',
+    'args' => [
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'a'
+      },
+      {
+        'type' => 'const apr_table_t *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'unsigned',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_table_t *',
+    'name' => 'apr_table_overlay',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const apr_table_t *',
+        'name' => 'overlay'
+      },
+      {
+        'type' => 'const apr_table_t *',
+        'name' => 'base'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_table_set',
+    'args' => [
+      {
+        'type' => 'apr_table_t *',
+        'name' => 't'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_table_setn',
+    'args' => [
+      {
+        'type' => 'apr_table_t *',
+        'name' => 't'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_table_unset',
+    'args' => [
+      {
+        'type' => 'apr_table_t *',
+        'name' => 't'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_table_vdo',
+    'args' => [
+      {
+        'type' => 'void *comp',
+        'name' => 'arg0'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'rec'
+      },
+      {
+        'type' => 'const apr_table_t *',
+        'name' => 't'
+      },
+      {
+        'type' => 'va_list',
+        'name' => 'vp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_temp_dir_get',
+    'args' => [
+      {
+        'type' => 'const char **',
+        'name' => 'temp_dir'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_terminate',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_terminate2',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_text_append',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_text_header *',
+        'name' => 'hdr'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'text'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_cond_broadcast',
+    'args' => [
+      {
+        'type' => 'apr_thread_cond_t *',
+        'name' => 'cond'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_cond_create',
+    'args' => [
+      {
+        'type' => 'apr_thread_cond_t **',
+        'name' => 'cond'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_cond_destroy',
+    'args' => [
+      {
+        'type' => 'apr_thread_cond_t *',
+        'name' => 'cond'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'apr_thread_cond_pool_get',
+    'args' => [
+      {
+        'type' => 'const apr_thread_cond_t *',
+        'name' => 'thethread_cond'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_cond_signal',
+    'args' => [
+      {
+        'type' => 'apr_thread_cond_t *',
+        'name' => 'cond'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_cond_timedwait',
+    'args' => [
+      {
+        'type' => 'apr_thread_cond_t *',
+        'name' => 'cond'
+      },
+      {
+        'type' => 'apr_thread_mutex_t *',
+        'name' => 'mutex'
+      },
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 'timeout'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_cond_wait',
+    'args' => [
+      {
+        'type' => 'apr_thread_cond_t *',
+        'name' => 'cond'
+      },
+      {
+        'type' => 'apr_thread_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_create',
+    'args' => [
+      {
+        'type' => 'apr_thread_t **',
+        'name' => 'new_thread'
+      },
+      {
+        'type' => 'apr_threadattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_thread_start_t',
+        'name' => 'func'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_data_get',
+    'args' => [
+      {
+        'type' => 'void **',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_thread_t *',
+        'name' => 'thread'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_data_set',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_status_t (*cleanup) (void *)',
+        'name' => 'arg2'
+      },
+      {
+        'type' => 'apr_thread_t *',
+        'name' => 'thread'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_detach',
+    'args' => [
+      {
+        'type' => 'apr_thread_t *',
+        'name' => 'thd'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_exit',
+    'args' => [
+      {
+        'type' => 'apr_thread_t *',
+        'name' => 'thd'
+      },
+      {
+        'type' => 'apr_status_t',
+        'name' => 'retval'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_join',
+    'args' => [
+      {
+        'type' => 'apr_status_t *',
+        'name' => 'retval'
+      },
+      {
+        'type' => 'apr_thread_t *',
+        'name' => 'thd'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_mutex_create',
+    'args' => [
+      {
+        'type' => 'apr_thread_mutex_t **',
+        'name' => 'mutex'
+      },
+      {
+        'type' => 'unsigned int',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_mutex_destroy',
+    'args' => [
+      {
+        'type' => 'apr_thread_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_mutex_lock',
+    'args' => [
+      {
+        'type' => 'apr_thread_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'apr_thread_mutex_pool_get',
+    'args' => [
+      {
+        'type' => 'const apr_thread_mutex_t *',
+        'name' => 'thethread_mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_mutex_trylock',
+    'args' => [
+      {
+        'type' => 'apr_thread_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_mutex_unlock',
+    'args' => [
+      {
+        'type' => 'apr_thread_mutex_t *',
+        'name' => 'mutex'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_once',
+    'args' => [
+      {
+        'type' => 'apr_thread_once_t *',
+        'name' => 'control'
+      },
+      {
+        'type' => 'void (*func)(void)',
+        'name' => 'arg1'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_once_init',
+    'args' => [
+      {
+        'type' => 'apr_thread_once_t **',
+        'name' => 'control'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_busy_count',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_pool_create',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t **',
+        'name' => 'me'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'init_threads'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'max_threads'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_pool_destroy',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'apr_thread_pool_get',
+    'args' => [
+      {
+        'type' => 'const apr_thread_t *',
+        'name' => 'thethread'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_idle_count',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_idle_max_get',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_idle_max_set',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'cnt'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_interval_time_t',
+    'name' => 'apr_thread_pool_idle_wait_get',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_interval_time_t',
+    'name' => 'apr_thread_pool_idle_wait_set',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      },
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 'timeout'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_pool_push',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      },
+      {
+        'type' => 'apr_thread_start_t',
+        'name' => 'func'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'param'
+      },
+      {
+        'type' => 'apr_byte_t',
+        'name' => 'priority'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'owner'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_pool_schedule',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      },
+      {
+        'type' => 'apr_thread_start_t',
+        'name' => 'func'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'param'
+      },
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 'time'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'owner'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_scheduled_tasks_count',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_pool_task_owner_get',
+    'args' => [
+      {
+        'type' => 'apr_thread_t *',
+        'name' => 'thd'
+      },
+      {
+        'type' => 'void **',
+        'name' => 'owner'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_pool_tasks_cancel',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'owner'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_tasks_count',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_tasks_high_count',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_tasks_run_count',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_thread_max_get',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_thread_max_set',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'cnt'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_threads_count',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_threads_high_count',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_threads_idle_timeout_count',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_threshold_get',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'apr_thread_pool_threshold_set',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_pool_top',
+    'args' => [
+      {
+        'type' => 'apr_thread_pool_t *',
+        'name' => 'me'
+      },
+      {
+        'type' => 'apr_thread_start_t',
+        'name' => 'func'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'param'
+      },
+      {
+        'type' => 'apr_byte_t',
+        'name' => 'priority'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'owner'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_rwlock_create',
+    'args' => [
+      {
+        'type' => 'apr_thread_rwlock_t **',
+        'name' => 'rwlock'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_rwlock_destroy',
+    'args' => [
+      {
+        'type' => 'apr_thread_rwlock_t *',
+        'name' => 'rwlock'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'apr_thread_rwlock_pool_get',
+    'args' => [
+      {
+        'type' => 'const apr_thread_rwlock_t *',
+        'name' => 'thethread_rwlock'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_rwlock_rdlock',
+    'args' => [
+      {
+        'type' => 'apr_thread_rwlock_t *',
+        'name' => 'rwlock'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_rwlock_tryrdlock',
+    'args' => [
+      {
+        'type' => 'apr_thread_rwlock_t *',
+        'name' => 'rwlock'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_rwlock_trywrlock',
+    'args' => [
+      {
+        'type' => 'apr_thread_rwlock_t *',
+        'name' => 'rwlock'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_rwlock_unlock',
+    'args' => [
+      {
+        'type' => 'apr_thread_rwlock_t *',
+        'name' => 'rwlock'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_thread_rwlock_wrlock',
+    'args' => [
+      {
+        'type' => 'apr_thread_rwlock_t *',
+        'name' => 'rwlock'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_thread_yield',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_threadattr_create',
+    'args' => [
+      {
+        'type' => 'apr_threadattr_t **',
+        'name' => 'new_attr'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_threadattr_detach_get',
+    'args' => [
+      {
+        'type' => 'apr_threadattr_t *',
+        'name' => 'attr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_threadattr_detach_set',
+    'args' => [
+      {
+        'type' => 'apr_threadattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'on'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_threadattr_guardsize_set',
+    'args' => [
+      {
+        'type' => 'apr_threadattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'guardsize'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_threadattr_stacksize_set',
+    'args' => [
+      {
+        'type' => 'apr_threadattr_t *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'stacksize'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_threadkey_data_get',
+    'args' => [
+      {
+        'type' => 'void **',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_threadkey_t *',
+        'name' => 'threadkey'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_threadkey_data_set',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_status_t (*cleanup) (void *)',
+        'name' => 'arg2'
+      },
+      {
+        'type' => 'apr_threadkey_t *',
+        'name' => 'threadkey'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_threadkey_private_create',
+    'args' => [
+      {
+        'type' => 'apr_threadkey_t **',
+        'name' => 'key'
+      },
+      {
+        'type' => 'void (*dest)(void *)',
+        'name' => 'arg1'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_threadkey_private_delete',
+    'args' => [
+      {
+        'type' => 'apr_threadkey_t *',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_threadkey_private_get',
+    'args' => [
+      {
+        'type' => 'void **',
+        'name' => 'new_mem'
+      },
+      {
+        'type' => 'apr_threadkey_t *',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_threadkey_private_set',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'priv'
+      },
+      {
+        'type' => 'apr_threadkey_t *',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_time_ansi_put',
+    'args' => [
+      {
+        'type' => 'apr_time_t *',
+        'name' => 'result'
+      },
+      {
+        'type' => 'time_t',
+        'name' => 'input'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_time_clock_hires',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_time_exp_get',
+    'args' => [
+      {
+        'type' => 'apr_time_t *',
+        'name' => 'result'
+      },
+      {
+        'type' => 'apr_time_exp_t *',
+        'name' => 'input'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_time_exp_gmt',
+    'args' => [
+      {
+        'type' => 'apr_time_exp_t *',
+        'name' => 'result'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'input'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_time_exp_gmt_get',
+    'args' => [
+      {
+        'type' => 'apr_time_t *',
+        'name' => 'result'
+      },
+      {
+        'type' => 'apr_time_exp_t *',
+        'name' => 'input'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_time_exp_lt',
+    'args' => [
+      {
+        'type' => 'apr_time_exp_t *',
+        'name' => 'result'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'input'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_time_exp_tz',
+    'args' => [
+      {
+        'type' => 'apr_time_exp_t *',
+        'name' => 'result'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'input'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'offs'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_time_t',
+    'name' => 'apr_time_now',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_tokenize_to_argv',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'arg_str'
+      },
+      {
+        'type' => 'char ***',
+        'name' => 'argv_out'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'token_context'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_uid_current',
+    'args' => [
+      {
+        'type' => 'apr_uid_t *',
+        'name' => 'userid'
+      },
+      {
+        'type' => 'apr_gid_t *',
+        'name' => 'groupid'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_uid_get',
+    'args' => [
+      {
+        'type' => 'apr_uid_t *',
+        'name' => 'userid'
+      },
+      {
+        'type' => 'apr_gid_t *',
+        'name' => 'groupid'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'username'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_uid_homepath_get',
+    'args' => [
+      {
+        'type' => 'char **',
+        'name' => 'dirname'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'username'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_uid_name_get',
+    'args' => [
+      {
+        'type' => 'char **',
+        'name' => 'username'
+      },
+      {
+        'type' => 'apr_uid_t',
+        'name' => 'userid'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_uri_parse',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'uri'
+      },
+      {
+        'type' => 'apr_uri_t *',
+        'name' => 'uptr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_uri_parse_hostinfo',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'hostinfo'
+      },
+      {
+        'type' => 'apr_uri_t *',
+        'name' => 'uptr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_port_t',
+    'name' => 'apr_uri_port_of_scheme',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'scheme_str'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_uri_unparse',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const apr_uri_t *',
+        'name' => 'uptr'
+      },
+      {
+        'type' => 'unsigned',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_uuid_format',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'const apr_uuid_t *',
+        'name' => 'uuid'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_uuid_get',
+    'args' => [
+      {
+        'type' => 'apr_uuid_t *',
+        'name' => 'uuid'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_uuid_parse',
+    'args' => [
+      {
+        'type' => 'apr_uuid_t *',
+        'name' => 'uuid'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'uuid_str'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_version',
+    'args' => [
+      {
+        'type' => 'apr_version_t *',
+        'name' => 'pvsn'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_version_string',
+    'args' => []
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_vformatter',
+    'args' => [
+      {
+        'type' => 'int (*flush_func)(apr_vformatter_buff_t *b)',
+        'name' => 'arg0'
+      },
+      {
+        'type' => 'apr_vformatter_buff_t *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => 'va_list',
+        'name' => 'ap'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_vsnprintf',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'format'
+      },
+      {
+        'type' => 'va_list',
+        'name' => 'ap'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_wait_for_io_or_timeout',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 's'
+      },
+      {
+        'type' => 'int',
+        'name' => 'for_read'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_xlate_close',
+    'args' => [
+      {
+        'type' => 'apr_xlate_t *',
+        'name' => 'convset'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_xlate_conv_buffer',
+    'args' => [
+      {
+        'type' => 'apr_xlate_t *',
+        'name' => 'convset'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'inbuf'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'inbytes_left'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'outbuf'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'outbytes_left'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_int32_t',
+    'name' => 'apr_xlate_conv_byte',
+    'args' => [
+      {
+        'type' => 'apr_xlate_t *',
+        'name' => 'convset'
+      },
+      {
+        'type' => 'unsigned char',
+        'name' => 'inchar'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_xlate_open',
+    'args' => [
+      {
+        'type' => 'apr_xlate_t **',
+        'name' => 'convset'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'topage'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'frompage'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_xlate_sb_get',
+    'args' => [
+      {
+        'type' => 'apr_xlate_t *',
+        'name' => 'convset'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'onoff'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_xml_empty_elem',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const apr_xml_elem *',
+        'name' => 'elem'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'apr_xml_insert_uri',
+    'args' => [
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'uri_array'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'uri'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_xml_parse_file',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_xml_parser **',
+        'name' => 'parser'
+      },
+      {
+        'type' => 'apr_xml_doc **',
+        'name' => 'ppdoc'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'xmlfd'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'buffer_length'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_xml_parser *',
+    'name' => 'apr_xml_parser_create',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_xml_parser_done',
+    'args' => [
+      {
+        'type' => 'apr_xml_parser *',
+        'name' => 'parser'
+      },
+      {
+        'type' => 'apr_xml_doc **',
+        'name' => 'pdoc'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'apr_xml_parser_feed',
+    'args' => [
+      {
+        'type' => 'apr_xml_parser *',
+        'name' => 'parser'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'apr_xml_parser_geterror',
+    'args' => [
+      {
+        'type' => 'apr_xml_parser *',
+        'name' => 'parser'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'errbuf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'errbufsize'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_xml_quote_elem',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_xml_elem *',
+        'name' => 'elem'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'apr_xml_quote_string',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      },
+      {
+        'type' => 'int',
+        'name' => 'quotes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'apr_xml_to_text',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const apr_xml_elem *',
+        'name' => 'elem'
+      },
+      {
+        'type' => 'int',
+        'name' => 'style'
+      },
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'namespaces'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'ns_map'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'pbuf'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'psize'
+      }
+    ]
+  }
+];
+
+
+1;
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/tables/current24/Apache2/StructureTable.pm mod_perl-2.0.8/xs/tables/current24/Apache2/StructureTable.pm
--- mod_perl-2.0.8/xs/tables/current24/Apache2/StructureTable.pm	1970-01-01 03:00:00.000000000 +0300
+++ mod_perl-2.0.8/xs/tables/current24/Apache2/StructureTable.pm	2014-05-08 19:05:39.821726413 +0400
@@ -0,0 +1,5468 @@
+package Apache2::StructureTable;
+
+# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+# ! WARNING: generated by Apache2::ParseSource/0.02
+# !          Mon Jul  1 12:38:15 2013
+# !          do NOT edit, any changes will be lost !
+# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+
+$Apache2::StructureTable = [
+  {
+    'type' => 'ap_HOOK_access_checker_ex_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_access_checker_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_auth_checker_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_check_config_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_check_user_id_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_child_init_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_child_status_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_create_connection_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_create_request_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_default_port_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_drop_privileges_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_end_generation_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_error_log_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_expr_lookup_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_fixups_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_generate_log_id_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_get_mgmt_items_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_get_suexec_identity_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_handler_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_header_parser_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_http_scheme_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_insert_error_filter_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_insert_filter_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_insert_network_bucket_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_log_transaction_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_map_to_storage_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_monitor_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_mpm_get_name_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_mpm_query_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_mpm_register_timed_callback_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_mpm_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_note_auth_failure_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_open_logs_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_optional_fn_retrieve_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_post_config_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_post_read_request_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_pre_config_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_pre_connection_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_pre_mpm_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_pre_read_request_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_process_connection_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_quick_handler_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_session_decode_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_session_encode_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_session_load_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_session_save_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_status_hook_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_test_config_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_translate_name_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_type_checker_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_watchdog_exit_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_watchdog_init_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_watchdog_need_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_HOOK_watchdog_step_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_LINK_access_checker_ex_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_access_checker_ex_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_access_checker_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_access_checker_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_auth_checker_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_auth_checker_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_check_config_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_check_config_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_check_user_id_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_check_user_id_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_child_init_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_child_init_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_child_status_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_child_status_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_create_connection_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_create_connection_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_create_request_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_create_request_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_default_port_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_default_port_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_drop_privileges_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_drop_privileges_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_end_generation_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_end_generation_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_error_log_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_error_log_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_expr_lookup_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_expr_lookup_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_fixups_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_fixups_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_generate_log_id_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_generate_log_id_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_get_mgmt_items_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_get_mgmt_items_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_get_suexec_identity_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_get_suexec_identity_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_handler_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_handler_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_header_parser_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_header_parser_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_http_scheme_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_http_scheme_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_insert_error_filter_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_insert_error_filter_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_insert_filter_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_insert_filter_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_insert_network_bucket_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_insert_network_bucket_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_log_transaction_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_log_transaction_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_map_to_storage_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_map_to_storage_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_monitor_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_monitor_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_mpm_get_name_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_mpm_get_name_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_mpm_query_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_mpm_query_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_mpm_register_timed_callback_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_mpm_register_timed_callback_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_mpm_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_mpm_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_note_auth_failure_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_note_auth_failure_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_open_logs_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_open_logs_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_optional_fn_retrieve_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_optional_fn_retrieve_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_post_config_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_post_config_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_post_read_request_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_post_read_request_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_pre_config_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_pre_config_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_pre_connection_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_pre_connection_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_pre_mpm_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_pre_mpm_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_pre_read_request_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_pre_read_request_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_process_connection_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_process_connection_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_quick_handler_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_quick_handler_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_session_decode_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_session_decode_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_session_encode_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_session_encode_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_session_load_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_session_load_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_session_save_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_session_save_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_status_hook_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_status_hook_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_test_config_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_test_config_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_translate_name_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_translate_name_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_type_checker_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_type_checker_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_watchdog_exit_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_watchdog_exit_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_watchdog_init_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_watchdog_init_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_watchdog_need_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_watchdog_need_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_LINK_watchdog_step_t',
+    'elts' => [
+      {
+        'type' => 'ap_HOOK_watchdog_step_t *',
+        'name' => 'pFunc'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'szName'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszPredecessors'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'aszSuccessors'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nOrder'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_bucket_error',
+    'elts' => [
+      {
+        'type' => 'apr_bucket_refcount',
+        'name' => 'refcount'
+      },
+      {
+        'type' => 'int',
+        'name' => 'status'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_conf_vector_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_configfile_t',
+    'elts' => [
+      {
+        'type' => 'apr_status_t(*) (char *ch, void *param)',
+        'name' => 'getch'
+      },
+      {
+        'type' => 'apr_status_t(*) (void *buf, apr_size_t bufsiz, void *param)',
+        'name' => 'getstr'
+      },
+      {
+        'type' => 'apr_status_t(*) (void *param)',
+        'name' => 'close'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'param'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'unsigned',
+        'name' => 'line_number'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_conn_keepalive_e',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_cookie_do',
+    'elts' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'encoded'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'new_cookies'
+      },
+      {
+        'type' => 'int',
+        'name' => 'duplicated'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_dbd_t',
+    'elts' => [
+      {
+        'type' => 'apr_dbd_t *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'const apr_dbd_driver_t *',
+        'name' => 'driver'
+      },
+      {
+        'type' => 'apr_hash_t *',
+        'name' => 'prepared'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_directive_t',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'directive'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'args'
+      },
+      {
+        'type' => 'ap_directive_t *',
+        'name' => 'next'
+      },
+      {
+        'type' => 'ap_directive_t *',
+        'name' => 'first_child'
+      },
+      {
+        'type' => 'ap_directive_t *',
+        'name' => 'parent'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'filename'
+      },
+      {
+        'type' => 'int',
+        'name' => 'line_num'
+      },
+      {
+        'type' => 'ap_directive_t *',
+        'name' => 'last'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_errorlog_format_item',
+    'elts' => [
+      {
+        'type' => 'ap_errorlog_handler_fn_t *',
+        'name' => 'func'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      },
+      {
+        'type' => 'unsigned int',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'unsigned int',
+        'name' => 'min_loglevel'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_errorlog_handler',
+    'elts' => [
+      {
+        'type' => 'ap_errorlog_handler_fn_t *',
+        'name' => 'func'
+      },
+      {
+        'type' => 'int',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_errorlog_handler_fn_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_errorlog_info',
+    'elts' => [
+      {
+        'type' => 'const server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'const request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const request_rec *',
+        'name' => 'rmain'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'file'
+      },
+      {
+        'type' => 'int',
+        'name' => 'line'
+      },
+      {
+        'type' => 'int',
+        'name' => 'module_index'
+      },
+      {
+        'type' => 'int',
+        'name' => 'level'
+      },
+      {
+        'type' => 'apr_status_t',
+        'name' => 'status'
+      },
+      {
+        'type' => 'int',
+        'name' => 'using_syslog'
+      },
+      {
+        'type' => 'int',
+        'name' => 'startup'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'format'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_expr_eval_ctx_t',
+    'elts' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'err'
+      },
+      {
+        'type' => 'const ap_expr_info_t *',
+        'name' => 'info'
+      },
+      {
+        'type' => 'ap_regmatch_t *',
+        'name' => 're_pmatch'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 're_nmatch'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 're_source'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'vary_this'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'result_string'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'int',
+        'name' => 'reclvl'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_expr_info_t',
+    'elts' => [
+      {
+        'type' => 'ap_expr_t *',
+        'name' => 'root_node'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'filename'
+      },
+      {
+        'type' => 'unsigned int',
+        'name' => 'line_number'
+      },
+      {
+        'type' => 'unsigned int',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'int',
+        'name' => 'module_index'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_expr_list_func_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_expr_lookup_fn_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_expr_lookup_parms',
+    'elts' => [
+      {
+        'type' => 'int',
+        'name' => 'type'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'int',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      },
+      {
+        'type' => 'const void **',
+        'name' => 'func'
+      },
+      {
+        'type' => 'const void **',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'err'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_expr_op_binary_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_expr_op_unary_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_expr_string_func_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_expr_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_expr_var_func_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_filter_func',
+    'elts' => [
+      {
+        'type' => 'ap_out_filter_func',
+        'name' => 'out_func'
+      },
+      {
+        'type' => 'ap_in_filter_func',
+        'name' => 'in_func'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_filter_provider_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_filter_rec_t',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'ap_filter_func',
+        'name' => 'filter_func'
+      },
+      {
+        'type' => 'ap_init_filter_func',
+        'name' => 'filter_init_func'
+      },
+      {
+        'type' => 'ap_filter_rec_t *',
+        'name' => 'next'
+      },
+      {
+        'type' => 'ap_filter_provider_t *',
+        'name' => 'providers'
+      },
+      {
+        'type' => 'ap_filter_type',
+        'name' => 'ftype'
+      },
+      {
+        'type' => 'int',
+        'name' => 'debug'
+      },
+      {
+        'type' => 'unsigned int',
+        'name' => 'proto_flags'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_filter_t',
+    'elts' => [
+      {
+        'type' => 'ap_filter_rec_t *',
+        'name' => 'frec'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ctx'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'next'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_filter_type',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_form_pair_t',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'value'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_generation_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_in_filter_func',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_init_filter_func',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_input_mode_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_list_provider_groups_t',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'provider_group'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_version'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_list_provider_names_t',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'provider_name'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_listen_rec',
+    'elts' => [
+      {
+        'type' => 'ap_listen_rec *',
+        'name' => 'next'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'sd'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'bind_addr'
+      },
+      {
+        'type' => 'accept_function',
+        'name' => 'accept_func'
+      },
+      {
+        'type' => 'int',
+        'name' => 'active'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'protocol'
+      },
+      {
+        'type' => 'ap_slave_t *',
+        'name' => 'slave'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_loadavg_t',
+    'elts' => [
+      {
+        'type' => 'float',
+        'name' => 'loadavg'
+      },
+      {
+        'type' => 'float',
+        'name' => 'loadavg5'
+      },
+      {
+        'type' => 'float',
+        'name' => 'loadavg15'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_method_list_t',
+    'elts' => [
+      {
+        'type' => 'apr_int64_t',
+        'name' => 'method_mask'
+      },
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'method_list'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_mgmt_item_t',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'description'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'ap_mgmt_type_e',
+        'name' => 'vtype'
+      },
+      {
+        'type' => 'ap_mgmt_value',
+        'name' => 'v'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_mgmt_type_e',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_mgmt_value',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 's_value'
+      },
+      {
+        'type' => 'long',
+        'name' => 'i_value'
+      },
+      {
+        'type' => 'apr_hash_t *',
+        'name' => 'h_value'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_module_symbol_t',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'module *',
+        'name' => 'modp'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_mpm_callback_fn_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_out_filter_func',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_pcw_dir_cb_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_pcw_srv_cb_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_pod_t',
+    'elts' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'pod_in'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'pod_out'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_reclaim_callback_fn_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_regex_t',
+    'elts' => [
+      {
+        'type' => 'void *',
+        'name' => 're_pcre'
+      },
+      {
+        'type' => 'int',
+        'name' => 're_nsub'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 're_erroffset'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_regmatch_t',
+    'elts' => [
+      {
+        'type' => 'int',
+        'name' => 'rm_so'
+      },
+      {
+        'type' => 'int',
+        'name' => 'rm_eo'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_rxplus_t',
+    'elts' => [
+      {
+        'type' => 'ap_regex_t',
+        'name' => 'rx'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'subs'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'match'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'nmatch'
+      },
+      {
+        'type' => 'ap_regmatch_t *',
+        'name' => 'pmatch'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_sb_handle_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_scoreboard_e',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_slave_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_sload_t',
+    'elts' => [
+      {
+        'type' => 'int',
+        'name' => 'idle'
+      },
+      {
+        'type' => 'int',
+        'name' => 'busy'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'bytes_served'
+      },
+      {
+        'type' => 'unsigned long',
+        'name' => 'access_count'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_slotmem_callback_fn_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_slotmem_instance_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_slotmem_provider_t',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'apr_status_t(*)(ap_slotmem_instance_t *s, ap_slotmem_callback_fn_t *func, void *data, apr_pool_t *pool)',
+        'name' => 'doall'
+      },
+      {
+        'type' => 'apr_status_t(*)(ap_slotmem_instance_t **inst, const char *name, apr_size_t item_size, unsigned int item_num, ap_slotmem_type_t type, apr_pool_t *pool)',
+        'name' => 'create'
+      },
+      {
+        'type' => 'apr_status_t(*)(ap_slotmem_instance_t **inst, const char *name, apr_size_t *item_size, unsigned int *item_num, apr_pool_t *pool)',
+        'name' => 'attach'
+      },
+      {
+        'type' => 'apr_status_t(*)(ap_slotmem_instance_t *s, unsigned int item_id, void**mem)',
+        'name' => 'dptr'
+      },
+      {
+        'type' => 'apr_status_t(*)(ap_slotmem_instance_t *s, unsigned int item_id, unsigned char *dest, apr_size_t dest_len)',
+        'name' => 'get'
+      },
+      {
+        'type' => 'apr_status_t(*)(ap_slotmem_instance_t *slot, unsigned int item_id, unsigned char *src, apr_size_t src_len)',
+        'name' => 'put'
+      },
+      {
+        'type' => 'unsigned int(*)(ap_slotmem_instance_t *s)',
+        'name' => 'num_slots'
+      },
+      {
+        'type' => 'unsigned int(*)(ap_slotmem_instance_t *s)',
+        'name' => 'num_free_slots'
+      },
+      {
+        'type' => 'apr_size_t(*)(ap_slotmem_instance_t *s)',
+        'name' => 'slot_size'
+      },
+      {
+        'type' => 'apr_status_t(*)(ap_slotmem_instance_t *s, unsigned int *item_id)',
+        'name' => 'grab'
+      },
+      {
+        'type' => 'apr_status_t(*)(ap_slotmem_instance_t *s, unsigned int item_id)',
+        'name' => 'release'
+      },
+      {
+        'type' => 'apr_status_t(*)(ap_slotmem_instance_t *s, unsigned int item_id)',
+        'name' => 'fgrab'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_slotmem_type_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_socache_instance_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_socache_iterator_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_unix_identity_t',
+    'elts' => [
+      {
+        'type' => 'uid_t',
+        'name' => 'uid'
+      },
+      {
+        'type' => 'gid_t',
+        'name' => 'gid'
+      },
+      {
+        'type' => 'int',
+        'name' => 'userdir'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_version_t',
+    'elts' => [
+      {
+        'type' => 'int',
+        'name' => 'major'
+      },
+      {
+        'type' => 'int',
+        'name' => 'minor'
+      },
+      {
+        'type' => 'int',
+        'name' => 'patch'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'add_string'
+      }
+    ]
+  },
+  {
+    'type' => 'ap_vhost_iterate_conn_cb',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_watchdog_callback_fn_t',
+    'elts' => []
+  },
+  {
+    'type' => 'ap_watchdog_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_access_compat_ap_satisfies_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_authn_cache_store_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_dbd_acquire_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_dbd_cacquire_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_dbd_close_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_dbd_open_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_dbd_prepare_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_find_loaded_module_symbol_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_ident_lookup_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_logio_add_bytes_in_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_logio_add_bytes_out_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_logio_get_last_bytes_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_register_rewrite_mapfunc_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_request_insert_filter_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_request_remove_filter_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_session_get_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_session_load_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_session_save_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_session_set_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_signal_server_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_watchdog_get_instance_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_watchdog_register_callback_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_ap_watchdog_set_callback_interval_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_authn_ap_auth_name_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_authn_ap_auth_type_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_authn_ap_list_provider_names_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_authz_ap_list_provider_names_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_authz_some_auth_required_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_modperl_interp_unselect_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_modperl_thx_interp_get_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_uldap_cache_check_subgroups_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_uldap_cache_checkuserid_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_uldap_cache_compare_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_uldap_cache_comparedn_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_uldap_cache_getuserdn_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_uldap_connection_close_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_uldap_connection_find_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_uldap_connection_open_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_uldap_connection_unbind_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_uldap_ssl_supported_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_xml2enc_charset_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_OFN_xml2enc_filter_t
+ ',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_abortfunc_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_allocator_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_anylock_t',
+    'elts' => [
+      {
+        'type' => 'int',
+        'name' => 'type'
+      },
+      {
+        'type' => 'union apr_anylock_u_t',
+        'name' => 'lock'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_array_header_t',
+    'elts' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'int',
+        'name' => 'elt_size'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nelts'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nalloc'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'elts'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_brigade_flush',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_bucket',
+    'elts' => [
+      {
+        'type' => '_ANON 68',
+        'name' => 'link'
+      },
+      {
+        'type' => 'const apr_bucket_type_t *',
+        'name' => 'type'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'length'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'start'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'void(*)(void *e)',
+        'name' => 'free'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_bucket_alloc_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_bucket_brigade',
+    'elts' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_bucket_list',
+        'name' => 'list'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'bucket_alloc'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_bucket_file',
+    'elts' => [
+      {
+        'type' => 'apr_bucket_refcount',
+        'name' => 'refcount'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'fd'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'readpool'
+      },
+      {
+        'type' => 'int',
+        'name' => 'can_mmap'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_bucket_heap',
+    'elts' => [
+      {
+        'type' => 'apr_bucket_refcount',
+        'name' => 'refcount'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'base'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'alloc_len'
+      },
+      {
+        'type' => 'void(*)(void *data)',
+        'name' => 'free_func'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_bucket_mmap',
+    'elts' => [
+      {
+        'type' => 'apr_bucket_refcount',
+        'name' => 'refcount'
+      },
+      {
+        'type' => 'apr_mmap_t *',
+        'name' => 'mmap'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_bucket_pool',
+    'elts' => [
+      {
+        'type' => 'apr_bucket_heap',
+        'name' => 'heap'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'base'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_bucket_refcount',
+    'elts' => [
+      {
+        'type' => 'int',
+        'name' => 'refcount'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_bucket_structs',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_bucket_type_t',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'int',
+        'name' => 'num_func'
+      },
+      {
+        'type' => 'int',
+        'name' => 'is_metadata'
+      },
+      {
+        'type' => 'void(*)(void *data)',
+        'name' => 'destroy'
+      },
+      {
+        'type' => 'apr_status_t(*)(apr_bucket *b, const char **str, apr_size_t *len,
+                         apr_read_type_e block)',
+        'name' => 'read'
+      },
+      {
+        'type' => 'apr_status_t(*)(apr_bucket *e, apr_pool_t *pool)',
+        'name' => 'setaside'
+      },
+      {
+        'type' => 'apr_status_t(*)(apr_bucket *e, apr_size_t point)',
+        'name' => 'split'
+      },
+      {
+        'type' => 'apr_status_t(*)(apr_bucket *e, apr_bucket **c)',
+        'name' => 'copy'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_byte_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_child_errfn_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_cmdtype_e',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_crypto_block_key_mode_e',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_crypto_block_key_type_e',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_crypto_block_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_crypto_config_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_crypto_driver_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_crypto_hash_add_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_crypto_hash_finish_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_crypto_hash_init_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_crypto_hash_t',
+    'elts' => [
+      {
+        'type' => 'apr_crypto_hash_init_t *',
+        'name' => 'init'
+      },
+      {
+        'type' => 'apr_crypto_hash_add_t *',
+        'name' => 'add'
+      },
+      {
+        'type' => 'apr_crypto_hash_finish_t *',
+        'name' => 'finish'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'size'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_crypto_key_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_crypto_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_datatype_e',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_datum_t',
+    'elts' => [
+      {
+        'type' => 'char *',
+        'name' => 'dptr'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'dsize'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_dbd_driver_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_dbd_prepared_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_dbd_results_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_dbd_row_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_dbd_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_dbd_transaction_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_dbd_type_e',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_dbm_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_descriptor',
+    'elts' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_dev_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_dir_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_dso_handle_sym_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_dso_handle_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_exit_why_e',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_file_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_fileattrs_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_fileperms_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_filetype_e',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_finfo_t',
+    'elts' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'valid'
+      },
+      {
+        'type' => 'apr_fileperms_t',
+        'name' => 'protection'
+      },
+      {
+        'type' => 'apr_filetype_e',
+        'name' => 'filetype'
+      },
+      {
+        'type' => 'apr_uid_t',
+        'name' => 'user'
+      },
+      {
+        'type' => 'apr_gid_t',
+        'name' => 'group'
+      },
+      {
+        'type' => 'apr_ino_t',
+        'name' => 'inode'
+      },
+      {
+        'type' => 'apr_dev_t',
+        'name' => 'device'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'nlink'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'size'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'csize'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'atime'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'mtime'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'ctime'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'filehand'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_getopt_err_fn_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_getopt_option_t',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'int',
+        'name' => 'optch'
+      },
+      {
+        'type' => 'int',
+        'name' => 'has_arg'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'description'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_getopt_t',
+    'elts' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cont'
+      },
+      {
+        'type' => 'apr_getopt_err_fn_t *',
+        'name' => 'errfn'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'errarg'
+      },
+      {
+        'type' => 'int',
+        'name' => 'ind'
+      },
+      {
+        'type' => 'int',
+        'name' => 'opt'
+      },
+      {
+        'type' => 'int',
+        'name' => 'reset'
+      },
+      {
+        'type' => 'int',
+        'name' => 'argc'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'argv'
+      },
+      {
+        'type' => 'char const *',
+        'name' => 'place'
+      },
+      {
+        'type' => 'int',
+        'name' => 'interleave'
+      },
+      {
+        'type' => 'int',
+        'name' => 'skip_start'
+      },
+      {
+        'type' => 'int',
+        'name' => 'skip_end'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_gid_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_global_mutex_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_hash_do_callback_fn_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_hash_index_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_hash_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_hashfunc_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_hdtr_t',
+    'elts' => [
+      {
+        'type' => 'iovec *',
+        'name' => 'headers'
+      },
+      {
+        'type' => 'int',
+        'name' => 'numheaders'
+      },
+      {
+        'type' => 'iovec *',
+        'name' => 'trailers'
+      },
+      {
+        'type' => 'int',
+        'name' => 'numtrailers'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_in_addr_t',
+    'elts' => [
+      {
+        'type' => 'in_addr_t',
+        'name' => 's_addr'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_ino_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_int16_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_int32_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_int64_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_interface_e',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_interval_time_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_ipsubnet_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_kill_conditions_e',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_ldap_err_t',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'reason'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'msg'
+      },
+      {
+        'type' => 'int',
+        'name' => 'rc'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_ldap_opt_tls_cert_t',
+    'elts' => [
+      {
+        'type' => 'int',
+        'name' => 'type'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'password'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_ldap_url_desc_t',
+    'elts' => [
+      {
+        'type' => 'apr_ldap_url_desc_t *',
+        'name' => 'lud_next'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'lud_scheme'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'lud_host'
+      },
+      {
+        'type' => 'int',
+        'name' => 'lud_port'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'lud_dn'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'lud_attrs'
+      },
+      {
+        'type' => 'int',
+        'name' => 'lud_scope'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'lud_filter'
+      },
+      {
+        'type' => 'char **',
+        'name' => 'lud_exts'
+      },
+      {
+        'type' => 'int',
+        'name' => 'lud_crit_exts'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_lockmech_e',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_md4_ctx_t',
+    'elts' => [
+      {
+        'type' => 'apr_uint32_t[4]',
+        'name' => 'state'
+      },
+      {
+        'type' => 'apr_uint32_t[2]',
+        'name' => 'count'
+      },
+      {
+        'type' => 'unsigned char[64]',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'apr_xlate_t *',
+        'name' => 'xlate'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_md5_ctx_t',
+    'elts' => [
+      {
+        'type' => 'apr_uint32_t[4]',
+        'name' => 'state'
+      },
+      {
+        'type' => 'apr_uint32_t[2]',
+        'name' => 'count'
+      },
+      {
+        'type' => 'unsigned char[64]',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'apr_xlate_t *',
+        'name' => 'xlate'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_memcache_conn_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_memcache_hash_func',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_memcache_server_func',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_memcache_server_status_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_memcache_server_t',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'host'
+      },
+      {
+        'type' => 'apr_port_t',
+        'name' => 'port'
+      },
+      {
+        'type' => 'apr_memcache_server_status_t',
+        'name' => 'status'
+      },
+      {
+        'type' => 'apr_reslist_t *',
+        'name' => 'conns'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_thread_mutex_t *',
+        'name' => 'lock'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'btime'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_memcache_stats_t',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'version'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'pid'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'uptime'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'time'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'pointer_size'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'rusage_user'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'rusage_system'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'curr_items'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'total_items'
+      },
+      {
+        'type' => 'apr_uint64_t',
+        'name' => 'bytes'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'curr_connections'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'total_connections'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'connection_structures'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'cmd_get'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'cmd_set'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'get_hits'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'get_misses'
+      },
+      {
+        'type' => 'apr_uint64_t',
+        'name' => 'evictions'
+      },
+      {
+        'type' => 'apr_uint64_t',
+        'name' => 'bytes_read'
+      },
+      {
+        'type' => 'apr_uint64_t',
+        'name' => 'bytes_written'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'limit_maxbytes'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'threads'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_memcache_t',
+    'elts' => [
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'apr_uint16_t',
+        'name' => 'nalloc'
+      },
+      {
+        'type' => 'apr_uint16_t',
+        'name' => 'ntotal'
+      },
+      {
+        'type' => 'apr_memcache_server_t **',
+        'name' => 'live_servers'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'hash_baton'
+      },
+      {
+        'type' => 'apr_memcache_hash_func',
+        'name' => 'hash_func'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'server_baton'
+      },
+      {
+        'type' => 'apr_memcache_server_func',
+        'name' => 'server_func'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_memcache_value_t',
+    'elts' => [
+      {
+        'type' => 'apr_status_t',
+        'name' => 'status'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'apr_uint16_t',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_memnode_t',
+    'elts' => [
+      {
+        'type' => 'apr_memnode_t *',
+        'name' => 'next'
+      },
+      {
+        'type' => 'apr_memnode_t **',
+        'name' => 'ref'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'index'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'free_index'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'first_avail'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'endp'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_mmap_t',
+    'elts' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'cntxt'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mm'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'size'
+      },
+      {
+        'type' => '_ANON 66',
+        'name' => 'link'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_off_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_opt_fn_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_os_dir_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_os_dso_handle_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_os_exp_time_t',
+    'elts' => [
+      {
+        'type' => 'int',
+        'name' => 'tm_sec'
+      },
+      {
+        'type' => 'int',
+        'name' => 'tm_min'
+      },
+      {
+        'type' => 'int',
+        'name' => 'tm_hour'
+      },
+      {
+        'type' => 'int',
+        'name' => 'tm_mday'
+      },
+      {
+        'type' => 'int',
+        'name' => 'tm_mon'
+      },
+      {
+        'type' => 'int',
+        'name' => 'tm_year'
+      },
+      {
+        'type' => 'int',
+        'name' => 'tm_wday'
+      },
+      {
+        'type' => 'int',
+        'name' => 'tm_yday'
+      },
+      {
+        'type' => 'int',
+        'name' => 'tm_isdst'
+      },
+      {
+        'type' => 'long int',
+        'name' => 'tm_gmtoff'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'tm_zone'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_os_file_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_os_global_mutex_t',
+    'elts' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_proc_mutex_t *',
+        'name' => 'proc_mutex'
+      },
+      {
+        'type' => 'apr_thread_mutex_t *',
+        'name' => 'thread_mutex'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_os_imp_time_t',
+    'elts' => [
+      {
+        'type' => '__time_t',
+        'name' => 'tv_sec'
+      },
+      {
+        'type' => '__suseconds_t',
+        'name' => 'tv_usec'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_os_proc_mutex_t',
+    'elts' => [
+      {
+        'type' => 'int',
+        'name' => 'crossproc'
+      },
+      {
+        'type' => 'pthread_mutex_t *',
+        'name' => 'pthread_interproc'
+      },
+      {
+        'type' => 'pthread_mutex_t *',
+        'name' => 'intraproc'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_os_proc_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_os_shm_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_os_sock_info_t',
+    'elts' => [
+      {
+        'type' => 'apr_os_sock_t *',
+        'name' => 'os_sock'
+      },
+      {
+        'type' => 'sockaddr *',
+        'name' => 'local'
+      },
+      {
+        'type' => 'sockaddr *',
+        'name' => 'remote'
+      },
+      {
+        'type' => 'int',
+        'name' => 'family'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      },
+      {
+        'type' => 'int',
+        'name' => 'protocol'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_os_sock_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_os_thread_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_os_threadkey_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_other_child_rec_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_pollcb_cb_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_pollcb_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_pollfd_t',
+    'elts' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_datatype_e',
+        'name' => 'desc_type'
+      },
+      {
+        'type' => 'apr_int16_t',
+        'name' => 'reqevents'
+      },
+      {
+        'type' => 'apr_int16_t',
+        'name' => 'rtnevents'
+      },
+      {
+        'type' => 'apr_descriptor',
+        'name' => 'desc'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'client_data'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_pollset_method_e',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_pollset_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_pool_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_port_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_proc_mutex_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_proc_t',
+    'elts' => [
+      {
+        'type' => 'pid_t',
+        'name' => 'pid'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'in'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'out'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'err'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_procattr_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_queue_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_random_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_read_type_e',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_reslist_constructor',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_reslist_destructor',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_reslist_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_rmm_off_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_rmm_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_sdbm_datum_t',
+    'elts' => [
+      {
+        'type' => 'char *',
+        'name' => 'dptr'
+      },
+      {
+        'type' => 'int',
+        'name' => 'dsize'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_sdbm_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_seek_where_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_sha1_ctx_t',
+    'elts' => [
+      {
+        'type' => 'apr_uint32_t[5]',
+        'name' => 'digest'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'count_lo'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'count_hi'
+      },
+      {
+        'type' => 'apr_uint32_t[16]',
+        'name' => 'data'
+      },
+      {
+        'type' => 'int',
+        'name' => 'local'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_shm_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_short_interval_time_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_shutdown_how_e',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_sigfunc_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_signum_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_size_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_sockaddr_t',
+    'elts' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'hostname'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'servname'
+      },
+      {
+        'type' => 'apr_port_t',
+        'name' => 'port'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'family'
+      },
+      {
+        'type' => 'apr_socklen_t',
+        'name' => 'salen'
+      },
+      {
+        'type' => 'int',
+        'name' => 'ipaddr_len'
+      },
+      {
+        'type' => 'int',
+        'name' => 'addr_str_len'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ipaddr_ptr'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'next'
+      },
+      {
+        'type' => 'union _ANON 1',
+        'name' => 'sa'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_socket_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_socklen_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_ssize_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_status_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_strmatch_pattern',
+    'elts' => [
+      {
+        'type' => 'const char *(*)(const apr_strmatch_pattern *this_pattern,
+                           const char *s, apr_size_t slen)',
+        'name' => 'compare'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'pattern'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'length'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'context'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_table_entry_t',
+    'elts' => [
+      {
+        'type' => 'char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'val'
+      },
+      {
+        'type' => 'apr_uint32_t',
+        'name' => 'key_checksum'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_table_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_text',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'text'
+      },
+      {
+        'type' => 'apr_text *',
+        'name' => 'next'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_text_header',
+    'elts' => [
+      {
+        'type' => 'apr_text *',
+        'name' => 'first'
+      },
+      {
+        'type' => 'apr_text *',
+        'name' => 'last'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_thread_cond_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_thread_mutex_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_thread_once_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_thread_pool_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_thread_rwlock_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_thread_start_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_thread_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_threadattr_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_threadkey_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_time_exp_t',
+    'elts' => [
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'tm_usec'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'tm_sec'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'tm_min'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'tm_hour'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'tm_mday'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'tm_mon'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'tm_year'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'tm_wday'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'tm_yday'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'tm_isdst'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'tm_gmtoff'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_time_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_uid_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_uint16_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_uint32_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_uint64_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_uintptr_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_uri_t',
+    'elts' => [
+      {
+        'type' => 'char *',
+        'name' => 'scheme'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'hostinfo'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'user'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'password'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'hostname'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'port_str'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'query'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'fragment'
+      },
+      {
+        'type' => 'hostent *',
+        'name' => 'hostent'
+      },
+      {
+        'type' => 'apr_port_t',
+        'name' => 'port'
+      },
+      {
+        'type' => 'unsigned',
+        'name' => 'is_initialized'
+      },
+      {
+        'type' => 'unsigned',
+        'name' => 'dns_looked_up'
+      },
+      {
+        'type' => 'unsigned',
+        'name' => 'dns_resolved'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_uuid_t',
+    'elts' => [
+      {
+        'type' => 'unsigned char[16]',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_version_t',
+    'elts' => [
+      {
+        'type' => 'int',
+        'name' => 'major'
+      },
+      {
+        'type' => 'int',
+        'name' => 'minor'
+      },
+      {
+        'type' => 'int',
+        'name' => 'patch'
+      },
+      {
+        'type' => 'int',
+        'name' => 'is_dev'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_vformatter_buff_t',
+    'elts' => [
+      {
+        'type' => 'char *',
+        'name' => 'curpos'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'endpos'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_wait_how_e',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_xlate_t',
+    'elts' => []
+  },
+  {
+    'type' => 'apr_xml_attr',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'int',
+        'name' => 'ns'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'value'
+      },
+      {
+        'type' => 'apr_xml_attr *',
+        'name' => 'next'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_xml_doc',
+    'elts' => [
+      {
+        'type' => 'apr_xml_elem *',
+        'name' => 'root'
+      },
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'namespaces'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_xml_elem',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'int',
+        'name' => 'ns'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'lang'
+      },
+      {
+        'type' => 'apr_text_header',
+        'name' => 'first_cdata'
+      },
+      {
+        'type' => 'apr_text_header',
+        'name' => 'following_cdata'
+      },
+      {
+        'type' => 'apr_xml_elem *',
+        'name' => 'parent'
+      },
+      {
+        'type' => 'apr_xml_elem *',
+        'name' => 'next'
+      },
+      {
+        'type' => 'apr_xml_elem *',
+        'name' => 'first_child'
+      },
+      {
+        'type' => 'apr_xml_attr *',
+        'name' => 'attr'
+      },
+      {
+        'type' => 'apr_xml_elem *',
+        'name' => 'last_child'
+      },
+      {
+        'type' => 'apr_xml_ns_scope *',
+        'name' => 'ns_scope'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'priv'
+      }
+    ]
+  },
+  {
+    'type' => 'apr_xml_parser',
+    'elts' => []
+  },
+  {
+    'type' => 'cmd_parms',
+    'elts' => [
+      {
+        'type' => 'void *',
+        'name' => 'info'
+      },
+      {
+        'type' => 'int',
+        'name' => 'override'
+      },
+      {
+        'type' => 'int',
+        'name' => 'override_opts'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'override_list'
+      },
+      {
+        'type' => 'apr_int64_t',
+        'name' => 'limited'
+      },
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'limited_xmethods'
+      },
+      {
+        'type' => 'ap_method_list_t *',
+        'name' => 'xlimited'
+      },
+      {
+        'type' => 'ap_configfile_t *',
+        'name' => 'config_file'
+      },
+      {
+        'type' => 'ap_directive_t *',
+        'name' => 'directive'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'temp_pool'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 'server'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'const command_rec *',
+        'name' => 'cmd'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'context'
+      },
+      {
+        'type' => 'const ap_directive_t *',
+        'name' => 'err_directive'
+      }
+    ]
+  },
+  {
+    'type' => 'command_rec',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'cmd_func',
+        'name' => 'func'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'cmd_data'
+      },
+      {
+        'type' => 'int',
+        'name' => 'req_override'
+      },
+      {
+        'type' => 'enum cmd_how',
+        'name' => 'args_how'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'errmsg'
+      }
+    ]
+  },
+  {
+    'type' => 'conn_rec',
+    'elts' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 'base_server'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'vhost_lookup_data'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'local_addr'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'client_addr'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'client_ip'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'remote_host'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'remote_logname'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'local_ip'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'local_host'
+      },
+      {
+        'type' => 'long',
+        'name' => 'id'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'conn_config'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'notes'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'input_filters'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'output_filters'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'sbh'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'bucket_alloc'
+      },
+      {
+        'type' => 'conn_state_t *',
+        'name' => 'cs'
+      },
+      {
+        'type' => 'int',
+        'name' => 'data_in_input_filters'
+      },
+      {
+        'type' => 'int',
+        'name' => 'data_in_output_filters'
+      },
+      {
+        'type' => 'unsigned int',
+        'name' => 'clogging_input_filters'
+      },
+      {
+        'type' => 'signed int',
+        'name' => 'double_reverse'
+      },
+      {
+        'type' => 'unsigned',
+        'name' => 'aborted'
+      },
+      {
+        'type' => 'ap_conn_keepalive_e',
+        'name' => 'keepalive'
+      },
+      {
+        'type' => 'int',
+        'name' => 'keepalives'
+      },
+      {
+        'type' => 'const struct ap_logconf *',
+        'name' => 'log'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'log_id'
+      },
+      {
+        'type' => 'apr_thread_t *',
+        'name' => 'current_thread'
+      }
+    ]
+  },
+  {
+    'type' => 'core_net_rec',
+    'elts' => []
+  },
+  {
+    'type' => 'htaccess_result',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'dir'
+      },
+      {
+        'type' => 'int',
+        'name' => 'override'
+      },
+      {
+        'type' => 'int',
+        'name' => 'override_opts'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'override_list'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'htaccess'
+      },
+      {
+        'type' => 'const struct htaccess_result *',
+        'name' => 'next'
+      }
+    ]
+  },
+  {
+    'type' => 'modperl_uri_t',
+    'elts' => [
+      {
+        'type' => 'apr_uri_t',
+        'name' => 'uri'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'path_info'
+      }
+    ]
+  },
+  {
+    'type' => 'module',
+    'elts' => [
+      {
+        'type' => 'int',
+        'name' => 'version'
+      },
+      {
+        'type' => 'int',
+        'name' => 'minor_version'
+      },
+      {
+        'type' => 'int',
+        'name' => 'module_index'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dynamic_load_handle'
+      },
+      {
+        'type' => 'module_struct *',
+        'name' => 'next'
+      },
+      {
+        'type' => 'unsigned long',
+        'name' => 'magic'
+      },
+      {
+        'type' => 'void(*) (process_rec *process)',
+        'name' => 'rewrite_args'
+      },
+      {
+        'type' => 'void *(*) (apr_pool_t *p, char *dir)',
+        'name' => 'create_dir_config'
+      },
+      {
+        'type' => 'void *(*) (apr_pool_t *p, void *base_conf, void *new_conf)',
+        'name' => 'merge_dir_config'
+      },
+      {
+        'type' => 'void *(*) (apr_pool_t *p, server_rec *s)',
+        'name' => 'create_server_config'
+      },
+      {
+        'type' => 'void *(*) (apr_pool_t *p, void *base_conf,
+                                  void *new_conf)',
+        'name' => 'merge_server_config'
+      },
+      {
+        'type' => 'const command_rec *',
+        'name' => 'cmds'
+      },
+      {
+        'type' => 'void(*) (apr_pool_t *p)',
+        'name' => 'register_hooks'
+      }
+    ]
+  },
+  {
+    'type' => 'piped_log',
+    'elts' => []
+  },
+  {
+    'type' => 'process_rec',
+    'elts' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'short_name'
+      },
+      {
+        'type' => 'const char * const *',
+        'name' => 'argv'
+      },
+      {
+        'type' => 'int',
+        'name' => 'argc'
+      }
+    ]
+  },
+  {
+    'type' => 'request_rec',
+    'elts' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'connection'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 'server'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'next'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'prev'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'main'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'the_request'
+      },
+      {
+        'type' => 'int',
+        'name' => 'assbackwards'
+      },
+      {
+        'type' => 'int',
+        'name' => 'proxyreq'
+      },
+      {
+        'type' => 'int',
+        'name' => 'header_only'
+      },
+      {
+        'type' => 'int',
+        'name' => 'proto_num'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'protocol'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'hostname'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'request_time'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'status_line'
+      },
+      {
+        'type' => 'int',
+        'name' => 'status'
+      },
+      {
+        'type' => 'int',
+        'name' => 'method_number'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'method'
+      },
+      {
+        'type' => 'apr_int64_t',
+        'name' => 'allowed'
+      },
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'allowed_xmethods'
+      },
+      {
+        'type' => 'ap_method_list_t *',
+        'name' => 'allowed_methods'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'sent_bodyct'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'bytes_sent'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'mtime'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'range'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'clength'
+      },
+      {
+        'type' => 'int',
+        'name' => 'chunked'
+      },
+      {
+        'type' => 'int',
+        'name' => 'read_body'
+      },
+      {
+        'type' => 'int',
+        'name' => 'read_chunked'
+      },
+      {
+        'type' => 'unsigned',
+        'name' => 'expecting_100'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'kept_body'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'body_table'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'remaining'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'read_length'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'headers_in'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'headers_out'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'err_headers_out'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'subprocess_env'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'notes'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'content_type'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'handler'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'content_encoding'
+      },
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'content_languages'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'vlist_validator'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'user'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'ap_auth_type'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'unparsed_uri'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'uri'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'filename'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'canonical_filename'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'path_info'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'args'
+      },
+      {
+        'type' => 'int',
+        'name' => 'used_path_info'
+      },
+      {
+        'type' => 'int',
+        'name' => 'eos_sent'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'per_dir_config'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'request_config'
+      },
+      {
+        'type' => 'const struct ap_logconf *',
+        'name' => 'log'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'log_id'
+      },
+      {
+        'type' => 'const struct htaccess_result *',
+        'name' => 'htaccess'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'output_filters'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'input_filters'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'proto_output_filters'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'proto_input_filters'
+      },
+      {
+        'type' => 'int',
+        'name' => 'no_cache'
+      },
+      {
+        'type' => 'int',
+        'name' => 'no_local_copy'
+      },
+      {
+        'type' => 'apr_thread_mutex_t *',
+        'name' => 'invoke_mtx'
+      },
+      {
+        'type' => 'apr_uri_t',
+        'name' => 'parsed_uri'
+      },
+      {
+        'type' => 'apr_finfo_t',
+        'name' => 'finfo'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'useragent_addr'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'useragent_ip'
+      }
+    ]
+  },
+  {
+    'type' => 'server_addr_rec',
+    'elts' => [
+      {
+        'type' => 'server_addr_rec *',
+        'name' => 'next'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'virthost'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'host_addr'
+      },
+      {
+        'type' => 'apr_port_t',
+        'name' => 'host_port'
+      }
+    ]
+  },
+  {
+    'type' => 'server_rec',
+    'elts' => [
+      {
+        'type' => 'process_rec *',
+        'name' => 'process'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 'next'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'error_fname'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'error_log'
+      },
+      {
+        'type' => 'ap_logconf',
+        'name' => 'log'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'module_config'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'lookup_defaults'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'defn_name'
+      },
+      {
+        'type' => 'unsigned',
+        'name' => 'defn_line_number'
+      },
+      {
+        'type' => 'char',
+        'name' => 'is_virtual'
+      },
+      {
+        'type' => 'apr_port_t',
+        'name' => 'port'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'server_scheme'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'server_admin'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'server_hostname'
+      },
+      {
+        'type' => 'server_addr_rec *',
+        'name' => 'addrs'
+      },
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 'timeout'
+      },
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 'keep_alive_timeout'
+      },
+      {
+        'type' => 'int',
+        'name' => 'keep_alive_max'
+      },
+      {
+        'type' => 'int',
+        'name' => 'keep_alive'
+      },
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'names'
+      },
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'wild_names'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'int',
+        'name' => 'pathlen'
+      },
+      {
+        'type' => 'int',
+        'name' => 'limit_req_line'
+      },
+      {
+        'type' => 'int',
+        'name' => 'limit_req_fieldsize'
+      },
+      {
+        'type' => 'int',
+        'name' => 'limit_req_fields'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'context'
+      }
+    ]
+  },
+  {
+    'type' => 'session_rec',
+    'elts' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_uuid_t *',
+        'name' => 'uuid'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'remote_user'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'entries'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'encoded'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'expiry'
+      },
+      {
+        'type' => 'long',
+        'name' => 'maxage'
+      },
+      {
+        'type' => 'int',
+        'name' => 'dirty'
+      },
+      {
+        'type' => 'int',
+        'name' => 'cached'
+      },
+      {
+        'type' => 'int',
+        'name' => 'written'
+      }
+    ]
+  },
+  {
+    'type' => 'subrequest_rec',
+    'elts' => []
+  },
+  {
+    'type' => 'unixd_config_rec',
+    'elts' => [
+      {
+        'type' => 'const char *',
+        'name' => 'user_name'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'group_name'
+      },
+      {
+        'type' => 'uid_t',
+        'name' => 'user_id'
+      },
+      {
+        'type' => 'gid_t',
+        'name' => 'group_id'
+      },
+      {
+        'type' => 'int',
+        'name' => 'suexec_enabled'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'chroot_dir'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'suexec_disabled_reason'
+      }
+    ]
+  },
+  {
+    'type' => 'modperl_interp_t',
+    'elts' => [
+      {
+        'type' => 'modperl_interp_pool_t *',
+        'name' => 'mip'
+      },
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'perl'
+      },
+      {
+        'type' => 'int',
+        'name' => 'num_requests'
+      },
+      {
+        'type' => 'U8',
+        'name' => 'flags'
+      },
+      {
+        'type' => 'modperl_config_con_t *',
+        'name' => 'ccfg'
+      },
+      {
+        'type' => 'int',
+        'name' => 'refcnt'
+      },
+      {
+        'type' => 'unsigned long',
+        'name' => 'tid'
+      }
+    ]
+  },
+  {
+    'type' => 'modperl_interp_pool_t',
+    'elts' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 'server'
+      },
+      {
+        'type' => 'modperl_tipool_t *',
+        'name' => 'tipool'
+      },
+      {
+        'type' => 'modperl_tipool_config_t *',
+        'name' => 'tipool_cfg'
+      },
+      {
+        'type' => 'modperl_interp_t *',
+        'name' => 'parent'
+      }
+    ]
+  },
+  {
+    'type' => 'modperl_tipool_t',
+    'elts' => [
+      {
+        'type' => 'perl_mutex',
+        'name' => 'tiplock'
+      },
+      {
+        'type' => 'perl_cond',
+        'name' => 'available'
+      },
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'idle'
+      },
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'busy'
+      },
+      {
+        'type' => 'int',
+        'name' => 'in_use'
+      },
+      {
+        'type' => 'int',
+        'name' => 'size'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'modperl_tipool_config_t *',
+        'name' => 'cfg'
+      },
+      {
+        'type' => 'modperl_tipool_vtbl_t *',
+        'name' => 'func'
+      }
+    ]
+  },
+  {
+    'type' => 'modperl_tipool_config_t',
+    'elts' => [
+      {
+        'type' => 'int',
+        'name' => 'start'
+      },
+      {
+        'type' => 'int',
+        'name' => 'min_spare'
+      },
+      {
+        'type' => 'int',
+        'name' => 'max_spare'
+      },
+      {
+        'type' => 'int',
+        'name' => 'max'
+      },
+      {
+        'type' => 'int',
+        'name' => 'max_requests'
+      }
+    ]
+  }
+];
+
+
+1;
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/tables/current24/APR/FunctionTable.pm mod_perl-2.0.8/xs/tables/current24/APR/FunctionTable.pm
--- mod_perl-2.0.8/xs/tables/current24/APR/FunctionTable.pm	1970-01-01 03:00:00.000000000 +0300
+++ mod_perl-2.0.8/xs/tables/current24/APR/FunctionTable.pm	2014-05-08 19:05:39.791064943 +0400
@@ -0,0 +1,228 @@
+package APR::FunctionTable;
+
+# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+# ! WARNING: this file was manually generated on
+# !          Tue Jun 22 22:00:00 2004
+# !          It contains a subset of functions appearing in
+# !          ModPerl::FunctionTable used to build APR.so
+# !          Eventually this will be autogenerated by
+# !          Apache::ParseSource
+# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+
+$APR::FunctionTable = [
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_trace',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'func'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_trace_level_set',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'logfile'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'level'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_trace_logfile_set',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'logfile_new'
+      }
+    ]
+  },
+  {
+    'return_type' => 'unsigned long',
+    'name' => 'modperl_debug_level',
+    'args' => []
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_hash_tie',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'tsv'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'modperl_hash_tied_object',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'tsv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_perl_sv_setref_uv',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'rv'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'UV',
+        'name' => 'uv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_uri_t *',
+    'name' => 'modperl_uri_new',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_perl_gensym',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'pack'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'modperl_error_strerror',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_status_t',
+        'name' => 'rc'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_croak',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_status_t',
+        'name' => 'rc'
+      },
+      {
+        'type' => 'const char*',
+        'name' => 'func'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_interp_unselect',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'modperl_bucket_sv_create',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'offset'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      }
+    ]
+  },
+];
+
+1;
diff '--exclude=.svn' '--exclude=*.~1~' -urN mod_perl-2.0.8/xs/tables/current24/ModPerl/FunctionTable.pm mod_perl-2.0.8/xs/tables/current24/ModPerl/FunctionTable.pm
--- mod_perl-2.0.8/xs/tables/current24/ModPerl/FunctionTable.pm	1970-01-01 03:00:00.000000000 +0300
+++ mod_perl-2.0.8/xs/tables/current24/ModPerl/FunctionTable.pm	2014-05-08 19:05:39.800358283 +0400
@@ -0,0 +1,8570 @@
+package ModPerl::FunctionTable;
+
+# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+# ! WARNING: generated by ModPerl::ParseSource/0.01
+# !          Mon Jul  1 12:38:19 2013
+# !          do NOT edit, any changes will be lost !
+# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+
+$ModPerl::FunctionTable = [
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_access_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_apr_array_header2avrv',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_array_header_t *',
+        'name' => 'array'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_authen_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_authz_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_array_header_t *',
+    'name' => 'modperl_avrv2apr_array_header',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'avrv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_brigade_dump',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'file'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'modperl_bucket_sv_create',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'offset'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_callback',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_handler_t *',
+        'name' => 'handler'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'AV *',
+        'name' => 'args'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_callback_connection',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'idx'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'modperl_hook_run_mode_e',
+        'name' => 'run_mode'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_callback_files',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'idx'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'plog'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'modperl_hook_run_mode_e',
+        'name' => 'run_mode'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_callback_per_dir',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'idx'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'modperl_hook_run_mode_e',
+        'name' => 'run_mode'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_callback_per_srv',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'idx'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'modperl_hook_run_mode_e',
+        'name' => 'run_mode'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_callback_pre_connection',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'idx'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'csd'
+      },
+      {
+        'type' => 'modperl_hook_run_mode_e',
+        'name' => 'run_mode'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_callback_process',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'idx'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'modperl_hook_run_mode_e',
+        'name' => 'run_mode'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_callback_run_handlers',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'idx'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'plog'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      },
+      {
+        'type' => 'modperl_hook_run_mode_e',
+        'name' => 'run_mode'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_cgi_header_parse',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'len'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'body'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_child_init_handler',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_cleanup_data_t *',
+    'name' => 'modperl_cleanup_data_new',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_END',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_access_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_add_var',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg1'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_authen_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_authn_provider',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg1'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_authz_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_authz_provider',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg1'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_child_exit_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_child_init_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_cleanup_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_config_requires',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_fixup_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_header_parser_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_init_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_input_filter_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_interp_max',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_interp_max_requests',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_interp_max_spare',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_interp_min_spare',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_interp_scope',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_interp_start',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_load_module',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_log_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_map_to_storage_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_modules',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_open_logs_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_options',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_output_filter_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_pass_env',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_perl',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_perldo',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_pod',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_pod_cut',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_post_config_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_post_config_requires',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_post_read_request_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_pre_connection_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_process_connection_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'modperl_cmd_push_filter_handlers',
+    'args' => [
+      {
+        'type' => 'MpAV **',
+        'name' => 'handlers'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'modperl_cmd_push_handlers',
+    'args' => [
+      {
+        'type' => 'MpAV **',
+        'name' => 'handlers'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_requires',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_response_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_set_env',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg1'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_set_input_filter',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_set_output_filter',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_set_var',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg1'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_switches',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_trace',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'mconfig'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_trans_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_cmd_type_handlers',
+    'args' => [
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'dummy'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'U16 *',
+    'name' => 'modperl_code_attrs',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'CV *',
+        'name' => 'cv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_config_apply_PerlModule',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'modperl_config_srv_t *',
+        'name' => 'scfg'
+      },
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'perl'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_config_apply_PerlPostConfigRequire',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'modperl_config_srv_t *',
+        'name' => 'scfg'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_config_apply_PerlRequire',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'modperl_config_srv_t *',
+        'name' => 'scfg'
+      },
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'perl'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_config_con_t *',
+    'name' => 'modperl_config_con_new',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'modperl_config_dir_create',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'dir'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'modperl_config_dir_merge',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'basev'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'addv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_config_dir_t *',
+    'name' => 'modperl_config_dir_new',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_config_insert',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptmp'
+      },
+      {
+        'type' => 'int',
+        'name' => 'override'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'int',
+        'name' => 'override_options'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'conf'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'lines'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_config_insert_parms',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'lines'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_config_insert_request',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'lines'
+      },
+      {
+        'type' => 'int',
+        'name' => 'override'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'int',
+        'name' => 'override_options'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_config_insert_server',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'lines'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_config_is_perl_option_enabled',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_config_req_cleanup',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_config_req_t *',
+    'name' => 'modperl_config_req_new',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_config_request_cleanup',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char **',
+    'name' => 'modperl_config_srv_argv_init',
+    'args' => [
+      {
+        'type' => 'modperl_config_srv_t *',
+        'name' => 'scfg'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'argc'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'modperl_config_srv_create',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'modperl_config_srv_merge',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'basev'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'addv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_config_srv_t *',
+    'name' => 'modperl_config_srv_new',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_const_compile',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'arg'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char **',
+    'name' => 'modperl_constants_group_lookup_apache2_const',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char **',
+    'name' => 'modperl_constants_group_lookup_apr_const',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char **',
+    'name' => 'modperl_constants_group_lookup_modperl',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_constants_lookup_apache2_const',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_constants_lookup_apr_const',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_constants_lookup_modperl',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_croak',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_status_t',
+        'name' => 'rc'
+      },
+      {
+        'type' => 'const char*',
+        'name' => 'func'
+      }
+    ]
+  },
+  {
+    'return_type' => 'unsigned long',
+    'name' => 'modperl_debug_level',
+    'args' => []
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_dir_config',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv_val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_clear',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_configure_request_dir',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_configure_request_srv',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_configure_server',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_default_populate',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_hash_keys',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_hv_store',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_init',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_request_populate',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_request_tie',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_request_unpopulate',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_request_untie',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_sync_dir_env_hash2table',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'modperl_config_dir_t *',
+        'name' => 'dcfg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_sync_srv_env_hash2table',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'modperl_config_srv_t *',
+        'name' => 'scfg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_env_unload',
+    'args' => []
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'modperl_error_strerror',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_status_t',
+        'name' => 'rc'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_errsv',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'int',
+        'name' => 'status'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_errsv_prepend',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'pat'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'modperl_file2package',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'file'
+      }
+    ]
+  },
+  {
+    'return_type' => 'U16 *',
+    'name' => 'modperl_filter_attributes',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'package'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'cvrv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_filter_t *',
+    'name' => 'modperl_filter_mg_get',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'obj'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_filter_t *',
+    'name' => 'modperl_filter_new',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'modperl_filter_mode_e',
+        'name' => 'mode'
+      },
+      {
+        'type' => 'ap_input_mode_t',
+        'name' => 'input_mode'
+      },
+      {
+        'type' => 'apr_read_type_e',
+        'name' => 'block'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'readbytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_filter_resolve_init_handler',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_handler_t *',
+        'name' => 'handler'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_filter_runtime_add',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'modperl_filter_mode_e',
+        'name' => 'mode'
+      },
+      {
+        'type' => 'modperl_filter_add_t',
+        'name' => 'addfunc'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'callback'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_fixup_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'U32',
+    'name' => 'modperl_flags_lookup_dir',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      }
+    ]
+  },
+  {
+    'return_type' => 'U32',
+    'name' => 'modperl_flags_lookup_srv',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'str'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'modperl_get_perl_module_config',
+    'args' => [
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'cv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_anon_cnt_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_global_anon_cnt_next',
+    'args' => []
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'modperl_global_get',
+    'args' => [
+      {
+        'type' => 'modperl_global_t *',
+        'name' => 'global'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'modperl_global_get_pconf',
+    'args' => []
+  },
+  {
+    'return_type' => 'server_rec *',
+    'name' => 'modperl_global_get_server_rec',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_init',
+    'args' => [
+      {
+        'type' => 'modperl_global_t *',
+        'name' => 'global'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_init_pconf',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_init_server_rec',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec * server_rec',
+        'name' => 'arg1'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_lock',
+    'args' => [
+      {
+        'type' => 'modperl_global_t *',
+        'name' => 'global'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_lock_pconf',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_lock_server_rec',
+    'args' => []
+  },
+  {
+    'return_type' => 'request_rec *',
+    'name' => 'modperl_global_request',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'svr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_request_cfg_set',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_request_obj_set',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'svr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_request_set',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_set',
+    'args' => [
+      {
+        'type' => 'modperl_global_t *',
+        'name' => 'global'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_set_pconf',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'arg0'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_set_server_rec',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'arg0'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_unlock',
+    'args' => [
+      {
+        'type' => 'modperl_global_t *',
+        'name' => 'global'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_unlock_pconf',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_global_unlock_server_rec',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_handler_anon_add',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_mgv_t *',
+        'name' => 'anon'
+      },
+      {
+        'type' => 'CV *',
+        'name' => 'cv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'CV *',
+    'name' => 'modperl_handler_anon_get',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_mgv_t *',
+        'name' => 'anon'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_handler_anon_init',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_mgv_t *',
+    'name' => 'modperl_handler_anon_next',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'MpAV *',
+    'name' => 'modperl_handler_array_merge',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'MpAV *',
+        'name' => 'base_a'
+      },
+      {
+        'type' => 'MpAV *',
+        'name' => 'add_a'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_handler_desc_connection',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'idx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_handler_desc_files',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'idx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_handler_desc_per_dir',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'idx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_handler_desc_per_srv',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'idx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_handler_desc_pre_connection',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'idx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_handler_desc_process',
+    'args' => [
+      {
+        'type' => 'int',
+        'name' => 'idx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_handler_t *',
+    'name' => 'modperl_handler_dup',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'modperl_handler_t *',
+        'name' => 'h'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_handler_equal',
+    'args' => [
+      {
+        'type' => 'modperl_handler_t *',
+        'name' => 'h1'
+      },
+      {
+        'type' => 'modperl_handler_t *',
+        'name' => 'h2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'MpAV **',
+    'name' => 'modperl_handler_get_handlers',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'modperl_handler_action_e',
+        'name' => 'action'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_handler_lookup',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'int *',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'MpAV **',
+    'name' => 'modperl_handler_lookup_handlers',
+    'args' => [
+      {
+        'type' => 'modperl_config_dir_t *',
+        'name' => 'dcfg'
+      },
+      {
+        'type' => 'modperl_config_srv_t *',
+        'name' => 'scfg'
+      },
+      {
+        'type' => 'modperl_config_req_t *',
+        'name' => 'rcfg'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      },
+      {
+        'type' => 'int',
+        'name' => 'idx'
+      },
+      {
+        'type' => 'modperl_handler_action_e',
+        'name' => 'action'
+      },
+      {
+        'type' => 'const char **',
+        'name' => 'desc'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_handler_make_args',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'AV **',
+        'name' => 'avp'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_handler_name',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'modperl_handler_t *',
+        'name' => 'handler'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_handler_t *',
+    'name' => 'modperl_handler_new',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_handler_t *',
+    'name' => 'modperl_handler_new_from_sv',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_handler_perl_add_handlers',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      },
+      {
+        'type' => 'modperl_handler_action_e',
+        'name' => 'action'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_handler_perl_get_handlers',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'MpAV **',
+        'name' => 'handp'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_handler_push_handlers',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'MpAV *',
+        'name' => 'handlers'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_handler_resolve',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_handler_t **',
+        'name' => 'handp'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_hash_seed_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_hash_seed_set',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_hash_tie',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'tsv'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'modperl_hash_tied_object',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'tsv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_hash_tied_object_rv',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'tsv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_header_parser_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_hook_init',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'plog'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_hook_pre_config',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'plog'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_init',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_init_globals',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_init_vhost',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 'base_server'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_input_filter_add_connection',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_input_filter_add_request',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_input_filter_flush',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'modperl_filter_t *',
+        'name' => 'filter'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_input_filter_handler',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'ap_input_mode_t',
+        'name' => 'input_mode'
+      },
+      {
+        'type' => 'apr_read_type_e',
+        'name' => 'block'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'readbytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'modperl_input_filter_read',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_filter_t *',
+        'name' => 'filter'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'wanted'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_input_filter_write',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_filter_t *',
+        'name' => 'filter'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_interp_cleanup',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_interp_clone_init',
+    'args' => [
+      {
+        'type' => 'modperl_interp_t *',
+        'name' => 'interp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_interp_destroy',
+    'args' => [
+      {
+        'type' => 'modperl_interp_t *',
+        'name' => 'interp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_interp_t *',
+    'name' => 'modperl_interp_get',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_interp_init',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_interp_mip_walk',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'current_perl'
+      },
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'parent_perl'
+      },
+      {
+        'type' => 'modperl_interp_pool_t *',
+        'name' => 'mip'
+      },
+      {
+        'type' => 'modperl_interp_mip_walker_t',
+        'name' => 'walker'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_interp_mip_walk_servers',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'current_perl'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 'base_server'
+      },
+      {
+        'type' => 'modperl_interp_mip_walker_t',
+        'name' => 'walker'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_interp_t *',
+    'name' => 'modperl_interp_new',
+    'args' => [
+      {
+        'type' => 'modperl_interp_pool_t *',
+        'name' => 'mip'
+      },
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_interp_pool_destroy',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_interp_t *',
+    'name' => 'modperl_interp_pool_get',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_interp_t *',
+    'name' => 'modperl_interp_pool_select',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_interp_pool_set',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'modperl_interp_t *',
+        'name' => 'interp'
+      },
+      {
+        'type' => 'int',
+        'name' => 'cleanup'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_interp_scope_desc',
+    'args' => [
+      {
+        'type' => 'modperl_interp_scope_e',
+        'name' => 'scope'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_interp_t *',
+    'name' => 'modperl_interp_select',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_interp_unselect',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_io_apache_init',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_io_handle_tie',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'GV *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ptr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_io_handle_tied',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'GV *',
+        'name' => 'handle'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'classname'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_io_handle_untie',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'GV *',
+        'name' => 'handle'
+      }
+    ]
+  },
+  {
+    'return_type' => 'GV *',
+    'name' => 'modperl_io_perlio_override_stdin',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'GV *',
+    'name' => 'modperl_io_perlio_override_stdout',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_io_perlio_restore_stdin',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'GV *',
+        'name' => 'handle'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_io_perlio_restore_stdout',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'GV *',
+        'name' => 'handle'
+      }
+    ]
+  },
+  {
+    'return_type' => 'GV *',
+    'name' => 'modperl_io_tie_stdin',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'GV *',
+    'name' => 'modperl_io_tie_stdout',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_is_running',
+    'args' => []
+  },
+  {
+    'return_type' => 'modperl_list_t *',
+    'name' => 'modperl_list_append',
+    'args' => [
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'list'
+      },
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'new_list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_list_t *',
+    'name' => 'modperl_list_first',
+    'args' => [
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_list_t *',
+    'name' => 'modperl_list_last',
+    'args' => [
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_list_t *',
+    'name' => 'modperl_list_new',
+    'args' => []
+  },
+  {
+    'return_type' => 'modperl_list_t *',
+    'name' => 'modperl_list_prepend',
+    'args' => [
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'list'
+      },
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'new_list'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_list_t *',
+    'name' => 'modperl_list_remove',
+    'args' => [
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'list'
+      },
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'rlist'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_list_t *',
+    'name' => 'modperl_list_remove_data',
+    'args' => [
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'list'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'modperl_list_t **',
+        'name' => 'listp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_log_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_map_to_storage_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_mgv_append',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'modperl_mgv_t *',
+        'name' => 'symbol'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'modperl_mgv_as_string',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_mgv_t *',
+        'name' => 'symbol'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'int',
+        'name' => 'package'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_mgv_t *',
+    'name' => 'modperl_mgv_compile',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_mgv_equal',
+    'args' => [
+      {
+        'type' => 'modperl_mgv_t *',
+        'name' => 'mgv1'
+      },
+      {
+        'type' => 'modperl_mgv_t *',
+        'name' => 'mgv2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_mgv_hash_handlers',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_mgv_t *',
+    'name' => 'modperl_mgv_last',
+    'args' => [
+      {
+        'type' => 'modperl_mgv_t *',
+        'name' => 'symbol'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'modperl_mgv_last_name',
+    'args' => [
+      {
+        'type' => 'modperl_mgv_t *',
+        'name' => 'symbol'
+      }
+    ]
+  },
+  {
+    'return_type' => 'GV *',
+    'name' => 'modperl_mgv_lookup',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_mgv_t *',
+        'name' => 'symbol'
+      }
+    ]
+  },
+  {
+    'return_type' => 'GV *',
+    'name' => 'modperl_mgv_lookup_autoload',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_mgv_t *',
+        'name' => 'symbol'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_mgv_t *',
+    'name' => 'modperl_mgv_new',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_mgv_require_module',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_mgv_t *',
+        'name' => 'symbol'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_mgv_resolve',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_handler_t *',
+        'name' => 'handler'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'int',
+        'name' => 'logfailure'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_modglobal_hash_keys',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_modglobal_key_t *',
+    'name' => 'modperl_modglobal_lookup',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_module_add',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'mod_cmds'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_module_config_get_obj',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'pmodule'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'v'
+      }
+    ]
+  },
+  {
+    'return_type' => 'PTR_TBL_t *',
+    'name' => 'modperl_module_config_table_get',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'int',
+        'name' => 'create'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_module_config_table_set',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'PTR_TBL_t *',
+        'name' => 'table'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_newSVsv_obj',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'stashsv'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'obj'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_open_logs_handler',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'plog'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_options_t *',
+    'name' => 'modperl_options_merge',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'modperl_options_t *',
+        'name' => 'base'
+      },
+      {
+        'type' => 'modperl_options_t *new',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_options_t *',
+    'name' => 'modperl_options_new',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'modperl_options_set',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'modperl_options_t *',
+        'name' => 'o'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_output_filter_add_connection',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_output_filter_add_request',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_output_filter_flush',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'modperl_filter_t *',
+        'name' => 'filter'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_output_filter_handler',
+    'args' => [
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'modperl_output_filter_read',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_filter_t *',
+        'name' => 'filter'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'wanted'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_output_filter_write',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_filter_t *',
+        'name' => 'filter'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_package_unload',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'package'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_av_push_elts_ref',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'AV *',
+        'name' => 'dst'
+      },
+      {
+        'type' => 'AV *',
+        'name' => 'src'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_call_endav',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_call_list',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'AV *',
+        'name' => 'subs'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_core_global_init',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_destruct',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_perl_destruct_level',
+    'args' => []
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_perl_do_join',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_do_sprintf',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'len'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sarg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_exit',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'int',
+        'name' => 'status'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_perl_gensym',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'pack'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_global_avcv_call',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_modglobal_key_t *',
+        'name' => 'gkey'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'package'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'packlen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_global_avcv_clear',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_modglobal_key_t *',
+        'name' => 'gkey'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'package'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'packlen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_global_avcv_register',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_modglobal_key_t *',
+        'name' => 'gkey'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'package'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'packlen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_global_request_restore',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_global_request_save',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'HE *',
+    'name' => 'modperl_perl_hv_fetch_he',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'HV *',
+        'name' => 'hv'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'klen'
+      },
+      {
+        'type' => 'U32',
+        'name' => 'hash'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_init_ids_server',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_perl_module_loaded',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_pp_set',
+    'args' => [
+      {
+        'type' => 'modperl_perl_opcode_e',
+        'name' => 'idx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_pp_set_all',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_pp_unset',
+    'args' => [
+      {
+        'type' => 'modperl_perl_opcode_e',
+        'name' => 'idx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_perl_pp_unset_all',
+    'args' => []
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_perl_sv_setref_uv',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'rv'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'UV',
+        'name' => 'uv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_pnotes',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'HV **',
+        'name' => 'pnotes'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'val'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_post_config_handler',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pconf'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'plog'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'ptemp'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_post_post_config_phase',
+    'args' => []
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_post_read_request_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_pre_connection_handler',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'csd'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_process_connection_handler',
+    'args' => [
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_ptr2obj',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'ptr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_register_auth_provider',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_group'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_name'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_version'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'callback1'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'callback2'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_register_auth_provider_name',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_group'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_name'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'provider_version'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'callback1'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'callback2'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_register_handler_hooks',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_register_hooks',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'ssize_t',
+    'name' => 'modperl_request_read',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'size_t',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_require_file',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'pv'
+      },
+      {
+        'type' => 'int',
+        'name' => 'logfailure'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_require_module',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'pv'
+      },
+      {
+        'type' => 'int',
+        'name' => 'logfailure'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_response_finish',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_response_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_response_handler_cgi',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_response_init',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_restart_count',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_restart_count_inc',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 'base_server'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_run',
+    'args' => []
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_run_filter',
+    'args' => [
+      {
+        'type' => 'modperl_filter_t *',
+        'name' => 'filter'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'modperl_server_desc',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'modperl_server_pool',
+    'args' => []
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'modperl_server_user_pool',
+    'args' => []
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_set_perl_module_config',
+    'args' => [
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'cv'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'cfg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_slurp_filename',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'int',
+        'name' => 'tainted'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_spawn_proc_prog',
+    'attr' => [
+      'static'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'command'
+      },
+      {
+        'type' => 'const char ***',
+        'name' => 'argv'
+      },
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'script_in'
+      },
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'script_out'
+      },
+      {
+        'type' => 'apr_file_t **',
+        'name' => 'script_err'
+      }
+    ]
+  },
+  {
+    'return_type' => 'PerlInterpreter *',
+    'name' => 'modperl_startup',
+    'args' => [
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_str_toupper',
+    'args' => [
+      {
+        'type' => 'char *',
+        'name' => 'str'
+      }
+    ]
+  },
+  {
+    'return_type' => 'request_rec *',
+    'name' => 'modperl_sv2request_rec',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'server_rec *',
+    'name' => 'modperl_sv2server_rec',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_svptr_table_clear',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'PTR_TBL_t *',
+        'name' => 'tbl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'PTR_TBL_t *',
+    'name' => 'modperl_svptr_table_clone',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'proto_perl'
+      },
+      {
+        'type' => 'PTR_TBL_t *',
+        'name' => 'source'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_svptr_table_delete',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'PTR_TBL_t *',
+        'name' => 'tbl'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_svptr_table_destroy',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'PTR_TBL_t *',
+        'name' => 'tbl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void *',
+    'name' => 'modperl_svptr_table_fetch',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'PTR_TBL_t *',
+        'name' => 'tbl'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_svptr_table_free',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'PTR_TBL_t *',
+        'name' => 'tbl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'PTR_TBL_t *',
+    'name' => 'modperl_svptr_table_new',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_svptr_table_split',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'PTR_TBL_t *',
+        'name' => 'tbl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_svptr_table_store',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'PTR_TBL_t *',
+        'name' => 'tbl'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'oldv'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'newv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_sys_dlclose',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'handle'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_sys_is_dir',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'modperl_table_get_set',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'table'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv_val'
+      },
+      {
+        'type' => 'int',
+        'name' => 'do_taint'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_threaded_mpm',
+    'args' => []
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_threads_started',
+    'args' => []
+  },
+  {
+    'return_type' => 'modperl_interp_t *',
+    'name' => 'modperl_thx_interp_get',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'thx'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_thx_interp_set',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'thx'
+      },
+      {
+        'type' => 'modperl_interp_t *',
+        'name' => 'interp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_tipool_add',
+    'args' => [
+      {
+        'type' => 'modperl_tipool_t *',
+        'name' => 'tipool'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_tipool_destroy',
+    'args' => [
+      {
+        'type' => 'modperl_tipool_t *',
+        'name' => 'tipool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_tipool_init',
+    'args' => [
+      {
+        'type' => 'modperl_tipool_t *',
+        'name' => 'tipool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_tipool_t *',
+    'name' => 'modperl_tipool_new',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'modperl_tipool_config_t *',
+        'name' => 'cfg'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'func'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_list_t *',
+    'name' => 'modperl_tipool_pop',
+    'args' => [
+      {
+        'type' => 'modperl_tipool_t *',
+        'name' => 'tipool'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_tipool_putback',
+    'args' => [
+      {
+        'type' => 'modperl_tipool_t *',
+        'name' => 'tipool'
+      },
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'listp'
+      },
+      {
+        'type' => 'int',
+        'name' => 'num_requests'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_tipool_putback_data',
+    'args' => [
+      {
+        'type' => 'modperl_tipool_t *',
+        'name' => 'tipool'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'int',
+        'name' => 'num_requests'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_tipool_remove',
+    'args' => [
+      {
+        'type' => 'modperl_tipool_t *',
+        'name' => 'tipool'
+      },
+      {
+        'type' => 'modperl_list_t *',
+        'name' => 'listp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_tls_create',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'modperl_tls_t **',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_tls_create_request_rec',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_tls_get',
+    'args' => [
+      {
+        'type' => 'modperl_tls_t *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'void **',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_tls_get_request_rec',
+    'args' => [
+      {
+        'type' => 'request_rec * *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_tls_reset_cleanup',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'modperl_tls_t *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_tls_reset_cleanup_request_rec',
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_tls_set',
+    'args' => [
+      {
+        'type' => 'modperl_tls_t *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_tls_set_request_rec',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_trace',
+    'args' => [
+      {
+        'type' => 'const char *',
+        'name' => 'func'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fmt'
+      },
+      {
+        'type' => '...',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_trace_level_set',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'logfile'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'level'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_trace_logfile_set',
+    'args' => [
+      {
+        'type' => 'apr_file_t *',
+        'name' => 'logfile_new'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_trans_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'modperl_type_handler',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_uri_t *',
+    'name' => 'modperl_uri_new',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_wbucket_flush',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'modperl_wbucket_t *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'int',
+        'name' => 'add_flush_bucket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_wbucket_pass',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'modperl_wbucket_t *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      },
+      {
+        'type' => 'int',
+        'name' => 'add_flush_bucket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'modperl_wbucket_write',
+    'attr' => [
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'modperl_wbucket_t *',
+        'name' => 'b'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'buf'
+      },
+      {
+        'type' => 'apr_size_t *',
+        'name' => 'wlen'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_xs_dl_handles_clear',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'modperl_xs_dl_handles_close',
+    'args' => [
+      {
+        'type' => 'void **',
+        'name' => 'handles'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void **',
+    'name' => 'modperl_xs_dl_handles_get',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'request_rec *',
+    'name' => 'modperl_xs_sv2request_rec',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'CV *',
+        'name' => 'cv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_APR__Brigade_cleanup',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'brigade'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_APR__Brigade_concat',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'a'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_APR__Brigade_destroy',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'mpxs_APR__Brigade_first',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'brigade'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'mpxs_APR__Brigade_flatten',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_APR__Brigade_insert_head',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'brigade'
+      },
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'bucket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_APR__Brigade_insert_tail',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'brigade'
+      },
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'bucket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_APR__Brigade_is_empty',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'brigade'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'mpxs_APR__Brigade_last',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'brigade'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_APR__Brigade_length',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'int',
+        'name' => 'read_all'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'mpxs_APR__Brigade_next',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'brigade'
+      },
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'bucket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_pool_t *',
+    'name' => 'mpxs_APR__Brigade_pool',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'brigade'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'mpxs_APR__Brigade_prev',
+    'args' => [
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'brigade'
+      },
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'bucket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_APR__BucketAlloc_new',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'CLASS'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'p_sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_APR__Bucket_insert_after',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'a'
+      },
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_APR__Bucket_insert_before',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'a'
+      },
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'b'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_APR__Bucket_is_eos',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'bucket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_APR__Bucket_is_flush',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'bucket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_bucket *',
+    'name' => 'mpxs_APR__Bucket_new',
+    'attr' => [
+      'static'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'list'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'offset'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'mpxs_APR__Bucket_read',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'bucket'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'apr_read_type_e',
+        'name' => 'block'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_APR__Bucket_remove',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'apr_bucket *',
+        'name' => 'bucket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'mpxs_APR__Bucket_setaside',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'b_sv'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'p_sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_APR__Finfo_stat',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'fname'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'wanted'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'p_sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'unsigned long',
+    'name' => 'mpxs_APR__OS_current_thread_id',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_APR__Pool_clear',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'obj'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_APR__Socket_fileno',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'socket'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_int32_t',
+    'name' => 'mpxs_APR__Socket_opt_get',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'socket'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'opt'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_APR__Socket_opt_set',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'socket'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'opt'
+      },
+      {
+        'type' => 'apr_int32_t',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'mpxs_APR__Socket_poll',
+    'args' => [
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'socket'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'pool'
+      },
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 'timeout'
+      },
+      {
+        'type' => 'apr_int16_t',
+        'name' => 'reqevents'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'mpxs_APR__Socket_recv',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'socket'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_APR__Socket_timeout_set',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'socket'
+      },
+      {
+        'type' => 'apr_interval_time_t',
+        'name' => 't'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_APR__String_strfsize',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'size'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_APR__Table_EXISTS',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'apr_table_t *',
+        'name' => 't'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'mpxs_APR__Table_FETCH',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'tsv'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'mpxs_APR__Table_NEXTKEY',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'tsv'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'key'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_APR__Table_copy',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'base'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'p_sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_APR__Table_make',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'p_sv'
+      },
+      {
+        'type' => 'int',
+        'name' => 'nelts'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_APR__Table_overlay',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'base'
+      },
+      {
+        'type' => 'apr_table_t *',
+        'name' => 'overlay'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'p_sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'mpxs_APR__URI_port',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_uri_t *',
+        'name' => 'uri'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'portsv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_APR__URI_rpath',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_uri_t *',
+        'name' => 'apr_uri'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__CmdParms_add_config',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'lines'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__CmdParms_info',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__CmdParms_override_opts',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'cmd_parms *',
+        'name' => 'parms'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__Connection_add_input_filter',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'callback'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__Connection_add_output_filter',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'callback'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_socket_t *',
+    'name' => 'mpxs_Apache2__Connection_client_socket',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 's'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'mpxs_Apache2__Connection_get_remote_host',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'int',
+        'name' => 'type'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'dir_config'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__Connection_pnotes',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__Directive_as_hash',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'ap_directive_t *',
+        'name' => 'tree'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__Directive_as_string',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'ap_directive_t *',
+        'name' => 'self'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__Filter_ctx',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'filter'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'mpxs_Apache2__Filter_fflush',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'filter'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'brigade'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'mpxs_Apache2__Filter_get_brigade',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      },
+      {
+        'type' => 'ap_input_mode_t',
+        'name' => 'mode'
+      },
+      {
+        'type' => 'apr_read_type_e',
+        'name' => 'block'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'readbytes'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'mpxs_Apache2__Filter_pass_brigade',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'ap_filter_t *',
+        'name' => 'f'
+      },
+      {
+        'type' => 'apr_bucket_brigade *',
+        'name' => 'bb'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'mpxs_Apache2__Filter_print',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'mpxs_Apache2__Filter_read',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__Filter_remove',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__Filter_seen_eos',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__Log_BOOT',
+    'attr' => [
+      'static'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__Log_log',
+    'attr' => [
+      'static'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      },
+      {
+        'type' => 'int',
+        'name' => 'logtype'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__MPM_BOOT',
+    'attr' => [
+      'static'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__MPM_query',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'self'
+      },
+      {
+        'type' => 'int',
+        'name' => 'query_code'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__Module_add',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'package'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'cmds'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__Module_ap_api_major_version',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'module *',
+        'name' => 'mod'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__Module_ap_api_minor_version',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'module *',
+        'name' => 'mod'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__Module_get_config',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'pmodule'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'ap_conf_vector_t *',
+        'name' => 'v'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__Module_loaded',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__RequestRec_FILENO',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__RequestRec_GETC',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__RequestRec_OPEN',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'self'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'arg1'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'arg2'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__RequestRec_add_config',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'lines'
+      },
+      {
+        'type' => 'int',
+        'name' => 'override'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'path'
+      },
+      {
+        'type' => 'int',
+        'name' => 'override_options'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__RequestRec_add_input_filter',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'callback'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__RequestRec_add_output_filter',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'callback'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__RequestRec_allow_override_opts',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__RequestRec_as_string',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'mpxs_Apache2__RequestRec_auth_name',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'mpxs_Apache2__RequestRec_auth_type',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__RequestRec_child_terminate',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__RequestRec_content_languages',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'languages'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'mpxs_Apache2__RequestRec_content_type',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'type'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'mpxs_Apache2__RequestRec_document_root',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'new_root'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_finfo_t *',
+    'name' => 'mpxs_Apache2__RequestRec_finfo',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_finfo_t *',
+        'name' => 'finfo'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__RequestRec_get_handlers',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'const char *',
+    'name' => 'mpxs_Apache2__RequestRec_handler',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__RequestRec_is_perl_option_enabled',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'mpxs_Apache2__RequestRec_location',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__RequestRec_location_merge',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'location'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__RequestRec_new',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'conn_rec *',
+        'name' => 'c'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'base_pool_sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__RequestRec_no_cache',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'flag'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_uri_t *',
+    'name' => 'mpxs_Apache2__RequestRec_parsed_uri',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__RequestRec_pnotes',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__RequestRec_print',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__RequestRec_proxyreq',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__RequestRec_push_handlers',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__RequestRec_read',
+    'attr' => [
+      'static'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'offset'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__RequestRec_rflush',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'mpxs_Apache2__RequestRec_sendfile',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'filename'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'offset'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__RequestRec_set_basic_credentials',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'username'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'password'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__RequestRec_set_handlers',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      }
+    ]
+  },
+  {
+    'return_type' => '',
+    'name' => 'mpxs_Apache2__RequestRec_set_last_modified',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'apr_time_t',
+        'name' => 'mtime'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__RequestRec_subprocess_env',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'mpxs_Apache2__RequestRec_write',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'apr_size_t',
+        'name' => 'len'
+      },
+      {
+        'type' => 'apr_off_t',
+        'name' => 'offset'
+      }
+    ]
+  },
+  {
+    'return_type' => 'request_rec *',
+    'name' => 'mpxs_Apache2__RequestUtil_request',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'svr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__ServerRec_add_config',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'lines'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_Apache2__ServerRec_get_handlers',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__ServerRec_is_perl_option_enabled',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__ServerRec_is_virtual',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__ServerRec_loglevel',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'int',
+        'name' => 'loglevel'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__ServerRec_push_handlers',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_Apache2__ServerRec_set_handlers',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'server_rec *',
+        'name' => 's'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__ServerUtil_BOOT',
+    'attr' => [
+      'static'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_Apache2__ServerUtil_server_shutdown_cleanup_register',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'cv'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_ModPerl__Global_special_list_call',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'package'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_ModPerl__Global_special_list_clear',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'package'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_ModPerl__Global_special_list_register',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'package'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_ModPerl__Util_untaint',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_ap_allow_methods',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'long',
+    'name' => 'mpxs_ap_get_client_block',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'buffer'
+      },
+      {
+        'type' => 'int',
+        'name' => 'bufsiz'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_ap_log_error',
+    'attr' => [
+      'static'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'int',
+        'name' => 'level'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'msg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'mpxs_ap_register_auth_provider',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_ap_requires',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'mpxs_ap_rprintf',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_ap_run_sub_req',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'mpxs_ap_rvputs',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'mpxs_ap_unescape_url',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'url'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_apr_base64_decode',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_apr_base64_encode',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_apr_brigade_create',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'CLASS'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'p_sv'
+      },
+      {
+        'type' => 'apr_bucket_alloc_t *',
+        'name' => 'ba'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_apr_ipsubnet_create',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'p_sv'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'ipstr'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'mask_or_numbits'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_apr_password_validate',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'passwd'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'hash'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_apr_pool_DESTROY',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'obj'
+      }
+    ]
+  },
+  {
+    'return_type' => '',
+    'name' => 'mpxs_apr_pool_cleanup',
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'cleanup_data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_apr_pool_cleanup_register',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'p'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'cv'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'arg'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_apr_pool_create',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'parent_pool_obj'
+      }
+    ]
+  },
+  {
+    'return_type' => '',
+    'name' => 'mpxs_apr_pool_parent_get',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_pool_t *',
+        'name' => 'child_pool'
+      }
+    ]
+  },
+  {
+    'return_type' => '',
+    'name' => 'mpxs_apr_sockaddr_ip_get',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_sockaddr_t *',
+        'name' => 'sockaddr'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_size_t',
+    'name' => 'mpxs_apr_socket_send',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_socket_t *',
+        'name' => 'socket'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv_buf'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'sv_len'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_interval_time_t',
+    'name' => 'mpxs_apr_socket_timeout_get',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_apr_table_do',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'I32',
+        'name' => 'items'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'mark'
+      },
+      {
+        'type' => 'SV **',
+        'name' => 'sp'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_apr_table_do_cb',
+    'attr' => [
+      'static'
+    ],
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'key'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_apr_thread_mutex_create',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'p_sv'
+      },
+      {
+        'type' => 'unsigned int',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_apr_thread_rwlock_create',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'p_sv'
+      }
+    ]
+  },
+  {
+    'return_type' => 'SV *',
+    'name' => 'mpxs_apr_uri_parse',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'classname'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'p_sv'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'uri_string'
+      }
+    ]
+  },
+  {
+    'return_type' => 'char *',
+    'name' => 'mpxs_apr_uri_unparse',
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'apr_uri_t *',
+        'name' => 'uptr'
+      },
+      {
+        'type' => 'unsigned',
+        'name' => 'flags'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_uuid_t *',
+    'name' => 'mpxs_apr_uuid_get',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'CLASS'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_uuid_t *',
+    'name' => 'mpxs_apr_uuid_parse',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'CLASS'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'buf'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'mpxs_cleanup_run',
+    'attr' => [
+      'static'
+    ],
+    'args' => [
+      {
+        'type' => 'void *',
+        'name' => 'data'
+      }
+    ]
+  },
+  {
+    'return_type' => 'void',
+    'name' => 'mpxs_insert_auth_cfg',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'directive'
+      },
+      {
+        'type' => 'char *',
+        'name' => 'val'
+      }
+    ]
+  },
+  {
+    'return_type' => 'apr_status_t',
+    'name' => 'mpxs_setup_client_block',
+    'args' => [
+      {
+        'type' => 'request_rec *',
+        'name' => 'r'
+      }
+    ]
+  },
+  {
+    'return_type' => 'int',
+    'name' => 'mpxs_special_list_do',
+    'attr' => [
+      'static'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter*',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'const char *',
+        'name' => 'name'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'package'
+      },
+      {
+        'type' => 'mpxs_special_list_do_t',
+        'name' => 'func'
+      }
+    ]
+  },
+  {
+    'return_type' => 'modperl_interp_t *',
+    'name' => 'mpxs_ModPerl__Interpreter_current',
+    'attr' => [
+      'static',
+      '__inline__'
+    ],
+    'args' => [
+      {
+        'type' => 'PerlInterpreter *',
+        'name' => 'my_perl'
+      },
+      {
+        'type' => 'SV *',
+        'name' => 'class'
+      }
+    ]
+  }
+];
+
+
+1;
